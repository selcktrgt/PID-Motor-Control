
PID_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005694  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08005860  08005860  00006860  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058b8  080058b8  00007098  2**0
                  CONTENTS
  4 .ARM          00000008  080058b8  080058b8  000068b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058c0  080058c0  00007098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058c0  080058c0  000068c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080058c4  080058c4  000068c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  080058c8  00007000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  20000098  08005960  00007098  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  08005960  000073cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c5b6  00000000  00000000  000070c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d16  00000000  00000000  0001367e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  00015398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a42  00000000  00000000  000160a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000220f3  00000000  00000000  00016aea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c03  00000000  00000000  00038bdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d13ef  00000000  00000000  000497e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011abcf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bac  00000000  00000000  0011ac14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0011e7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000098 	.word	0x20000098
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005844 	.word	0x08005844

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000009c 	.word	0x2000009c
 8000204:	08005844 	.word	0x08005844

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2uiz>:
 8000ae0:	004a      	lsls	r2, r1, #1
 8000ae2:	d211      	bcs.n	8000b08 <__aeabi_d2uiz+0x28>
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ae8:	d211      	bcs.n	8000b0e <__aeabi_d2uiz+0x2e>
 8000aea:	d50d      	bpl.n	8000b08 <__aeabi_d2uiz+0x28>
 8000aec:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d40e      	bmi.n	8000b14 <__aeabi_d2uiz+0x34>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	fa23 f002 	lsr.w	r0, r3, r2
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b12:	d102      	bne.n	8000b1a <__aeabi_d2uiz+0x3a>
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	4770      	bx	lr
 8000b1a:	f04f 0000 	mov.w	r0, #0
 8000b1e:	4770      	bx	lr

08000b20 <__aeabi_d2f>:
 8000b20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b24:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b28:	bf24      	itt	cs
 8000b2a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b2e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b32:	d90d      	bls.n	8000b50 <__aeabi_d2f+0x30>
 8000b34:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b38:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b3c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b40:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b44:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b48:	bf08      	it	eq
 8000b4a:	f020 0001 	biceq.w	r0, r0, #1
 8000b4e:	4770      	bx	lr
 8000b50:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b54:	d121      	bne.n	8000b9a <__aeabi_d2f+0x7a>
 8000b56:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b5a:	bfbc      	itt	lt
 8000b5c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b60:	4770      	bxlt	lr
 8000b62:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b66:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b6a:	f1c2 0218 	rsb	r2, r2, #24
 8000b6e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b72:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b76:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	f040 0001 	orrne.w	r0, r0, #1
 8000b80:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b84:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b88:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b8c:	ea40 000c 	orr.w	r0, r0, ip
 8000b90:	fa23 f302 	lsr.w	r3, r3, r2
 8000b94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b98:	e7cc      	b.n	8000b34 <__aeabi_d2f+0x14>
 8000b9a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b9e:	d107      	bne.n	8000bb0 <__aeabi_d2f+0x90>
 8000ba0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba4:	bf1e      	ittt	ne
 8000ba6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000baa:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bae:	4770      	bxne	lr
 8000bb0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bb4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bb8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_uldivmod>:
 8000bc0:	b953      	cbnz	r3, 8000bd8 <__aeabi_uldivmod+0x18>
 8000bc2:	b94a      	cbnz	r2, 8000bd8 <__aeabi_uldivmod+0x18>
 8000bc4:	2900      	cmp	r1, #0
 8000bc6:	bf08      	it	eq
 8000bc8:	2800      	cmpeq	r0, #0
 8000bca:	bf1c      	itt	ne
 8000bcc:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd4:	f000 b96a 	b.w	8000eac <__aeabi_idiv0>
 8000bd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bdc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be0:	f000 f806 	bl	8000bf0 <__udivmoddi4>
 8000be4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bec:	b004      	add	sp, #16
 8000bee:	4770      	bx	lr

08000bf0 <__udivmoddi4>:
 8000bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf4:	9d08      	ldr	r5, [sp, #32]
 8000bf6:	460c      	mov	r4, r1
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d14e      	bne.n	8000c9a <__udivmoddi4+0xaa>
 8000bfc:	4694      	mov	ip, r2
 8000bfe:	458c      	cmp	ip, r1
 8000c00:	4686      	mov	lr, r0
 8000c02:	fab2 f282 	clz	r2, r2
 8000c06:	d962      	bls.n	8000cce <__udivmoddi4+0xde>
 8000c08:	b14a      	cbz	r2, 8000c1e <__udivmoddi4+0x2e>
 8000c0a:	f1c2 0320 	rsb	r3, r2, #32
 8000c0e:	4091      	lsls	r1, r2
 8000c10:	fa20 f303 	lsr.w	r3, r0, r3
 8000c14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c18:	4319      	orrs	r1, r3
 8000c1a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c22:	fa1f f68c 	uxth.w	r6, ip
 8000c26:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c2e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c32:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c36:	fb04 f106 	mul.w	r1, r4, r6
 8000c3a:	4299      	cmp	r1, r3
 8000c3c:	d90a      	bls.n	8000c54 <__udivmoddi4+0x64>
 8000c3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c42:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c46:	f080 8112 	bcs.w	8000e6e <__udivmoddi4+0x27e>
 8000c4a:	4299      	cmp	r1, r3
 8000c4c:	f240 810f 	bls.w	8000e6e <__udivmoddi4+0x27e>
 8000c50:	3c02      	subs	r4, #2
 8000c52:	4463      	add	r3, ip
 8000c54:	1a59      	subs	r1, r3, r1
 8000c56:	fa1f f38e 	uxth.w	r3, lr
 8000c5a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c5e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c66:	fb00 f606 	mul.w	r6, r0, r6
 8000c6a:	429e      	cmp	r6, r3
 8000c6c:	d90a      	bls.n	8000c84 <__udivmoddi4+0x94>
 8000c6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c72:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c76:	f080 80fc 	bcs.w	8000e72 <__udivmoddi4+0x282>
 8000c7a:	429e      	cmp	r6, r3
 8000c7c:	f240 80f9 	bls.w	8000e72 <__udivmoddi4+0x282>
 8000c80:	4463      	add	r3, ip
 8000c82:	3802      	subs	r0, #2
 8000c84:	1b9b      	subs	r3, r3, r6
 8000c86:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	b11d      	cbz	r5, 8000c96 <__udivmoddi4+0xa6>
 8000c8e:	40d3      	lsrs	r3, r2
 8000c90:	2200      	movs	r2, #0
 8000c92:	e9c5 3200 	strd	r3, r2, [r5]
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d905      	bls.n	8000caa <__udivmoddi4+0xba>
 8000c9e:	b10d      	cbz	r5, 8000ca4 <__udivmoddi4+0xb4>
 8000ca0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4608      	mov	r0, r1
 8000ca8:	e7f5      	b.n	8000c96 <__udivmoddi4+0xa6>
 8000caa:	fab3 f183 	clz	r1, r3
 8000cae:	2900      	cmp	r1, #0
 8000cb0:	d146      	bne.n	8000d40 <__udivmoddi4+0x150>
 8000cb2:	42a3      	cmp	r3, r4
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xcc>
 8000cb6:	4290      	cmp	r0, r2
 8000cb8:	f0c0 80f0 	bcc.w	8000e9c <__udivmoddi4+0x2ac>
 8000cbc:	1a86      	subs	r6, r0, r2
 8000cbe:	eb64 0303 	sbc.w	r3, r4, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	2d00      	cmp	r5, #0
 8000cc6:	d0e6      	beq.n	8000c96 <__udivmoddi4+0xa6>
 8000cc8:	e9c5 6300 	strd	r6, r3, [r5]
 8000ccc:	e7e3      	b.n	8000c96 <__udivmoddi4+0xa6>
 8000cce:	2a00      	cmp	r2, #0
 8000cd0:	f040 8090 	bne.w	8000df4 <__udivmoddi4+0x204>
 8000cd4:	eba1 040c 	sub.w	r4, r1, ip
 8000cd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cdc:	fa1f f78c 	uxth.w	r7, ip
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ce6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cea:	fb08 4416 	mls	r4, r8, r6, r4
 8000cee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cf2:	fb07 f006 	mul.w	r0, r7, r6
 8000cf6:	4298      	cmp	r0, r3
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x11c>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x11a>
 8000d04:	4298      	cmp	r0, r3
 8000d06:	f200 80cd 	bhi.w	8000ea4 <__udivmoddi4+0x2b4>
 8000d0a:	4626      	mov	r6, r4
 8000d0c:	1a1c      	subs	r4, r3, r0
 8000d0e:	fa1f f38e 	uxth.w	r3, lr
 8000d12:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d16:	fb08 4410 	mls	r4, r8, r0, r4
 8000d1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1e:	fb00 f707 	mul.w	r7, r0, r7
 8000d22:	429f      	cmp	r7, r3
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x148>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x146>
 8000d30:	429f      	cmp	r7, r3
 8000d32:	f200 80b0 	bhi.w	8000e96 <__udivmoddi4+0x2a6>
 8000d36:	4620      	mov	r0, r4
 8000d38:	1bdb      	subs	r3, r3, r7
 8000d3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3e:	e7a5      	b.n	8000c8c <__udivmoddi4+0x9c>
 8000d40:	f1c1 0620 	rsb	r6, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 f706 	lsr.w	r7, r2, r6
 8000d4a:	431f      	orrs	r7, r3
 8000d4c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d50:	fa04 f301 	lsl.w	r3, r4, r1
 8000d54:	ea43 030c 	orr.w	r3, r3, ip
 8000d58:	40f4      	lsrs	r4, r6
 8000d5a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d5e:	0c38      	lsrs	r0, r7, #16
 8000d60:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d64:	fbb4 fef0 	udiv	lr, r4, r0
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d70:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d74:	fb0e f90c 	mul.w	r9, lr, ip
 8000d78:	45a1      	cmp	r9, r4
 8000d7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x1a6>
 8000d80:	193c      	adds	r4, r7, r4
 8000d82:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d86:	f080 8084 	bcs.w	8000e92 <__udivmoddi4+0x2a2>
 8000d8a:	45a1      	cmp	r9, r4
 8000d8c:	f240 8081 	bls.w	8000e92 <__udivmoddi4+0x2a2>
 8000d90:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d94:	443c      	add	r4, r7
 8000d96:	eba4 0409 	sub.w	r4, r4, r9
 8000d9a:	fa1f f983 	uxth.w	r9, r3
 8000d9e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000da2:	fb00 4413 	mls	r4, r0, r3, r4
 8000da6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000daa:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d907      	bls.n	8000dc2 <__udivmoddi4+0x1d2>
 8000db2:	193c      	adds	r4, r7, r4
 8000db4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db8:	d267      	bcs.n	8000e8a <__udivmoddi4+0x29a>
 8000dba:	45a4      	cmp	ip, r4
 8000dbc:	d965      	bls.n	8000e8a <__udivmoddi4+0x29a>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	443c      	add	r4, r7
 8000dc2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dc6:	fba0 9302 	umull	r9, r3, r0, r2
 8000dca:	eba4 040c 	sub.w	r4, r4, ip
 8000dce:	429c      	cmp	r4, r3
 8000dd0:	46ce      	mov	lr, r9
 8000dd2:	469c      	mov	ip, r3
 8000dd4:	d351      	bcc.n	8000e7a <__udivmoddi4+0x28a>
 8000dd6:	d04e      	beq.n	8000e76 <__udivmoddi4+0x286>
 8000dd8:	b155      	cbz	r5, 8000df0 <__udivmoddi4+0x200>
 8000dda:	ebb8 030e 	subs.w	r3, r8, lr
 8000dde:	eb64 040c 	sbc.w	r4, r4, ip
 8000de2:	fa04 f606 	lsl.w	r6, r4, r6
 8000de6:	40cb      	lsrs	r3, r1
 8000de8:	431e      	orrs	r6, r3
 8000dea:	40cc      	lsrs	r4, r1
 8000dec:	e9c5 6400 	strd	r6, r4, [r5]
 8000df0:	2100      	movs	r1, #0
 8000df2:	e750      	b.n	8000c96 <__udivmoddi4+0xa6>
 8000df4:	f1c2 0320 	rsb	r3, r2, #32
 8000df8:	fa20 f103 	lsr.w	r1, r0, r3
 8000dfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e00:	fa24 f303 	lsr.w	r3, r4, r3
 8000e04:	4094      	lsls	r4, r2
 8000e06:	430c      	orrs	r4, r1
 8000e08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e0c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e18:	fb08 3110 	mls	r1, r8, r0, r3
 8000e1c:	0c23      	lsrs	r3, r4, #16
 8000e1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e22:	fb00 f107 	mul.w	r1, r0, r7
 8000e26:	4299      	cmp	r1, r3
 8000e28:	d908      	bls.n	8000e3c <__udivmoddi4+0x24c>
 8000e2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e32:	d22c      	bcs.n	8000e8e <__udivmoddi4+0x29e>
 8000e34:	4299      	cmp	r1, r3
 8000e36:	d92a      	bls.n	8000e8e <__udivmoddi4+0x29e>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e44:	fb08 3311 	mls	r3, r8, r1, r3
 8000e48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e4c:	fb01 f307 	mul.w	r3, r1, r7
 8000e50:	42a3      	cmp	r3, r4
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x276>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e5c:	d213      	bcs.n	8000e86 <__udivmoddi4+0x296>
 8000e5e:	42a3      	cmp	r3, r4
 8000e60:	d911      	bls.n	8000e86 <__udivmoddi4+0x296>
 8000e62:	3902      	subs	r1, #2
 8000e64:	4464      	add	r4, ip
 8000e66:	1ae4      	subs	r4, r4, r3
 8000e68:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e6c:	e739      	b.n	8000ce2 <__udivmoddi4+0xf2>
 8000e6e:	4604      	mov	r4, r0
 8000e70:	e6f0      	b.n	8000c54 <__udivmoddi4+0x64>
 8000e72:	4608      	mov	r0, r1
 8000e74:	e706      	b.n	8000c84 <__udivmoddi4+0x94>
 8000e76:	45c8      	cmp	r8, r9
 8000e78:	d2ae      	bcs.n	8000dd8 <__udivmoddi4+0x1e8>
 8000e7a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e7e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e82:	3801      	subs	r0, #1
 8000e84:	e7a8      	b.n	8000dd8 <__udivmoddi4+0x1e8>
 8000e86:	4631      	mov	r1, r6
 8000e88:	e7ed      	b.n	8000e66 <__udivmoddi4+0x276>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	e799      	b.n	8000dc2 <__udivmoddi4+0x1d2>
 8000e8e:	4630      	mov	r0, r6
 8000e90:	e7d4      	b.n	8000e3c <__udivmoddi4+0x24c>
 8000e92:	46d6      	mov	lr, sl
 8000e94:	e77f      	b.n	8000d96 <__udivmoddi4+0x1a6>
 8000e96:	4463      	add	r3, ip
 8000e98:	3802      	subs	r0, #2
 8000e9a:	e74d      	b.n	8000d38 <__udivmoddi4+0x148>
 8000e9c:	4606      	mov	r6, r0
 8000e9e:	4623      	mov	r3, r4
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	e70f      	b.n	8000cc4 <__udivmoddi4+0xd4>
 8000ea4:	3e02      	subs	r6, #2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	e730      	b.n	8000d0c <__udivmoddi4+0x11c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb4:	f001 f95c 	bl	8002170 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb8:	f000 f854 	bl	8000f64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ebc:	f000 f9f8 	bl	80012b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ec0:	f000 f8bc 	bl	800103c <MX_I2C1_Init>
  MX_TIM1_Init();
 8000ec4:	f000 f916 	bl	80010f4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ec8:	f000 f998 	bl	80011fc <MX_TIM2_Init>
  MX_I2C2_Init();
 8000ecc:	f000 f8e4 	bl	8001098 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  mpu6050_init();
 8000ed0:	f000 fa2a 	bl	8001328 <mpu6050_init>
  HAL_Delay(100);
 8000ed4:	2064      	movs	r0, #100	@ 0x64
 8000ed6:	f001 f9c9 	bl	800226c <HAL_Delay>
 // calibrate_gyro();
 // calibrate_gyro();


  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000eda:	2100      	movs	r1, #0
 8000edc:	481e      	ldr	r0, [pc, #120]	@ (8000f58 <main+0xa8>)
 8000ede:	f003 fcfd 	bl	80048dc <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 50);
 8000ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f58 <main+0xa8>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2232      	movs	r2, #50	@ 0x32
 8000ee8:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_Delay(3000); //
 8000eea:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000eee:	f001 f9bd 	bl	800226c <HAL_Delay>

  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 75);
 8000ef2:	4b19      	ldr	r3, [pc, #100]	@ (8000f58 <main+0xa8>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	224b      	movs	r2, #75	@ 0x4b
 8000ef8:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_Delay(3000);
 8000efa:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000efe:	f001 f9b5 	bl	800226c <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    gyro_signals();
 8000f02:	f000 fa8d 	bl	8001420 <gyro_signals>

    accel_signals();
 8000f06:	f000 fb5b 	bl	80015c0 <accel_signals>
    Get_Angle();
 8000f0a:	f000 fcf7 	bl	80018fc <Get_Angle>


    control_sig = get_control_signal(KalmanAngleRoll);
 8000f0e:	4b13      	ldr	r3, [pc, #76]	@ (8000f5c <main+0xac>)
 8000f10:	edd3 7a00 	vldr	s15, [r3]
 8000f14:	eeb0 0a67 	vmov.f32	s0, s15
 8000f18:	f000 fd4e 	bl	80019b8 <get_control_signal>
 8000f1c:	ec53 2b10 	vmov	r2, r3, d0
 8000f20:	4610      	mov	r0, r2
 8000f22:	4619      	mov	r1, r3
 8000f24:	f7ff fddc 	bl	8000ae0 <__aeabi_d2uiz>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	b29a      	uxth	r2, r3
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f60 <main+0xb0>)
 8000f2e:	801a      	strh	r2, [r3, #0]


    if(control_sig>94){
 8000f30:	4b0b      	ldr	r3, [pc, #44]	@ (8000f60 <main+0xb0>)
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	2b5e      	cmp	r3, #94	@ 0x5e
 8000f36:	d902      	bls.n	8000f3e <main+0x8e>

      control_sig=94;
 8000f38:	4b09      	ldr	r3, [pc, #36]	@ (8000f60 <main+0xb0>)
 8000f3a:	225e      	movs	r2, #94	@ 0x5e
 8000f3c:	801a      	strh	r2, [r3, #0]
    }
    if(control_sig<70){
 8000f3e:	4b08      	ldr	r3, [pc, #32]	@ (8000f60 <main+0xb0>)
 8000f40:	881b      	ldrh	r3, [r3, #0]
 8000f42:	2b45      	cmp	r3, #69	@ 0x45
 8000f44:	d802      	bhi.n	8000f4c <main+0x9c>
      control_sig=70;
 8000f46:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <main+0xb0>)
 8000f48:	2246      	movs	r2, #70	@ 0x46
 8000f4a:	801a      	strh	r2, [r3, #0]
    }

    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, control_sig);
 8000f4c:	4b04      	ldr	r3, [pc, #16]	@ (8000f60 <main+0xb0>)
 8000f4e:	881a      	ldrh	r2, [r3, #0]
 8000f50:	4b01      	ldr	r3, [pc, #4]	@ (8000f58 <main+0xa8>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	635a      	str	r2, [r3, #52]	@ 0x34
    gyro_signals();
 8000f56:	e7d4      	b.n	8000f02 <main+0x52>
 8000f58:	200001a4 	.word	0x200001a4
 8000f5c:	20000224 	.word	0x20000224
 8000f60:	20000270 	.word	0x20000270

08000f64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b094      	sub	sp, #80	@ 0x50
 8000f68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6a:	f107 031c 	add.w	r3, r7, #28
 8000f6e:	2234      	movs	r2, #52	@ 0x34
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f004 f98c 	bl	8005290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f78:	f107 0308 	add.w	r3, r7, #8
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f88:	2300      	movs	r3, #0
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	4b29      	ldr	r3, [pc, #164]	@ (8001034 <SystemClock_Config+0xd0>)
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f90:	4a28      	ldr	r2, [pc, #160]	@ (8001034 <SystemClock_Config+0xd0>)
 8000f92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f96:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f98:	4b26      	ldr	r3, [pc, #152]	@ (8001034 <SystemClock_Config+0xd0>)
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	4b23      	ldr	r3, [pc, #140]	@ (8001038 <SystemClock_Config+0xd4>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000fb0:	4a21      	ldr	r2, [pc, #132]	@ (8001038 <SystemClock_Config+0xd4>)
 8000fb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fb6:	6013      	str	r3, [r2, #0]
 8000fb8:	4b1f      	ldr	r3, [pc, #124]	@ (8001038 <SystemClock_Config+0xd4>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fc0:	603b      	str	r3, [r7, #0]
 8000fc2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fcc:	2310      	movs	r3, #16
 8000fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fd8:	2308      	movs	r3, #8
 8000fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000fdc:	2348      	movs	r3, #72	@ 0x48
 8000fde:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fec:	f107 031c 	add.w	r3, r7, #28
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f003 f985 	bl	8004300 <HAL_RCC_OscConfig>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000ffc:	f000 f98e 	bl	800131c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001000:	230f      	movs	r3, #15
 8001002:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001004:	2302      	movs	r3, #2
 8001006:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001008:	2300      	movs	r3, #0
 800100a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800100c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001010:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001012:	2300      	movs	r3, #0
 8001014:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001016:	f107 0308 	add.w	r3, r7, #8
 800101a:	2102      	movs	r1, #2
 800101c:	4618      	mov	r0, r3
 800101e:	f002 fe39 	bl	8003c94 <HAL_RCC_ClockConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001028:	f000 f978 	bl	800131c <Error_Handler>
  }
}
 800102c:	bf00      	nop
 800102e:	3750      	adds	r7, #80	@ 0x50
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40023800 	.word	0x40023800
 8001038:	40007000 	.word	0x40007000

0800103c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001040:	4b12      	ldr	r3, [pc, #72]	@ (800108c <MX_I2C1_Init+0x50>)
 8001042:	4a13      	ldr	r2, [pc, #76]	@ (8001090 <MX_I2C1_Init+0x54>)
 8001044:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001046:	4b11      	ldr	r3, [pc, #68]	@ (800108c <MX_I2C1_Init+0x50>)
 8001048:	4a12      	ldr	r2, [pc, #72]	@ (8001094 <MX_I2C1_Init+0x58>)
 800104a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800104c:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <MX_I2C1_Init+0x50>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001052:	4b0e      	ldr	r3, [pc, #56]	@ (800108c <MX_I2C1_Init+0x50>)
 8001054:	2200      	movs	r2, #0
 8001056:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001058:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <MX_I2C1_Init+0x50>)
 800105a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800105e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001060:	4b0a      	ldr	r3, [pc, #40]	@ (800108c <MX_I2C1_Init+0x50>)
 8001062:	2200      	movs	r2, #0
 8001064:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001066:	4b09      	ldr	r3, [pc, #36]	@ (800108c <MX_I2C1_Init+0x50>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800106c:	4b07      	ldr	r3, [pc, #28]	@ (800108c <MX_I2C1_Init+0x50>)
 800106e:	2200      	movs	r2, #0
 8001070:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001072:	4b06      	ldr	r3, [pc, #24]	@ (800108c <MX_I2C1_Init+0x50>)
 8001074:	2200      	movs	r2, #0
 8001076:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001078:	4804      	ldr	r0, [pc, #16]	@ (800108c <MX_I2C1_Init+0x50>)
 800107a:	f001 fc89 	bl	8002990 <HAL_I2C_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001084:	f000 f94a 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200000b4 	.word	0x200000b4
 8001090:	40005400 	.word	0x40005400
 8001094:	000186a0 	.word	0x000186a0

08001098 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800109c:	4b12      	ldr	r3, [pc, #72]	@ (80010e8 <MX_I2C2_Init+0x50>)
 800109e:	4a13      	ldr	r2, [pc, #76]	@ (80010ec <MX_I2C2_Init+0x54>)
 80010a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 80000;
 80010a2:	4b11      	ldr	r3, [pc, #68]	@ (80010e8 <MX_I2C2_Init+0x50>)
 80010a4:	4a12      	ldr	r2, [pc, #72]	@ (80010f0 <MX_I2C2_Init+0x58>)
 80010a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	@ (80010e8 <MX_I2C2_Init+0x50>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80010ae:	4b0e      	ldr	r3, [pc, #56]	@ (80010e8 <MX_I2C2_Init+0x50>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010b4:	4b0c      	ldr	r3, [pc, #48]	@ (80010e8 <MX_I2C2_Init+0x50>)
 80010b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010ba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010bc:	4b0a      	ldr	r3, [pc, #40]	@ (80010e8 <MX_I2C2_Init+0x50>)
 80010be:	2200      	movs	r2, #0
 80010c0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80010c2:	4b09      	ldr	r3, [pc, #36]	@ (80010e8 <MX_I2C2_Init+0x50>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010c8:	4b07      	ldr	r3, [pc, #28]	@ (80010e8 <MX_I2C2_Init+0x50>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ce:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <MX_I2C2_Init+0x50>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80010d4:	4804      	ldr	r0, [pc, #16]	@ (80010e8 <MX_I2C2_Init+0x50>)
 80010d6:	f001 fc5b 	bl	8002990 <HAL_I2C_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80010e0:	f000 f91c 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000108 	.word	0x20000108
 80010ec:	40005800 	.word	0x40005800
 80010f0:	00013880 	.word	0x00013880

080010f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b092      	sub	sp, #72	@ 0x48
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010fa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001104:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
 8001114:	615a      	str	r2, [r3, #20]
 8001116:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	2220      	movs	r2, #32
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f004 f8b6 	bl	8005290 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001124:	4b33      	ldr	r3, [pc, #204]	@ (80011f4 <MX_TIM1_Init+0x100>)
 8001126:	4a34      	ldr	r2, [pc, #208]	@ (80011f8 <MX_TIM1_Init+0x104>)
 8001128:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 800112a:	4b32      	ldr	r3, [pc, #200]	@ (80011f4 <MX_TIM1_Init+0x100>)
 800112c:	22b3      	movs	r2, #179	@ 0xb3
 800112e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001130:	4b30      	ldr	r3, [pc, #192]	@ (80011f4 <MX_TIM1_Init+0x100>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001136:	4b2f      	ldr	r3, [pc, #188]	@ (80011f4 <MX_TIM1_Init+0x100>)
 8001138:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800113c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113e:	4b2d      	ldr	r3, [pc, #180]	@ (80011f4 <MX_TIM1_Init+0x100>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001144:	4b2b      	ldr	r3, [pc, #172]	@ (80011f4 <MX_TIM1_Init+0x100>)
 8001146:	2200      	movs	r2, #0
 8001148:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114a:	4b2a      	ldr	r3, [pc, #168]	@ (80011f4 <MX_TIM1_Init+0x100>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001150:	4828      	ldr	r0, [pc, #160]	@ (80011f4 <MX_TIM1_Init+0x100>)
 8001152:	f003 fb73 	bl	800483c <HAL_TIM_PWM_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800115c:	f000 f8de 	bl	800131c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001160:	2300      	movs	r3, #0
 8001162:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001164:	2300      	movs	r3, #0
 8001166:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001168:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800116c:	4619      	mov	r1, r3
 800116e:	4821      	ldr	r0, [pc, #132]	@ (80011f4 <MX_TIM1_Init+0x100>)
 8001170:	f003 ffc0 	bl	80050f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800117a:	f000 f8cf 	bl	800131c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800117e:	2360      	movs	r3, #96	@ 0x60
 8001180:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001186:	2300      	movs	r3, #0
 8001188:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800118a:	2300      	movs	r3, #0
 800118c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800118e:	2300      	movs	r3, #0
 8001190:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001192:	2300      	movs	r3, #0
 8001194:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001196:	2300      	movs	r3, #0
 8001198:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800119a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800119e:	2200      	movs	r2, #0
 80011a0:	4619      	mov	r1, r3
 80011a2:	4814      	ldr	r0, [pc, #80]	@ (80011f4 <MX_TIM1_Init+0x100>)
 80011a4:	f003 fc62 	bl	8004a6c <HAL_TIM_PWM_ConfigChannel>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80011ae:	f000 f8b5 	bl	800131c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011ca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011cc:	2300      	movs	r3, #0
 80011ce:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	4619      	mov	r1, r3
 80011d4:	4807      	ldr	r0, [pc, #28]	@ (80011f4 <MX_TIM1_Init+0x100>)
 80011d6:	f004 f809 	bl	80051ec <HAL_TIMEx_ConfigBreakDeadTime>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80011e0:	f000 f89c 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011e4:	4803      	ldr	r0, [pc, #12]	@ (80011f4 <MX_TIM1_Init+0x100>)
 80011e6:	f000 fef9 	bl	8001fdc <HAL_TIM_MspPostInit>

}
 80011ea:	bf00      	nop
 80011ec:	3748      	adds	r7, #72	@ 0x48
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	2000015c 	.word	0x2000015c
 80011f8:	40010000 	.word	0x40010000

080011fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08a      	sub	sp, #40	@ 0x28
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001202:	f107 0320 	add.w	r3, r7, #32
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
 8001218:	611a      	str	r2, [r3, #16]
 800121a:	615a      	str	r2, [r3, #20]
 800121c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800121e:	4b23      	ldr	r3, [pc, #140]	@ (80012ac <MX_TIM2_Init+0xb0>)
 8001220:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001224:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1440-1;
 8001226:	4b21      	ldr	r3, [pc, #132]	@ (80012ac <MX_TIM2_Init+0xb0>)
 8001228:	f240 529f 	movw	r2, #1439	@ 0x59f
 800122c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122e:	4b1f      	ldr	r3, [pc, #124]	@ (80012ac <MX_TIM2_Init+0xb0>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001234:	4b1d      	ldr	r3, [pc, #116]	@ (80012ac <MX_TIM2_Init+0xb0>)
 8001236:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800123a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800123c:	4b1b      	ldr	r3, [pc, #108]	@ (80012ac <MX_TIM2_Init+0xb0>)
 800123e:	2200      	movs	r2, #0
 8001240:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001242:	4b1a      	ldr	r3, [pc, #104]	@ (80012ac <MX_TIM2_Init+0xb0>)
 8001244:	2200      	movs	r2, #0
 8001246:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001248:	4818      	ldr	r0, [pc, #96]	@ (80012ac <MX_TIM2_Init+0xb0>)
 800124a:	f003 faf7 	bl	800483c <HAL_TIM_PWM_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001254:	f000 f862 	bl	800131c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001258:	2300      	movs	r3, #0
 800125a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001260:	f107 0320 	add.w	r3, r7, #32
 8001264:	4619      	mov	r1, r3
 8001266:	4811      	ldr	r0, [pc, #68]	@ (80012ac <MX_TIM2_Init+0xb0>)
 8001268:	f003 ff44 	bl	80050f4 <HAL_TIMEx_MasterConfigSynchronization>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001272:	f000 f853 	bl	800131c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001276:	2360      	movs	r3, #96	@ 0x60
 8001278:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001282:	2304      	movs	r3, #4
 8001284:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	2200      	movs	r2, #0
 800128a:	4619      	mov	r1, r3
 800128c:	4807      	ldr	r0, [pc, #28]	@ (80012ac <MX_TIM2_Init+0xb0>)
 800128e:	f003 fbed 	bl	8004a6c <HAL_TIM_PWM_ConfigChannel>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001298:	f000 f840 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800129c:	4803      	ldr	r0, [pc, #12]	@ (80012ac <MX_TIM2_Init+0xb0>)
 800129e:	f000 fe9d 	bl	8001fdc <HAL_TIM_MspPostInit>

}
 80012a2:	bf00      	nop
 80012a4:	3728      	adds	r7, #40	@ 0x28
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200001a4 	.word	0x200001a4

080012b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	4b17      	ldr	r3, [pc, #92]	@ (8001318 <MX_GPIO_Init+0x68>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	4a16      	ldr	r2, [pc, #88]	@ (8001318 <MX_GPIO_Init+0x68>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c6:	4b14      	ldr	r3, [pc, #80]	@ (8001318 <MX_GPIO_Init+0x68>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	4b10      	ldr	r3, [pc, #64]	@ (8001318 <MX_GPIO_Init+0x68>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012da:	4a0f      	ldr	r2, [pc, #60]	@ (8001318 <MX_GPIO_Init+0x68>)
 80012dc:	f043 0302 	orr.w	r3, r3, #2
 80012e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001318 <MX_GPIO_Init+0x68>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <MX_GPIO_Init+0x68>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	4a08      	ldr	r2, [pc, #32]	@ (8001318 <MX_GPIO_Init+0x68>)
 80012f8:	f043 0304 	orr.w	r3, r3, #4
 80012fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012fe:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <MX_GPIO_Init+0x68>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	f003 0304 	and.w	r3, r3, #4
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800130a:	bf00      	nop
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800

0800131c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001320:	b672      	cpsid	i
}
 8001322:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001324:	bf00      	nop
 8001326:	e7fd      	b.n	8001324 <Error_Handler+0x8>

08001328 <mpu6050_init>:
extern double dt;
extern double dt1;
extern double last_time;
uint32_t time1;
void mpu6050_init()
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af04      	add	r7, sp, #16
  HAL_Delay(200);
 800132e:	20c8      	movs	r0, #200	@ 0xc8
 8001330:	f000 ff9c 	bl	800226c <HAL_Delay>
  HAL_I2C_DeInit(&hi2c1);
 8001334:	4835      	ldr	r0, [pc, #212]	@ (800140c <mpu6050_init+0xe4>)
 8001336:	f001 fc6f 	bl	8002c18 <HAL_I2C_DeInit>
  HAL_Delay(50);
 800133a:	2032      	movs	r0, #50	@ 0x32
 800133c:	f000 ff96 	bl	800226c <HAL_Delay>
  HAL_I2C_Init(&hi2c1);
 8001340:	4832      	ldr	r0, [pc, #200]	@ (800140c <mpu6050_init+0xe4>)
 8001342:	f001 fb25 	bl	8002990 <HAL_I2C_Init>
  if (HAL_I2C_IsDeviceReady(&hi2c2, 0x68, 3, 100) == HAL_OK)
 8001346:	2364      	movs	r3, #100	@ 0x64
 8001348:	2203      	movs	r2, #3
 800134a:	2168      	movs	r1, #104	@ 0x68
 800134c:	4830      	ldr	r0, [pc, #192]	@ (8001410 <mpu6050_init+0xe8>)
 800134e:	f001 ffbf 	bl	80032d0 <HAL_I2C_IsDeviceReady>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d102      	bne.n	800135e <mpu6050_init+0x36>
  {
      ic2_ok=1;
 8001358:	4b2e      	ldr	r3, [pc, #184]	@ (8001414 <mpu6050_init+0xec>)
 800135a:	2201      	movs	r2, #1
 800135c:	701a      	strb	r2, [r3, #0]




      //wake up
  uint8_t data=0;
 800135e:	2300      	movs	r3, #0
 8001360:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, 1000);
 8001362:	4b2d      	ldr	r3, [pc, #180]	@ (8001418 <mpu6050_init+0xf0>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	b299      	uxth	r1, r3
 8001368:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800136c:	9302      	str	r3, [sp, #8]
 800136e:	2301      	movs	r3, #1
 8001370:	9301      	str	r3, [sp, #4]
 8001372:	1dfb      	adds	r3, r7, #7
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	2301      	movs	r3, #1
 8001378:	226b      	movs	r2, #107	@ 0x6b
 800137a:	4825      	ldr	r0, [pc, #148]	@ (8001410 <mpu6050_init+0xe8>)
 800137c:	f001 fc7c 	bl	8002c78 <HAL_I2C_Mem_Write>


  HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);
 8001380:	4b25      	ldr	r3, [pc, #148]	@ (8001418 <mpu6050_init+0xf0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	b299      	uxth	r1, r3
 8001386:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800138a:	9302      	str	r3, [sp, #8]
 800138c:	2301      	movs	r3, #1
 800138e:	9301      	str	r3, [sp, #4]
 8001390:	4b22      	ldr	r3, [pc, #136]	@ (800141c <mpu6050_init+0xf4>)
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	2301      	movs	r3, #1
 8001396:	2275      	movs	r2, #117	@ 0x75
 8001398:	481d      	ldr	r0, [pc, #116]	@ (8001410 <mpu6050_init+0xe8>)
 800139a:	f001 fd67 	bl	8002e6c <HAL_I2C_Mem_Read>

   //smpl_rate 1KHZ
  data=0x07;
 800139e:	2307      	movs	r3, #7
 80013a0:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 1000);
 80013a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001418 <mpu6050_init+0xf0>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	b299      	uxth	r1, r3
 80013a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ac:	9302      	str	r3, [sp, #8]
 80013ae:	2301      	movs	r3, #1
 80013b0:	9301      	str	r3, [sp, #4]
 80013b2:	1dfb      	adds	r3, r7, #7
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	2301      	movs	r3, #1
 80013b8:	2219      	movs	r2, #25
 80013ba:	4815      	ldr	r0, [pc, #84]	@ (8001410 <mpu6050_init+0xe8>)
 80013bc:	f001 fc5c 	bl	8002c78 <HAL_I2C_Mem_Write>

      //accel config FSEL=0 =>2G
  data=0x00;
 80013c0:	2300      	movs	r3, #0
 80013c2:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, 1000);
 80013c4:	4b14      	ldr	r3, [pc, #80]	@ (8001418 <mpu6050_init+0xf0>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	b299      	uxth	r1, r3
 80013ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ce:	9302      	str	r3, [sp, #8]
 80013d0:	2301      	movs	r3, #1
 80013d2:	9301      	str	r3, [sp, #4]
 80013d4:	1dfb      	adds	r3, r7, #7
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	2301      	movs	r3, #1
 80013da:	221c      	movs	r2, #28
 80013dc:	480c      	ldr	r0, [pc, #48]	@ (8001410 <mpu6050_init+0xe8>)
 80013de:	f001 fc4b 	bl	8002c78 <HAL_I2C_Mem_Write>
      //gyro config FSEL=0 =>250
  data=0x00;
 80013e2:	2300      	movs	r3, #0
 80013e4:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, 1000);
 80013e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <mpu6050_init+0xf0>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	b299      	uxth	r1, r3
 80013ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013f0:	9302      	str	r3, [sp, #8]
 80013f2:	2301      	movs	r3, #1
 80013f4:	9301      	str	r3, [sp, #4]
 80013f6:	1dfb      	adds	r3, r7, #7
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	2301      	movs	r3, #1
 80013fc:	221b      	movs	r2, #27
 80013fe:	4804      	ldr	r0, [pc, #16]	@ (8001410 <mpu6050_init+0xe8>)
 8001400:	f001 fc3a 	bl	8002c78 <HAL_I2C_Mem_Write>





}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	200000b4 	.word	0x200000b4
 8001410:	20000108 	.word	0x20000108
 8001414:	20000254 	.word	0x20000254
 8001418:	20000008 	.word	0x20000008
 800141c:	20000214 	.word	0x20000214

08001420 <gyro_signals>:

void gyro_signals()
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af04      	add	r7, sp, #16
  //DLPF CONFIG for vibrations
  //10HZ
     dt1 = HAL_GetTick();
 8001426:	f000 ff09 	bl	800223c <HAL_GetTick>
 800142a:	4603      	mov	r3, r0
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff f82d 	bl	800048c <__aeabi_ui2d>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	4954      	ldr	r1, [pc, #336]	@ (8001588 <gyro_signals+0x168>)
 8001438:	e9c1 2300 	strd	r2, r3, [r1]
     time1=HAL_GetTick();
 800143c:	f000 fefe 	bl	800223c <HAL_GetTick>
 8001440:	4603      	mov	r3, r0
 8001442:	4a52      	ldr	r2, [pc, #328]	@ (800158c <gyro_signals+0x16c>)
 8001444:	6013      	str	r3, [r2, #0]
     uint8_t data= 0x05;
 8001446:	2305      	movs	r3, #5
 8001448:	71fb      	strb	r3, [r7, #7]
     HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, 0x1A, 1, &data, 1, 1000);
 800144a:	4b51      	ldr	r3, [pc, #324]	@ (8001590 <gyro_signals+0x170>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	b299      	uxth	r1, r3
 8001450:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001454:	9302      	str	r3, [sp, #8]
 8001456:	2301      	movs	r3, #1
 8001458:	9301      	str	r3, [sp, #4]
 800145a:	1dfb      	adds	r3, r7, #7
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	2301      	movs	r3, #1
 8001460:	221a      	movs	r2, #26
 8001462:	484c      	ldr	r0, [pc, #304]	@ (8001594 <gyro_signals+0x174>)
 8001464:	f001 fc08 	bl	8002c78 <HAL_I2C_Mem_Write>

  //read GYRO

     uint8_t Rec_Data1[6];
     HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data1, 6, 1000);
 8001468:	4b49      	ldr	r3, [pc, #292]	@ (8001590 <gyro_signals+0x170>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	b299      	uxth	r1, r3
 800146e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001472:	9302      	str	r3, [sp, #8]
 8001474:	2306      	movs	r3, #6
 8001476:	9301      	str	r3, [sp, #4]
 8001478:	463b      	mov	r3, r7
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	2301      	movs	r3, #1
 800147e:	2243      	movs	r2, #67	@ 0x43
 8001480:	4844      	ldr	r0, [pc, #272]	@ (8001594 <gyro_signals+0x174>)
 8001482:	f001 fcf3 	bl	8002e6c <HAL_I2C_Mem_Read>
     Gyro_X_RAW=(int16_t)(Rec_Data1[0] << 8 | Rec_Data1[1]);
 8001486:	783b      	ldrb	r3, [r7, #0]
 8001488:	021b      	lsls	r3, r3, #8
 800148a:	b21a      	sxth	r2, r3
 800148c:	787b      	ldrb	r3, [r7, #1]
 800148e:	b21b      	sxth	r3, r3
 8001490:	4313      	orrs	r3, r2
 8001492:	b21a      	sxth	r2, r3
 8001494:	4b40      	ldr	r3, [pc, #256]	@ (8001598 <gyro_signals+0x178>)
 8001496:	801a      	strh	r2, [r3, #0]
     Gyro_Y_RAW=(int16_t)(Rec_Data1[2] << 8 | Rec_Data1[3]);
 8001498:	78bb      	ldrb	r3, [r7, #2]
 800149a:	021b      	lsls	r3, r3, #8
 800149c:	b21a      	sxth	r2, r3
 800149e:	78fb      	ldrb	r3, [r7, #3]
 80014a0:	b21b      	sxth	r3, r3
 80014a2:	4313      	orrs	r3, r2
 80014a4:	b21a      	sxth	r2, r3
 80014a6:	4b3d      	ldr	r3, [pc, #244]	@ (800159c <gyro_signals+0x17c>)
 80014a8:	801a      	strh	r2, [r3, #0]
     Gyro_Z_RAW=(int16_t)(Rec_Data1[4] << 8 | Rec_Data1[5]);
 80014aa:	793b      	ldrb	r3, [r7, #4]
 80014ac:	021b      	lsls	r3, r3, #8
 80014ae:	b21a      	sxth	r2, r3
 80014b0:	797b      	ldrb	r3, [r7, #5]
 80014b2:	b21b      	sxth	r3, r3
 80014b4:	4313      	orrs	r3, r2
 80014b6:	b21a      	sxth	r2, r3
 80014b8:	4b39      	ldr	r3, [pc, #228]	@ (80015a0 <gyro_signals+0x180>)
 80014ba:	801a      	strh	r2, [r3, #0]

     RateRoll = Gyro_X_RAW / 131.0;
 80014bc:	4b36      	ldr	r3, [pc, #216]	@ (8001598 <gyro_signals+0x178>)
 80014be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7fe fff2 	bl	80004ac <__aeabi_i2d>
 80014c8:	a32d      	add	r3, pc, #180	@ (adr r3, 8001580 <gyro_signals+0x160>)
 80014ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ce:	f7ff f981 	bl	80007d4 <__aeabi_ddiv>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	4610      	mov	r0, r2
 80014d8:	4619      	mov	r1, r3
 80014da:	f7ff fb21 	bl	8000b20 <__aeabi_d2f>
 80014de:	4603      	mov	r3, r0
 80014e0:	4a30      	ldr	r2, [pc, #192]	@ (80015a4 <gyro_signals+0x184>)
 80014e2:	6013      	str	r3, [r2, #0]
     RatePitch = Gyro_Y_RAW / 131.0;
 80014e4:	4b2d      	ldr	r3, [pc, #180]	@ (800159c <gyro_signals+0x17c>)
 80014e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7fe ffde 	bl	80004ac <__aeabi_i2d>
 80014f0:	a323      	add	r3, pc, #140	@ (adr r3, 8001580 <gyro_signals+0x160>)
 80014f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f6:	f7ff f96d 	bl	80007d4 <__aeabi_ddiv>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4610      	mov	r0, r2
 8001500:	4619      	mov	r1, r3
 8001502:	f7ff fb0d 	bl	8000b20 <__aeabi_d2f>
 8001506:	4603      	mov	r3, r0
 8001508:	4a27      	ldr	r2, [pc, #156]	@ (80015a8 <gyro_signals+0x188>)
 800150a:	6013      	str	r3, [r2, #0]
     RateYaw = Gyro_Z_RAW / 131.0;
 800150c:	4b24      	ldr	r3, [pc, #144]	@ (80015a0 <gyro_signals+0x180>)
 800150e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001512:	4618      	mov	r0, r3
 8001514:	f7fe ffca 	bl	80004ac <__aeabi_i2d>
 8001518:	a319      	add	r3, pc, #100	@ (adr r3, 8001580 <gyro_signals+0x160>)
 800151a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151e:	f7ff f959 	bl	80007d4 <__aeabi_ddiv>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4610      	mov	r0, r2
 8001528:	4619      	mov	r1, r3
 800152a:	f7ff faf9 	bl	8000b20 <__aeabi_d2f>
 800152e:	4603      	mov	r3, r0
 8001530:	4a1e      	ldr	r2, [pc, #120]	@ (80015ac <gyro_signals+0x18c>)
 8001532:	6013      	str	r3, [r2, #0]

     RateRoll -= RateCalibrationRoll;
 8001534:	4b1b      	ldr	r3, [pc, #108]	@ (80015a4 <gyro_signals+0x184>)
 8001536:	ed93 7a00 	vldr	s14, [r3]
 800153a:	4b1d      	ldr	r3, [pc, #116]	@ (80015b0 <gyro_signals+0x190>)
 800153c:	edd3 7a00 	vldr	s15, [r3]
 8001540:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001544:	4b17      	ldr	r3, [pc, #92]	@ (80015a4 <gyro_signals+0x184>)
 8001546:	edc3 7a00 	vstr	s15, [r3]
     RatePitch -= RateCalibrationPitch;
 800154a:	4b17      	ldr	r3, [pc, #92]	@ (80015a8 <gyro_signals+0x188>)
 800154c:	ed93 7a00 	vldr	s14, [r3]
 8001550:	4b18      	ldr	r3, [pc, #96]	@ (80015b4 <gyro_signals+0x194>)
 8001552:	edd3 7a00 	vldr	s15, [r3]
 8001556:	ee77 7a67 	vsub.f32	s15, s14, s15
 800155a:	4b13      	ldr	r3, [pc, #76]	@ (80015a8 <gyro_signals+0x188>)
 800155c:	edc3 7a00 	vstr	s15, [r3]
     RateYaw -= RateCalibrationYaw;
 8001560:	4b12      	ldr	r3, [pc, #72]	@ (80015ac <gyro_signals+0x18c>)
 8001562:	ed93 7a00 	vldr	s14, [r3]
 8001566:	4b14      	ldr	r3, [pc, #80]	@ (80015b8 <gyro_signals+0x198>)
 8001568:	edd3 7a00 	vldr	s15, [r3]
 800156c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001570:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <gyro_signals+0x18c>)
 8001572:	edc3 7a00 	vstr	s15, [r3]

}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	00000000 	.word	0x00000000
 8001584:	40606000 	.word	0x40606000
 8001588:	200001f8 	.word	0x200001f8
 800158c:	20000258 	.word	0x20000258
 8001590:	20000008 	.word	0x20000008
 8001594:	20000108 	.word	0x20000108
 8001598:	2000020e 	.word	0x2000020e
 800159c:	20000210 	.word	0x20000210
 80015a0:	20000212 	.word	0x20000212
 80015a4:	20000234 	.word	0x20000234
 80015a8:	20000238 	.word	0x20000238
 80015ac:	2000023c 	.word	0x2000023c
 80015b0:	20000248 	.word	0x20000248
 80015b4:	2000024c 	.word	0x2000024c
 80015b8:	20000250 	.word	0x20000250
 80015bc:	00000000 	.word	0x00000000

080015c0 <accel_signals>:


void accel_signals()
{
 80015c0:	b5b0      	push	{r4, r5, r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af04      	add	r7, sp, #16

      uint8_t Rec_Data[6];

      //read 6 bytes starting from accel_xout_h register

      HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR, ACCEL_X_OUT_H_REG, 1, Rec_Data, 6, 1000);
 80015c6:	4b84      	ldr	r3, [pc, #528]	@ (80017d8 <accel_signals+0x218>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	b299      	uxth	r1, r3
 80015cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015d0:	9302      	str	r3, [sp, #8]
 80015d2:	2306      	movs	r3, #6
 80015d4:	9301      	str	r3, [sp, #4]
 80015d6:	463b      	mov	r3, r7
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	2301      	movs	r3, #1
 80015dc:	223b      	movs	r2, #59	@ 0x3b
 80015de:	487f      	ldr	r0, [pc, #508]	@ (80017dc <accel_signals+0x21c>)
 80015e0:	f001 fc44 	bl	8002e6c <HAL_I2C_Mem_Read>


      Accel_X_RAW=(int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80015e4:	783b      	ldrb	r3, [r7, #0]
 80015e6:	021b      	lsls	r3, r3, #8
 80015e8:	b21a      	sxth	r2, r3
 80015ea:	787b      	ldrb	r3, [r7, #1]
 80015ec:	b21b      	sxth	r3, r3
 80015ee:	4313      	orrs	r3, r2
 80015f0:	b21a      	sxth	r2, r3
 80015f2:	4b7b      	ldr	r3, [pc, #492]	@ (80017e0 <accel_signals+0x220>)
 80015f4:	801a      	strh	r2, [r3, #0]
      Accel_Y_RAW=(int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80015f6:	78bb      	ldrb	r3, [r7, #2]
 80015f8:	021b      	lsls	r3, r3, #8
 80015fa:	b21a      	sxth	r2, r3
 80015fc:	78fb      	ldrb	r3, [r7, #3]
 80015fe:	b21b      	sxth	r3, r3
 8001600:	4313      	orrs	r3, r2
 8001602:	b21a      	sxth	r2, r3
 8001604:	4b77      	ldr	r3, [pc, #476]	@ (80017e4 <accel_signals+0x224>)
 8001606:	801a      	strh	r2, [r3, #0]
      Accel_Z_RAW=(int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001608:	793b      	ldrb	r3, [r7, #4]
 800160a:	021b      	lsls	r3, r3, #8
 800160c:	b21a      	sxth	r2, r3
 800160e:	797b      	ldrb	r3, [r7, #5]
 8001610:	b21b      	sxth	r3, r3
 8001612:	4313      	orrs	r3, r2
 8001614:	b21a      	sxth	r2, r3
 8001616:	4b74      	ldr	r3, [pc, #464]	@ (80017e8 <accel_signals+0x228>)
 8001618:	801a      	strh	r2, [r3, #0]

      Ax = Accel_X_RAW / 16384.0;
 800161a:	4b71      	ldr	r3, [pc, #452]	@ (80017e0 <accel_signals+0x220>)
 800161c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001620:	4618      	mov	r0, r3
 8001622:	f7fe ff43 	bl	80004ac <__aeabi_i2d>
 8001626:	f04f 0200 	mov.w	r2, #0
 800162a:	4b70      	ldr	r3, [pc, #448]	@ (80017ec <accel_signals+0x22c>)
 800162c:	f7ff f8d2 	bl	80007d4 <__aeabi_ddiv>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4610      	mov	r0, r2
 8001636:	4619      	mov	r1, r3
 8001638:	f7ff fa72 	bl	8000b20 <__aeabi_d2f>
 800163c:	4603      	mov	r3, r0
 800163e:	4a6c      	ldr	r2, [pc, #432]	@ (80017f0 <accel_signals+0x230>)
 8001640:	6013      	str	r3, [r2, #0]
      Ay = Accel_Y_RAW / 16384.0;
 8001642:	4b68      	ldr	r3, [pc, #416]	@ (80017e4 <accel_signals+0x224>)
 8001644:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001648:	4618      	mov	r0, r3
 800164a:	f7fe ff2f 	bl	80004ac <__aeabi_i2d>
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	4b66      	ldr	r3, [pc, #408]	@ (80017ec <accel_signals+0x22c>)
 8001654:	f7ff f8be 	bl	80007d4 <__aeabi_ddiv>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4610      	mov	r0, r2
 800165e:	4619      	mov	r1, r3
 8001660:	f7ff fa5e 	bl	8000b20 <__aeabi_d2f>
 8001664:	4603      	mov	r3, r0
 8001666:	4a63      	ldr	r2, [pc, #396]	@ (80017f4 <accel_signals+0x234>)
 8001668:	6013      	str	r3, [r2, #0]
      Az = Accel_Z_RAW / 16384.0;
 800166a:	4b5f      	ldr	r3, [pc, #380]	@ (80017e8 <accel_signals+0x228>)
 800166c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001670:	4618      	mov	r0, r3
 8001672:	f7fe ff1b 	bl	80004ac <__aeabi_i2d>
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	4b5c      	ldr	r3, [pc, #368]	@ (80017ec <accel_signals+0x22c>)
 800167c:	f7ff f8aa 	bl	80007d4 <__aeabi_ddiv>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4610      	mov	r0, r2
 8001686:	4619      	mov	r1, r3
 8001688:	f7ff fa4a 	bl	8000b20 <__aeabi_d2f>
 800168c:	4603      	mov	r3, r0
 800168e:	4a5a      	ldr	r2, [pc, #360]	@ (80017f8 <accel_signals+0x238>)
 8001690:	6013      	str	r3, [r2, #0]

      AngleRoll = atan(Ay/sqrt(Ax*Ax + Az*Az))*1/(3.142/180);
 8001692:	4b58      	ldr	r3, [pc, #352]	@ (80017f4 <accel_signals+0x234>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f7fe ff1a 	bl	80004d0 <__aeabi_f2d>
 800169c:	4604      	mov	r4, r0
 800169e:	460d      	mov	r5, r1
 80016a0:	4b53      	ldr	r3, [pc, #332]	@ (80017f0 <accel_signals+0x230>)
 80016a2:	ed93 7a00 	vldr	s14, [r3]
 80016a6:	4b52      	ldr	r3, [pc, #328]	@ (80017f0 <accel_signals+0x230>)
 80016a8:	edd3 7a00 	vldr	s15, [r3]
 80016ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016b0:	4b51      	ldr	r3, [pc, #324]	@ (80017f8 <accel_signals+0x238>)
 80016b2:	edd3 6a00 	vldr	s13, [r3]
 80016b6:	4b50      	ldr	r3, [pc, #320]	@ (80017f8 <accel_signals+0x238>)
 80016b8:	edd3 7a00 	vldr	s15, [r3]
 80016bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016c4:	ee17 0a90 	vmov	r0, s15
 80016c8:	f7fe ff02 	bl	80004d0 <__aeabi_f2d>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	ec43 2b10 	vmov	d0, r2, r3
 80016d4:	f003 fe0e 	bl	80052f4 <sqrt>
 80016d8:	ec53 2b10 	vmov	r2, r3, d0
 80016dc:	4620      	mov	r0, r4
 80016de:	4629      	mov	r1, r5
 80016e0:	f7ff f878 	bl	80007d4 <__aeabi_ddiv>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	ec43 2b17 	vmov	d7, r2, r3
 80016ec:	eeb0 0a47 	vmov.f32	s0, s14
 80016f0:	eef0 0a67 	vmov.f32	s1, s15
 80016f4:	f003 fe2c 	bl	8005350 <atan>
 80016f8:	ec51 0b10 	vmov	r0, r1, d0
 80016fc:	a334      	add	r3, pc, #208	@ (adr r3, 80017d0 <accel_signals+0x210>)
 80016fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001702:	f7ff f867 	bl	80007d4 <__aeabi_ddiv>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4610      	mov	r0, r2
 800170c:	4619      	mov	r1, r3
 800170e:	f7ff fa07 	bl	8000b20 <__aeabi_d2f>
 8001712:	4603      	mov	r3, r0
 8001714:	4a39      	ldr	r2, [pc, #228]	@ (80017fc <accel_signals+0x23c>)
 8001716:	6013      	str	r3, [r2, #0]
      AnglePitch = atan(Ax/sqrt(Ay*Ay + Az*Az))*1/(3.142/180);
 8001718:	4b35      	ldr	r3, [pc, #212]	@ (80017f0 <accel_signals+0x230>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f7fe fed7 	bl	80004d0 <__aeabi_f2d>
 8001722:	4604      	mov	r4, r0
 8001724:	460d      	mov	r5, r1
 8001726:	4b33      	ldr	r3, [pc, #204]	@ (80017f4 <accel_signals+0x234>)
 8001728:	ed93 7a00 	vldr	s14, [r3]
 800172c:	4b31      	ldr	r3, [pc, #196]	@ (80017f4 <accel_signals+0x234>)
 800172e:	edd3 7a00 	vldr	s15, [r3]
 8001732:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001736:	4b30      	ldr	r3, [pc, #192]	@ (80017f8 <accel_signals+0x238>)
 8001738:	edd3 6a00 	vldr	s13, [r3]
 800173c:	4b2e      	ldr	r3, [pc, #184]	@ (80017f8 <accel_signals+0x238>)
 800173e:	edd3 7a00 	vldr	s15, [r3]
 8001742:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001746:	ee77 7a27 	vadd.f32	s15, s14, s15
 800174a:	ee17 0a90 	vmov	r0, s15
 800174e:	f7fe febf 	bl	80004d0 <__aeabi_f2d>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	ec43 2b10 	vmov	d0, r2, r3
 800175a:	f003 fdcb 	bl	80052f4 <sqrt>
 800175e:	ec53 2b10 	vmov	r2, r3, d0
 8001762:	4620      	mov	r0, r4
 8001764:	4629      	mov	r1, r5
 8001766:	f7ff f835 	bl	80007d4 <__aeabi_ddiv>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	ec43 2b17 	vmov	d7, r2, r3
 8001772:	eeb0 0a47 	vmov.f32	s0, s14
 8001776:	eef0 0a67 	vmov.f32	s1, s15
 800177a:	f003 fde9 	bl	8005350 <atan>
 800177e:	ec51 0b10 	vmov	r0, r1, d0
 8001782:	a313      	add	r3, pc, #76	@ (adr r3, 80017d0 <accel_signals+0x210>)
 8001784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001788:	f7ff f824 	bl	80007d4 <__aeabi_ddiv>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4610      	mov	r0, r2
 8001792:	4619      	mov	r1, r3
 8001794:	f7ff f9c4 	bl	8000b20 <__aeabi_d2f>
 8001798:	4603      	mov	r3, r0
 800179a:	4a19      	ldr	r2, [pc, #100]	@ (8001800 <accel_signals+0x240>)
 800179c:	6013      	str	r3, [r2, #0]

      dt=HAL_GetTickFreq()-time1;
 800179e:	f000 fd59 	bl	8002254 <HAL_GetTickFreq>
 80017a2:	4603      	mov	r3, r0
 80017a4:	461a      	mov	r2, r3
 80017a6:	4b17      	ldr	r3, [pc, #92]	@ (8001804 <accel_signals+0x244>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe fe6d 	bl	800048c <__aeabi_ui2d>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4914      	ldr	r1, [pc, #80]	@ (8001808 <accel_signals+0x248>)
 80017b8:	e9c1 2300 	strd	r2, r3, [r1]

      last_time=dt1;
 80017bc:	4b13      	ldr	r3, [pc, #76]	@ (800180c <accel_signals+0x24c>)
 80017be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c2:	4913      	ldr	r1, [pc, #76]	@ (8001810 <accel_signals+0x250>)
 80017c4:	e9c1 2300 	strd	r2, r3, [r1]

}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bdb0      	pop	{r4, r5, r7, pc}
 80017d0:	80fa7e3f 	.word	0x80fa7e3f
 80017d4:	3f91dfde 	.word	0x3f91dfde
 80017d8:	20000008 	.word	0x20000008
 80017dc:	20000108 	.word	0x20000108
 80017e0:	20000208 	.word	0x20000208
 80017e4:	2000020a 	.word	0x2000020a
 80017e8:	2000020c 	.word	0x2000020c
 80017ec:	40d00000 	.word	0x40d00000
 80017f0:	20000218 	.word	0x20000218
 80017f4:	2000021c 	.word	0x2000021c
 80017f8:	20000220 	.word	0x20000220
 80017fc:	20000240 	.word	0x20000240
 8001800:	20000244 	.word	0x20000244
 8001804:	20000258 	.word	0x20000258
 8001808:	200001f0 	.word	0x200001f0
 800180c:	200001f8 	.word	0x200001f8
 8001810:	20000200 	.word	0x20000200
 8001814:	00000000 	.word	0x00000000

08001818 <kalman_1d>:


}

void kalman_1d(float KalmanState, float KalmanUncertainty, float KalmanInput, float KalmanMeasurement)
{
 8001818:	b5b0      	push	{r4, r5, r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001822:	edc7 0a02 	vstr	s1, [r7, #8]
 8001826:	ed87 1a01 	vstr	s2, [r7, #4]
 800182a:	edc7 1a00 	vstr	s3, [r7]
    KalmanState=KalmanState + (0.004*KalmanInput);
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	f7fe fe4e 	bl	80004d0 <__aeabi_f2d>
 8001834:	4604      	mov	r4, r0
 8001836:	460d      	mov	r5, r1
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7fe fe49 	bl	80004d0 <__aeabi_f2d>
 800183e:	a32b      	add	r3, pc, #172	@ (adr r3, 80018ec <kalman_1d+0xd4>)
 8001840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001844:	f7fe fe9c 	bl	8000580 <__aeabi_dmul>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4620      	mov	r0, r4
 800184e:	4629      	mov	r1, r5
 8001850:	f7fe fce0 	bl	8000214 <__adddf3>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4610      	mov	r0, r2
 800185a:	4619      	mov	r1, r3
 800185c:	f7ff f960 	bl	8000b20 <__aeabi_d2f>
 8001860:	4603      	mov	r3, r0
 8001862:	60fb      	str	r3, [r7, #12]
    KalmanUncertainty = KalmanUncertainty + ( 0.004 * 0.004 * 4 * 4);
 8001864:	68b8      	ldr	r0, [r7, #8]
 8001866:	f7fe fe33 	bl	80004d0 <__aeabi_f2d>
 800186a:	a322      	add	r3, pc, #136	@ (adr r3, 80018f4 <kalman_1d+0xdc>)
 800186c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001870:	f7fe fcd0 	bl	8000214 <__adddf3>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4610      	mov	r0, r2
 800187a:	4619      	mov	r1, r3
 800187c:	f7ff f950 	bl	8000b20 <__aeabi_d2f>
 8001880:	4603      	mov	r3, r0
 8001882:	60bb      	str	r3, [r7, #8]
    float KalmanGain = KalmanUncertainty * 1/((1*KalmanUncertainty) + (3 * 3));
 8001884:	edd7 7a02 	vldr	s15, [r7, #8]
 8001888:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 800188c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001890:	edd7 6a02 	vldr	s13, [r7, #8]
 8001894:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001898:	edc7 7a05 	vstr	s15, [r7, #20]
    KalmanState = KalmanState + KalmanGain * (KalmanMeasurement - KalmanState);
 800189c:	ed97 7a00 	vldr	s14, [r7]
 80018a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80018a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80018ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018b0:	ed97 7a03 	vldr	s14, [r7, #12]
 80018b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b8:	edc7 7a03 	vstr	s15, [r7, #12]
    KalmanUncertainty = (1 - KalmanGain) * KalmanUncertainty;
 80018bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80018c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80018c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018c8:	ed97 7a02 	vldr	s14, [r7, #8]
 80018cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018d0:	edc7 7a02 	vstr	s15, [r7, #8]

    Kalman1DOutput[0] = KalmanState;
 80018d4:	4a04      	ldr	r2, [pc, #16]	@ (80018e8 <kalman_1d+0xd0>)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6013      	str	r3, [r2, #0]
    Kalman1DOutput[1] = KalmanUncertainty;
 80018da:	4a03      	ldr	r2, [pc, #12]	@ (80018e8 <kalman_1d+0xd0>)
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	6053      	str	r3, [r2, #4]

}
 80018e0:	bf00      	nop
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bdb0      	pop	{r4, r5, r7, pc}
 80018e8:	2000022c 	.word	0x2000022c
 80018ec:	d2f1a9fc 	.word	0xd2f1a9fc
 80018f0:	3f70624d 	.word	0x3f70624d
 80018f4:	a0b5ed8d 	.word	0xa0b5ed8d
 80018f8:	3f30c6f7 	.word	0x3f30c6f7

080018fc <Get_Angle>:

void Get_Angle()
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0


    kalman_1d(KalmanAngleRoll, KalmanUncertaintyAngleRoll, RateRoll, AngleRoll);
 8001900:	4b22      	ldr	r3, [pc, #136]	@ (800198c <Get_Angle+0x90>)
 8001902:	edd3 7a00 	vldr	s15, [r3]
 8001906:	4b22      	ldr	r3, [pc, #136]	@ (8001990 <Get_Angle+0x94>)
 8001908:	ed93 7a00 	vldr	s14, [r3]
 800190c:	4b21      	ldr	r3, [pc, #132]	@ (8001994 <Get_Angle+0x98>)
 800190e:	edd3 6a00 	vldr	s13, [r3]
 8001912:	4b21      	ldr	r3, [pc, #132]	@ (8001998 <Get_Angle+0x9c>)
 8001914:	ed93 6a00 	vldr	s12, [r3]
 8001918:	eef0 1a46 	vmov.f32	s3, s12
 800191c:	eeb0 1a66 	vmov.f32	s2, s13
 8001920:	eef0 0a47 	vmov.f32	s1, s14
 8001924:	eeb0 0a67 	vmov.f32	s0, s15
 8001928:	f7ff ff76 	bl	8001818 <kalman_1d>
    KalmanAngleRoll=Kalman1DOutput[0];
 800192c:	4b1b      	ldr	r3, [pc, #108]	@ (800199c <Get_Angle+0xa0>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a16      	ldr	r2, [pc, #88]	@ (800198c <Get_Angle+0x90>)
 8001932:	6013      	str	r3, [r2, #0]
    kalman_1d(KalmanAnglePitch, KalmanUncertaintyAnglePitch, RatePitch, AnglePitch);
 8001934:	4b1a      	ldr	r3, [pc, #104]	@ (80019a0 <Get_Angle+0xa4>)
 8001936:	edd3 7a00 	vldr	s15, [r3]
 800193a:	4b1a      	ldr	r3, [pc, #104]	@ (80019a4 <Get_Angle+0xa8>)
 800193c:	ed93 7a00 	vldr	s14, [r3]
 8001940:	4b19      	ldr	r3, [pc, #100]	@ (80019a8 <Get_Angle+0xac>)
 8001942:	edd3 6a00 	vldr	s13, [r3]
 8001946:	4b19      	ldr	r3, [pc, #100]	@ (80019ac <Get_Angle+0xb0>)
 8001948:	ed93 6a00 	vldr	s12, [r3]
 800194c:	eef0 1a46 	vmov.f32	s3, s12
 8001950:	eeb0 1a66 	vmov.f32	s2, s13
 8001954:	eef0 0a47 	vmov.f32	s1, s14
 8001958:	eeb0 0a67 	vmov.f32	s0, s15
 800195c:	f7ff ff5c 	bl	8001818 <kalman_1d>
    KalmanAnglePitch=Kalman1DOutput[0]; //2 derece sapma var
 8001960:	4b0e      	ldr	r3, [pc, #56]	@ (800199c <Get_Angle+0xa0>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a0e      	ldr	r2, [pc, #56]	@ (80019a0 <Get_Angle+0xa4>)
 8001966:	6013      	str	r3, [r2, #0]

    dt=HAL_GetTick()-last_time;
 8001968:	f000 fc68 	bl	800223c <HAL_GetTick>
 800196c:	4603      	mov	r3, r0
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fd8c 	bl	800048c <__aeabi_ui2d>
 8001974:	4b0e      	ldr	r3, [pc, #56]	@ (80019b0 <Get_Angle+0xb4>)
 8001976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197a:	f7fe fc49 	bl	8000210 <__aeabi_dsub>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	490c      	ldr	r1, [pc, #48]	@ (80019b4 <Get_Angle+0xb8>)
 8001984:	e9c1 2300 	strd	r2, r3, [r1]

}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000224 	.word	0x20000224
 8001990:	20000000 	.word	0x20000000
 8001994:	20000234 	.word	0x20000234
 8001998:	20000240 	.word	0x20000240
 800199c:	2000022c 	.word	0x2000022c
 80019a0:	20000228 	.word	0x20000228
 80019a4:	20000004 	.word	0x20000004
 80019a8:	20000238 	.word	0x20000238
 80019ac:	20000244 	.word	0x20000244
 80019b0:	20000200 	.word	0x20000200
 80019b4:	200001f0 	.word	0x200001f0

080019b8 <get_control_signal>:
double D_ALPHA = 0.2;
double filtered_d = 0;
double MAX_I = 200;

double get_control_signal(float angle_roll)
{
 80019b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	ed87 0a01 	vstr	s0, [r7, #4]


  if(angle_roll <=7){
 80019c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80019c8:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 80019cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d4:	f200 80cd 	bhi.w	8001b72 <get_control_signal+0x1ba>

     error = (setpoint-angle_roll);
 80019d8:	4bb9      	ldr	r3, [pc, #740]	@ (8001cc0 <get_control_signal+0x308>)
 80019da:	ed93 7a00 	vldr	s14, [r3]
 80019de:	edd7 7a01 	vldr	s15, [r7, #4]
 80019e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019e6:	4bb7      	ldr	r3, [pc, #732]	@ (8001cc4 <get_control_signal+0x30c>)
 80019e8:	edc3 7a00 	vstr	s15, [r3]

     pid_i+=error*dt;
 80019ec:	4bb5      	ldr	r3, [pc, #724]	@ (8001cc4 <get_control_signal+0x30c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7fe fd6d 	bl	80004d0 <__aeabi_f2d>
 80019f6:	4bb4      	ldr	r3, [pc, #720]	@ (8001cc8 <get_control_signal+0x310>)
 80019f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fc:	f7fe fdc0 	bl	8000580 <__aeabi_dmul>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4610      	mov	r0, r2
 8001a06:	4619      	mov	r1, r3
 8001a08:	4bb0      	ldr	r3, [pc, #704]	@ (8001ccc <get_control_signal+0x314>)
 8001a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0e:	f7fe fc01 	bl	8000214 <__adddf3>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	49ad      	ldr	r1, [pc, #692]	@ (8001ccc <get_control_signal+0x314>)
 8001a18:	e9c1 2300 	strd	r2, r3, [r1]

     if (pid_i > MAX_I)
 8001a1c:	4bab      	ldr	r3, [pc, #684]	@ (8001ccc <get_control_signal+0x314>)
 8001a1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a22:	4bab      	ldr	r3, [pc, #684]	@ (8001cd0 <get_control_signal+0x318>)
 8001a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a28:	f7ff f83a 	bl	8000aa0 <__aeabi_dcmpgt>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d005      	beq.n	8001a3e <get_control_signal+0x86>
     {
       pid_i = MAX_I;
 8001a32:	4ba7      	ldr	r3, [pc, #668]	@ (8001cd0 <get_control_signal+0x318>)
 8001a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a38:	49a4      	ldr	r1, [pc, #656]	@ (8001ccc <get_control_signal+0x314>)
 8001a3a:	e9c1 2300 	strd	r2, r3, [r1]
     };
     if (pid_i < -MAX_I){
 8001a3e:	4ba4      	ldr	r3, [pc, #656]	@ (8001cd0 <get_control_signal+0x318>)
 8001a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a44:	4690      	mov	r8, r2
 8001a46:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8001a4a:	4ba0      	ldr	r3, [pc, #640]	@ (8001ccc <get_control_signal+0x314>)
 8001a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a50:	4640      	mov	r0, r8
 8001a52:	4649      	mov	r1, r9
 8001a54:	f7ff f824 	bl	8000aa0 <__aeabi_dcmpgt>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d008      	beq.n	8001a70 <get_control_signal+0xb8>
       pid_i = -MAX_I;
 8001a5e:	4b9c      	ldr	r3, [pc, #624]	@ (8001cd0 <get_control_signal+0x318>)
 8001a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a64:	4614      	mov	r4, r2
 8001a66:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001a6a:	4b98      	ldr	r3, [pc, #608]	@ (8001ccc <get_control_signal+0x314>)
 8001a6c:	e9c3 4500 	strd	r4, r5, [r3]
     }

     pid_d = (error - prev_error) / dt;
 8001a70:	4b94      	ldr	r3, [pc, #592]	@ (8001cc4 <get_control_signal+0x30c>)
 8001a72:	ed93 7a00 	vldr	s14, [r3]
 8001a76:	4b97      	ldr	r3, [pc, #604]	@ (8001cd4 <get_control_signal+0x31c>)
 8001a78:	edd3 7a00 	vldr	s15, [r3]
 8001a7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a80:	ee17 0a90 	vmov	r0, s15
 8001a84:	f7fe fd24 	bl	80004d0 <__aeabi_f2d>
 8001a88:	4b8f      	ldr	r3, [pc, #572]	@ (8001cc8 <get_control_signal+0x310>)
 8001a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8e:	f7fe fea1 	bl	80007d4 <__aeabi_ddiv>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4990      	ldr	r1, [pc, #576]	@ (8001cd8 <get_control_signal+0x320>)
 8001a98:	e9c1 2300 	strd	r2, r3, [r1]
     filtered_d = (1.0 - D_ALPHA) * filtered_d + D_ALPHA * pid_d;
 8001a9c:	4b8f      	ldr	r3, [pc, #572]	@ (8001cdc <get_control_signal+0x324>)
 8001a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa2:	f04f 0000 	mov.w	r0, #0
 8001aa6:	498e      	ldr	r1, [pc, #568]	@ (8001ce0 <get_control_signal+0x328>)
 8001aa8:	f7fe fbb2 	bl	8000210 <__aeabi_dsub>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4b8b      	ldr	r3, [pc, #556]	@ (8001ce4 <get_control_signal+0x32c>)
 8001ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aba:	f7fe fd61 	bl	8000580 <__aeabi_dmul>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4614      	mov	r4, r2
 8001ac4:	461d      	mov	r5, r3
 8001ac6:	4b85      	ldr	r3, [pc, #532]	@ (8001cdc <get_control_signal+0x324>)
 8001ac8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001acc:	4b82      	ldr	r3, [pc, #520]	@ (8001cd8 <get_control_signal+0x320>)
 8001ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad2:	f7fe fd55 	bl	8000580 <__aeabi_dmul>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4620      	mov	r0, r4
 8001adc:	4629      	mov	r1, r5
 8001ade:	f7fe fb99 	bl	8000214 <__adddf3>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	497f      	ldr	r1, [pc, #508]	@ (8001ce4 <get_control_signal+0x32c>)
 8001ae8:	e9c1 2300 	strd	r2, r3, [r1]
     control_sig= (kp*error) + (ki*pid_i) + (kd*filtered_d) + 91;
 8001aec:	4b7e      	ldr	r3, [pc, #504]	@ (8001ce8 <get_control_signal+0x330>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	ee07 3a90 	vmov	s15, r3
 8001af4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001af8:	4b72      	ldr	r3, [pc, #456]	@ (8001cc4 <get_control_signal+0x30c>)
 8001afa:	edd3 7a00 	vldr	s15, [r3]
 8001afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b02:	ee17 0a90 	vmov	r0, s15
 8001b06:	f7fe fce3 	bl	80004d0 <__aeabi_f2d>
 8001b0a:	4604      	mov	r4, r0
 8001b0c:	460d      	mov	r5, r1
 8001b0e:	4b77      	ldr	r3, [pc, #476]	@ (8001cec <get_control_signal+0x334>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7fe fcca 	bl	80004ac <__aeabi_i2d>
 8001b18:	4b6c      	ldr	r3, [pc, #432]	@ (8001ccc <get_control_signal+0x314>)
 8001b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1e:	f7fe fd2f 	bl	8000580 <__aeabi_dmul>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4620      	mov	r0, r4
 8001b28:	4629      	mov	r1, r5
 8001b2a:	f7fe fb73 	bl	8000214 <__adddf3>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	4614      	mov	r4, r2
 8001b34:	461d      	mov	r5, r3
 8001b36:	4b6e      	ldr	r3, [pc, #440]	@ (8001cf0 <get_control_signal+0x338>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fcb6 	bl	80004ac <__aeabi_i2d>
 8001b40:	4b68      	ldr	r3, [pc, #416]	@ (8001ce4 <get_control_signal+0x32c>)
 8001b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b46:	f7fe fd1b 	bl	8000580 <__aeabi_dmul>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	4620      	mov	r0, r4
 8001b50:	4629      	mov	r1, r5
 8001b52:	f7fe fb5f 	bl	8000214 <__adddf3>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	4610      	mov	r0, r2
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	a356      	add	r3, pc, #344	@ (adr r3, 8001cb8 <get_control_signal+0x300>)
 8001b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b64:	f7fe fb56 	bl	8000214 <__adddf3>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4961      	ldr	r1, [pc, #388]	@ (8001cf4 <get_control_signal+0x33c>)
 8001b6e:	e9c1 2300 	strd	r2, r3, [r1]
  }



  if(angle_roll > 7){
 8001b72:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b76:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 8001b7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b82:	f340 80d5 	ble.w	8001d30 <get_control_signal+0x378>

       error = (setpoint-angle_roll);
 8001b86:	4b4e      	ldr	r3, [pc, #312]	@ (8001cc0 <get_control_signal+0x308>)
 8001b88:	ed93 7a00 	vldr	s14, [r3]
 8001b8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b94:	4b4b      	ldr	r3, [pc, #300]	@ (8001cc4 <get_control_signal+0x30c>)
 8001b96:	edc3 7a00 	vstr	s15, [r3]

       pid_i+=error*dt;
 8001b9a:	4b4a      	ldr	r3, [pc, #296]	@ (8001cc4 <get_control_signal+0x30c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fc96 	bl	80004d0 <__aeabi_f2d>
 8001ba4:	4b48      	ldr	r3, [pc, #288]	@ (8001cc8 <get_control_signal+0x310>)
 8001ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001baa:	f7fe fce9 	bl	8000580 <__aeabi_dmul>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4b45      	ldr	r3, [pc, #276]	@ (8001ccc <get_control_signal+0x314>)
 8001bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbc:	f7fe fb2a 	bl	8000214 <__adddf3>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4941      	ldr	r1, [pc, #260]	@ (8001ccc <get_control_signal+0x314>)
 8001bc6:	e9c1 2300 	strd	r2, r3, [r1]
       pid_d=(error-prev_error)/dt;
 8001bca:	4b3e      	ldr	r3, [pc, #248]	@ (8001cc4 <get_control_signal+0x30c>)
 8001bcc:	ed93 7a00 	vldr	s14, [r3]
 8001bd0:	4b40      	ldr	r3, [pc, #256]	@ (8001cd4 <get_control_signal+0x31c>)
 8001bd2:	edd3 7a00 	vldr	s15, [r3]
 8001bd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bda:	ee17 0a90 	vmov	r0, s15
 8001bde:	f7fe fc77 	bl	80004d0 <__aeabi_f2d>
 8001be2:	4b39      	ldr	r3, [pc, #228]	@ (8001cc8 <get_control_signal+0x310>)
 8001be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be8:	f7fe fdf4 	bl	80007d4 <__aeabi_ddiv>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4939      	ldr	r1, [pc, #228]	@ (8001cd8 <get_control_signal+0x320>)
 8001bf2:	e9c1 2300 	strd	r2, r3, [r1]
       filtered_d = (1.0 - D_ALPHA) * filtered_d + D_ALPHA * pid_d;
 8001bf6:	4b39      	ldr	r3, [pc, #228]	@ (8001cdc <get_control_signal+0x324>)
 8001bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfc:	f04f 0000 	mov.w	r0, #0
 8001c00:	4937      	ldr	r1, [pc, #220]	@ (8001ce0 <get_control_signal+0x328>)
 8001c02:	f7fe fb05 	bl	8000210 <__aeabi_dsub>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4b35      	ldr	r3, [pc, #212]	@ (8001ce4 <get_control_signal+0x32c>)
 8001c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c14:	f7fe fcb4 	bl	8000580 <__aeabi_dmul>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4614      	mov	r4, r2
 8001c1e:	461d      	mov	r5, r3
 8001c20:	4b2e      	ldr	r3, [pc, #184]	@ (8001cdc <get_control_signal+0x324>)
 8001c22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c26:	4b2c      	ldr	r3, [pc, #176]	@ (8001cd8 <get_control_signal+0x320>)
 8001c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2c:	f7fe fca8 	bl	8000580 <__aeabi_dmul>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	4620      	mov	r0, r4
 8001c36:	4629      	mov	r1, r5
 8001c38:	f7fe faec 	bl	8000214 <__adddf3>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4928      	ldr	r1, [pc, #160]	@ (8001ce4 <get_control_signal+0x32c>)
 8001c42:	e9c1 2300 	strd	r2, r3, [r1]
       control_sig= (kp*error) + (ki*pid_i) + (kd*pid_d) + (91.0-(angle_roll*(5.0/40.0)));
 8001c46:	4b28      	ldr	r3, [pc, #160]	@ (8001ce8 <get_control_signal+0x330>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	ee07 3a90 	vmov	s15, r3
 8001c4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c52:	4b1c      	ldr	r3, [pc, #112]	@ (8001cc4 <get_control_signal+0x30c>)
 8001c54:	edd3 7a00 	vldr	s15, [r3]
 8001c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c5c:	ee17 0a90 	vmov	r0, s15
 8001c60:	f7fe fc36 	bl	80004d0 <__aeabi_f2d>
 8001c64:	4604      	mov	r4, r0
 8001c66:	460d      	mov	r5, r1
 8001c68:	4b20      	ldr	r3, [pc, #128]	@ (8001cec <get_control_signal+0x334>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7fe fc1d 	bl	80004ac <__aeabi_i2d>
 8001c72:	4b16      	ldr	r3, [pc, #88]	@ (8001ccc <get_control_signal+0x314>)
 8001c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c78:	f7fe fc82 	bl	8000580 <__aeabi_dmul>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4620      	mov	r0, r4
 8001c82:	4629      	mov	r1, r5
 8001c84:	f7fe fac6 	bl	8000214 <__adddf3>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4614      	mov	r4, r2
 8001c8e:	461d      	mov	r5, r3
 8001c90:	4b17      	ldr	r3, [pc, #92]	@ (8001cf0 <get_control_signal+0x338>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7fe fc09 	bl	80004ac <__aeabi_i2d>
 8001c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd8 <get_control_signal+0x320>)
 8001c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca0:	f7fe fc6e 	bl	8000580 <__aeabi_dmul>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4620      	mov	r0, r4
 8001caa:	4629      	mov	r1, r5
 8001cac:	f7fe fab2 	bl	8000214 <__adddf3>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4614      	mov	r4, r2
 8001cb6:	e01f      	b.n	8001cf8 <get_control_signal+0x340>
 8001cb8:	00000000 	.word	0x00000000
 8001cbc:	4056c000 	.word	0x4056c000
 8001cc0:	20000278 	.word	0x20000278
 8001cc4:	2000027c 	.word	0x2000027c
 8001cc8:	200001f0 	.word	0x200001f0
 8001ccc:	20000260 	.word	0x20000260
 8001cd0:	20000020 	.word	0x20000020
 8001cd4:	20000280 	.word	0x20000280
 8001cd8:	20000268 	.word	0x20000268
 8001cdc:	20000018 	.word	0x20000018
 8001ce0:	3ff00000 	.word	0x3ff00000
 8001ce4:	20000288 	.word	0x20000288
 8001ce8:	2000000c 	.word	0x2000000c
 8001cec:	2000025c 	.word	0x2000025c
 8001cf0:	20000010 	.word	0x20000010
 8001cf4:	20000270 	.word	0x20000270
 8001cf8:	461d      	mov	r5, r3
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7fe fbe8 	bl	80004d0 <__aeabi_f2d>
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8001d08:	f7fe fc3a 	bl	8000580 <__aeabi_dmul>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	a114      	add	r1, pc, #80	@ (adr r1, 8001d64 <get_control_signal+0x3ac>)
 8001d12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d16:	f7fe fa7b 	bl	8000210 <__aeabi_dsub>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4620      	mov	r0, r4
 8001d20:	4629      	mov	r1, r5
 8001d22:	f7fe fa77 	bl	8000214 <__adddf3>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	490b      	ldr	r1, [pc, #44]	@ (8001d58 <get_control_signal+0x3a0>)
 8001d2c:	e9c1 2300 	strd	r2, r3, [r1]





   prev_error=error;
 8001d30:	4b0a      	ldr	r3, [pc, #40]	@ (8001d5c <get_control_signal+0x3a4>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a0a      	ldr	r2, [pc, #40]	@ (8001d60 <get_control_signal+0x3a8>)
 8001d36:	6013      	str	r3, [r2, #0]

   return control_sig;
 8001d38:	4b07      	ldr	r3, [pc, #28]	@ (8001d58 <get_control_signal+0x3a0>)
 8001d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001d42:	eeb0 0a47 	vmov.f32	s0, s14
 8001d46:	eef0 0a67 	vmov.f32	s1, s15
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d52:	bf00      	nop
 8001d54:	f3af 8000 	nop.w
 8001d58:	20000270 	.word	0x20000270
 8001d5c:	2000027c 	.word	0x2000027c
 8001d60:	20000280 	.word	0x20000280
 8001d64:	00000000 	.word	0x00000000
 8001d68:	4056c000 	.word	0x4056c000

08001d6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	607b      	str	r3, [r7, #4]
 8001d76:	4b10      	ldr	r3, [pc, #64]	@ (8001db8 <HAL_MspInit+0x4c>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7a:	4a0f      	ldr	r2, [pc, #60]	@ (8001db8 <HAL_MspInit+0x4c>)
 8001d7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d82:	4b0d      	ldr	r3, [pc, #52]	@ (8001db8 <HAL_MspInit+0x4c>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	603b      	str	r3, [r7, #0]
 8001d92:	4b09      	ldr	r3, [pc, #36]	@ (8001db8 <HAL_MspInit+0x4c>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d96:	4a08      	ldr	r2, [pc, #32]	@ (8001db8 <HAL_MspInit+0x4c>)
 8001d98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d9e:	4b06      	ldr	r3, [pc, #24]	@ (8001db8 <HAL_MspInit+0x4c>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001da6:	603b      	str	r3, [r7, #0]
 8001da8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001daa:	2007      	movs	r0, #7
 8001dac:	f000 fb34 	bl	8002418 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001db0:	bf00      	nop
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40023800 	.word	0x40023800

08001dbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08c      	sub	sp, #48	@ 0x30
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc4:	f107 031c 	add.w	r3, r7, #28
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a42      	ldr	r2, [pc, #264]	@ (8001ee4 <HAL_I2C_MspInit+0x128>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d12c      	bne.n	8001e38 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	61bb      	str	r3, [r7, #24]
 8001de2:	4b41      	ldr	r3, [pc, #260]	@ (8001ee8 <HAL_I2C_MspInit+0x12c>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de6:	4a40      	ldr	r2, [pc, #256]	@ (8001ee8 <HAL_I2C_MspInit+0x12c>)
 8001de8:	f043 0302 	orr.w	r3, r3, #2
 8001dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dee:	4b3e      	ldr	r3, [pc, #248]	@ (8001ee8 <HAL_I2C_MspInit+0x12c>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	61bb      	str	r3, [r7, #24]
 8001df8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dfa:	23c0      	movs	r3, #192	@ 0xc0
 8001dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dfe:	2312      	movs	r3, #18
 8001e00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e02:	2301      	movs	r3, #1
 8001e04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e06:	2303      	movs	r3, #3
 8001e08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e0a:	2304      	movs	r3, #4
 8001e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0e:	f107 031c 	add.w	r3, r7, #28
 8001e12:	4619      	mov	r1, r3
 8001e14:	4835      	ldr	r0, [pc, #212]	@ (8001eec <HAL_I2C_MspInit+0x130>)
 8001e16:	f000 fb33 	bl	8002480 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	4b32      	ldr	r3, [pc, #200]	@ (8001ee8 <HAL_I2C_MspInit+0x12c>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e22:	4a31      	ldr	r2, [pc, #196]	@ (8001ee8 <HAL_I2C_MspInit+0x12c>)
 8001e24:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e2a:	4b2f      	ldr	r3, [pc, #188]	@ (8001ee8 <HAL_I2C_MspInit+0x12c>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e32:	617b      	str	r3, [r7, #20]
 8001e34:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001e36:	e050      	b.n	8001eda <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a2c      	ldr	r2, [pc, #176]	@ (8001ef0 <HAL_I2C_MspInit+0x134>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d14b      	bne.n	8001eda <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	4b28      	ldr	r3, [pc, #160]	@ (8001ee8 <HAL_I2C_MspInit+0x12c>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4a:	4a27      	ldr	r2, [pc, #156]	@ (8001ee8 <HAL_I2C_MspInit+0x12c>)
 8001e4c:	f043 0302 	orr.w	r3, r3, #2
 8001e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e52:	4b25      	ldr	r3, [pc, #148]	@ (8001ee8 <HAL_I2C_MspInit+0x12c>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	4b21      	ldr	r3, [pc, #132]	@ (8001ee8 <HAL_I2C_MspInit+0x12c>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e66:	4a20      	ldr	r2, [pc, #128]	@ (8001ee8 <HAL_I2C_MspInit+0x12c>)
 8001e68:	f043 0304 	orr.w	r3, r3, #4
 8001e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee8 <HAL_I2C_MspInit+0x12c>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e72:	f003 0304 	and.w	r3, r3, #4
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e80:	2312      	movs	r3, #18
 8001e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e84:	2301      	movs	r3, #1
 8001e86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e8c:	2304      	movs	r3, #4
 8001e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e90:	f107 031c 	add.w	r3, r7, #28
 8001e94:	4619      	mov	r1, r3
 8001e96:	4815      	ldr	r0, [pc, #84]	@ (8001eec <HAL_I2C_MspInit+0x130>)
 8001e98:	f000 faf2 	bl	8002480 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001e9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ea2:	2312      	movs	r3, #18
 8001ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001eae:	2304      	movs	r3, #4
 8001eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eb2:	f107 031c 	add.w	r3, r7, #28
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	480e      	ldr	r0, [pc, #56]	@ (8001ef4 <HAL_I2C_MspInit+0x138>)
 8001eba:	f000 fae1 	bl	8002480 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	4b09      	ldr	r3, [pc, #36]	@ (8001ee8 <HAL_I2C_MspInit+0x12c>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec6:	4a08      	ldr	r2, [pc, #32]	@ (8001ee8 <HAL_I2C_MspInit+0x12c>)
 8001ec8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ecc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ece:	4b06      	ldr	r3, [pc, #24]	@ (8001ee8 <HAL_I2C_MspInit+0x12c>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ed6:	60bb      	str	r3, [r7, #8]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
}
 8001eda:	bf00      	nop
 8001edc:	3730      	adds	r7, #48	@ 0x30
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40005400 	.word	0x40005400
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40020400 	.word	0x40020400
 8001ef0:	40005800 	.word	0x40005800
 8001ef4:	40020800 	.word	0x40020800

08001ef8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a15      	ldr	r2, [pc, #84]	@ (8001f5c <HAL_I2C_MspDeInit+0x64>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d10e      	bne.n	8001f28 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001f0a:	4b15      	ldr	r3, [pc, #84]	@ (8001f60 <HAL_I2C_MspDeInit+0x68>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0e:	4a14      	ldr	r2, [pc, #80]	@ (8001f60 <HAL_I2C_MspDeInit+0x68>)
 8001f10:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001f14:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8001f16:	2140      	movs	r1, #64	@ 0x40
 8001f18:	4812      	ldr	r0, [pc, #72]	@ (8001f64 <HAL_I2C_MspDeInit+0x6c>)
 8001f1a:	f000 fc45 	bl	80027a8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8001f1e:	2180      	movs	r1, #128	@ 0x80
 8001f20:	4810      	ldr	r0, [pc, #64]	@ (8001f64 <HAL_I2C_MspDeInit+0x6c>)
 8001f22:	f000 fc41 	bl	80027a8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001f26:	e014      	b.n	8001f52 <HAL_I2C_MspDeInit+0x5a>
  else if(hi2c->Instance==I2C2)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a0e      	ldr	r2, [pc, #56]	@ (8001f68 <HAL_I2C_MspDeInit+0x70>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d10f      	bne.n	8001f52 <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001f32:	4b0b      	ldr	r3, [pc, #44]	@ (8001f60 <HAL_I2C_MspDeInit+0x68>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f36:	4a0a      	ldr	r2, [pc, #40]	@ (8001f60 <HAL_I2C_MspDeInit+0x68>)
 8001f38:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001f3c:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8001f3e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f42:	4808      	ldr	r0, [pc, #32]	@ (8001f64 <HAL_I2C_MspDeInit+0x6c>)
 8001f44:	f000 fc30 	bl	80027a8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 8001f48:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f4c:	4807      	ldr	r0, [pc, #28]	@ (8001f6c <HAL_I2C_MspDeInit+0x74>)
 8001f4e:	f000 fc2b 	bl	80027a8 <HAL_GPIO_DeInit>
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40005400 	.word	0x40005400
 8001f60:	40023800 	.word	0x40023800
 8001f64:	40020400 	.word	0x40020400
 8001f68:	40005800 	.word	0x40005800
 8001f6c:	40020800 	.word	0x40020800

08001f70 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a15      	ldr	r2, [pc, #84]	@ (8001fd4 <HAL_TIM_PWM_MspInit+0x64>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d10e      	bne.n	8001fa0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	4b14      	ldr	r3, [pc, #80]	@ (8001fd8 <HAL_TIM_PWM_MspInit+0x68>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8a:	4a13      	ldr	r2, [pc, #76]	@ (8001fd8 <HAL_TIM_PWM_MspInit+0x68>)
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f92:	4b11      	ldr	r3, [pc, #68]	@ (8001fd8 <HAL_TIM_PWM_MspInit+0x68>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f9e:	e012      	b.n	8001fc6 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM2)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fa8:	d10d      	bne.n	8001fc6 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd8 <HAL_TIM_PWM_MspInit+0x68>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb2:	4a09      	ldr	r2, [pc, #36]	@ (8001fd8 <HAL_TIM_PWM_MspInit+0x68>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fba:	4b07      	ldr	r3, [pc, #28]	@ (8001fd8 <HAL_TIM_PWM_MspInit+0x68>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	60bb      	str	r3, [r7, #8]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
}
 8001fc6:	bf00      	nop
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	40010000 	.word	0x40010000
 8001fd8:	40023800 	.word	0x40023800

08001fdc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08a      	sub	sp, #40	@ 0x28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe4:	f107 0314 	add.w	r3, r7, #20
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a24      	ldr	r2, [pc, #144]	@ (800208c <HAL_TIM_MspPostInit+0xb0>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d11f      	bne.n	800203e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	4b23      	ldr	r3, [pc, #140]	@ (8002090 <HAL_TIM_MspPostInit+0xb4>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002006:	4a22      	ldr	r2, [pc, #136]	@ (8002090 <HAL_TIM_MspPostInit+0xb4>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	6313      	str	r3, [r2, #48]	@ 0x30
 800200e:	4b20      	ldr	r3, [pc, #128]	@ (8002090 <HAL_TIM_MspPostInit+0xb4>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	613b      	str	r3, [r7, #16]
 8002018:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800201a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800201e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002020:	2302      	movs	r3, #2
 8002022:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002028:	2303      	movs	r3, #3
 800202a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800202c:	2301      	movs	r3, #1
 800202e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002030:	f107 0314 	add.w	r3, r7, #20
 8002034:	4619      	mov	r1, r3
 8002036:	4817      	ldr	r0, [pc, #92]	@ (8002094 <HAL_TIM_MspPostInit+0xb8>)
 8002038:	f000 fa22 	bl	8002480 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800203c:	e022      	b.n	8002084 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002046:	d11d      	bne.n	8002084 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002048:	2300      	movs	r3, #0
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	4b10      	ldr	r3, [pc, #64]	@ (8002090 <HAL_TIM_MspPostInit+0xb4>)
 800204e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002050:	4a0f      	ldr	r2, [pc, #60]	@ (8002090 <HAL_TIM_MspPostInit+0xb4>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	6313      	str	r3, [r2, #48]	@ 0x30
 8002058:	4b0d      	ldr	r3, [pc, #52]	@ (8002090 <HAL_TIM_MspPostInit+0xb4>)
 800205a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002064:	2301      	movs	r3, #1
 8002066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002068:	2302      	movs	r3, #2
 800206a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002070:	2300      	movs	r3, #0
 8002072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002074:	2301      	movs	r3, #1
 8002076:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002078:	f107 0314 	add.w	r3, r7, #20
 800207c:	4619      	mov	r1, r3
 800207e:	4805      	ldr	r0, [pc, #20]	@ (8002094 <HAL_TIM_MspPostInit+0xb8>)
 8002080:	f000 f9fe 	bl	8002480 <HAL_GPIO_Init>
}
 8002084:	bf00      	nop
 8002086:	3728      	adds	r7, #40	@ 0x28
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40010000 	.word	0x40010000
 8002090:	40023800 	.word	0x40023800
 8002094:	40020000 	.word	0x40020000

08002098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800209c:	bf00      	nop
 800209e:	e7fd      	b.n	800209c <NMI_Handler+0x4>

080020a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020a4:	bf00      	nop
 80020a6:	e7fd      	b.n	80020a4 <HardFault_Handler+0x4>

080020a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020ac:	bf00      	nop
 80020ae:	e7fd      	b.n	80020ac <MemManage_Handler+0x4>

080020b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020b4:	bf00      	nop
 80020b6:	e7fd      	b.n	80020b4 <BusFault_Handler+0x4>

080020b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020bc:	bf00      	nop
 80020be:	e7fd      	b.n	80020bc <UsageFault_Handler+0x4>

080020c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020ce:	b480      	push	{r7}
 80020d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020ee:	f000 f891 	bl	8002214 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
	...

080020f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020fc:	4b06      	ldr	r3, [pc, #24]	@ (8002118 <SystemInit+0x20>)
 80020fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002102:	4a05      	ldr	r2, [pc, #20]	@ (8002118 <SystemInit+0x20>)
 8002104:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002108:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800211c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002154 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002120:	f7ff ffea 	bl	80020f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002124:	480c      	ldr	r0, [pc, #48]	@ (8002158 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002126:	490d      	ldr	r1, [pc, #52]	@ (800215c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002128:	4a0d      	ldr	r2, [pc, #52]	@ (8002160 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800212a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800212c:	e002      	b.n	8002134 <LoopCopyDataInit>

0800212e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800212e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002132:	3304      	adds	r3, #4

08002134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002138:	d3f9      	bcc.n	800212e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800213a:	4a0a      	ldr	r2, [pc, #40]	@ (8002164 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800213c:	4c0a      	ldr	r4, [pc, #40]	@ (8002168 <LoopFillZerobss+0x22>)
  movs r3, #0
 800213e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002140:	e001      	b.n	8002146 <LoopFillZerobss>

08002142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002144:	3204      	adds	r2, #4

08002146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002148:	d3fb      	bcc.n	8002142 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800214a:	f003 f8af 	bl	80052ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800214e:	f7fe feaf 	bl	8000eb0 <main>
  bx  lr    
 8002152:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002154:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002158:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800215c:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8002160:	080058c8 	.word	0x080058c8
  ldr r2, =_sbss
 8002164:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8002168:	200003cc 	.word	0x200003cc

0800216c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800216c:	e7fe      	b.n	800216c <ADC_IRQHandler>
	...

08002170 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002174:	4b0e      	ldr	r3, [pc, #56]	@ (80021b0 <HAL_Init+0x40>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a0d      	ldr	r2, [pc, #52]	@ (80021b0 <HAL_Init+0x40>)
 800217a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800217e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002180:	4b0b      	ldr	r3, [pc, #44]	@ (80021b0 <HAL_Init+0x40>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a0a      	ldr	r2, [pc, #40]	@ (80021b0 <HAL_Init+0x40>)
 8002186:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800218a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800218c:	4b08      	ldr	r3, [pc, #32]	@ (80021b0 <HAL_Init+0x40>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a07      	ldr	r2, [pc, #28]	@ (80021b0 <HAL_Init+0x40>)
 8002192:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002196:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002198:	2003      	movs	r0, #3
 800219a:	f000 f93d 	bl	8002418 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800219e:	2000      	movs	r0, #0
 80021a0:	f000 f808 	bl	80021b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021a4:	f7ff fde2 	bl	8001d6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40023c00 	.word	0x40023c00

080021b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021bc:	4b12      	ldr	r3, [pc, #72]	@ (8002208 <HAL_InitTick+0x54>)
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	4b12      	ldr	r3, [pc, #72]	@ (800220c <HAL_InitTick+0x58>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	4619      	mov	r1, r3
 80021c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 f947 	bl	8002466 <HAL_SYSTICK_Config>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e00e      	b.n	8002200 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b0f      	cmp	r3, #15
 80021e6:	d80a      	bhi.n	80021fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021e8:	2200      	movs	r2, #0
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	f04f 30ff 	mov.w	r0, #4294967295
 80021f0:	f000 f91d 	bl	800242e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021f4:	4a06      	ldr	r2, [pc, #24]	@ (8002210 <HAL_InitTick+0x5c>)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
 80021fc:	e000      	b.n	8002200 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
}
 8002200:	4618      	mov	r0, r3
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20000028 	.word	0x20000028
 800220c:	20000030 	.word	0x20000030
 8002210:	2000002c 	.word	0x2000002c

08002214 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002218:	4b06      	ldr	r3, [pc, #24]	@ (8002234 <HAL_IncTick+0x20>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	461a      	mov	r2, r3
 800221e:	4b06      	ldr	r3, [pc, #24]	@ (8002238 <HAL_IncTick+0x24>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4413      	add	r3, r2
 8002224:	4a04      	ldr	r2, [pc, #16]	@ (8002238 <HAL_IncTick+0x24>)
 8002226:	6013      	str	r3, [r2, #0]
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	20000030 	.word	0x20000030
 8002238:	20000290 	.word	0x20000290

0800223c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  return uwTick;
 8002240:	4b03      	ldr	r3, [pc, #12]	@ (8002250 <HAL_GetTick+0x14>)
 8002242:	681b      	ldr	r3, [r3, #0]
}
 8002244:	4618      	mov	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	20000290 	.word	0x20000290

08002254 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8002258:	4b03      	ldr	r3, [pc, #12]	@ (8002268 <HAL_GetTickFreq+0x14>)
 800225a:	781b      	ldrb	r3, [r3, #0]
}
 800225c:	4618      	mov	r0, r3
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	20000030 	.word	0x20000030

0800226c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002274:	f7ff ffe2 	bl	800223c <HAL_GetTick>
 8002278:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002284:	d005      	beq.n	8002292 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002286:	4b0a      	ldr	r3, [pc, #40]	@ (80022b0 <HAL_Delay+0x44>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4413      	add	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002292:	bf00      	nop
 8002294:	f7ff ffd2 	bl	800223c <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d8f7      	bhi.n	8002294 <HAL_Delay+0x28>
  {
  }
}
 80022a4:	bf00      	nop
 80022a6:	bf00      	nop
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	20000030 	.word	0x20000030

080022b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c4:	4b0c      	ldr	r3, [pc, #48]	@ (80022f8 <__NVIC_SetPriorityGrouping+0x44>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ca:	68ba      	ldr	r2, [r7, #8]
 80022cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022d0:	4013      	ands	r3, r2
 80022d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022e6:	4a04      	ldr	r2, [pc, #16]	@ (80022f8 <__NVIC_SetPriorityGrouping+0x44>)
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	60d3      	str	r3, [r2, #12]
}
 80022ec:	bf00      	nop
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	e000ed00 	.word	0xe000ed00

080022fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002300:	4b04      	ldr	r3, [pc, #16]	@ (8002314 <__NVIC_GetPriorityGrouping+0x18>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	0a1b      	lsrs	r3, r3, #8
 8002306:	f003 0307 	and.w	r3, r3, #7
}
 800230a:	4618      	mov	r0, r3
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	6039      	str	r1, [r7, #0]
 8002322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002328:	2b00      	cmp	r3, #0
 800232a:	db0a      	blt.n	8002342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	b2da      	uxtb	r2, r3
 8002330:	490c      	ldr	r1, [pc, #48]	@ (8002364 <__NVIC_SetPriority+0x4c>)
 8002332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002336:	0112      	lsls	r2, r2, #4
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	440b      	add	r3, r1
 800233c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002340:	e00a      	b.n	8002358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	b2da      	uxtb	r2, r3
 8002346:	4908      	ldr	r1, [pc, #32]	@ (8002368 <__NVIC_SetPriority+0x50>)
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	3b04      	subs	r3, #4
 8002350:	0112      	lsls	r2, r2, #4
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	440b      	add	r3, r1
 8002356:	761a      	strb	r2, [r3, #24]
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	e000e100 	.word	0xe000e100
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800236c:	b480      	push	{r7}
 800236e:	b089      	sub	sp, #36	@ 0x24
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f1c3 0307 	rsb	r3, r3, #7
 8002386:	2b04      	cmp	r3, #4
 8002388:	bf28      	it	cs
 800238a:	2304      	movcs	r3, #4
 800238c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	3304      	adds	r3, #4
 8002392:	2b06      	cmp	r3, #6
 8002394:	d902      	bls.n	800239c <NVIC_EncodePriority+0x30>
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	3b03      	subs	r3, #3
 800239a:	e000      	b.n	800239e <NVIC_EncodePriority+0x32>
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a0:	f04f 32ff 	mov.w	r2, #4294967295
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43da      	mvns	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	401a      	ands	r2, r3
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b4:	f04f 31ff 	mov.w	r1, #4294967295
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	fa01 f303 	lsl.w	r3, r1, r3
 80023be:	43d9      	mvns	r1, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c4:	4313      	orrs	r3, r2
         );
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3724      	adds	r7, #36	@ 0x24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
	...

080023d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3b01      	subs	r3, #1
 80023e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023e4:	d301      	bcc.n	80023ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023e6:	2301      	movs	r3, #1
 80023e8:	e00f      	b.n	800240a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002414 <SysTick_Config+0x40>)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023f2:	210f      	movs	r1, #15
 80023f4:	f04f 30ff 	mov.w	r0, #4294967295
 80023f8:	f7ff ff8e 	bl	8002318 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023fc:	4b05      	ldr	r3, [pc, #20]	@ (8002414 <SysTick_Config+0x40>)
 80023fe:	2200      	movs	r2, #0
 8002400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002402:	4b04      	ldr	r3, [pc, #16]	@ (8002414 <SysTick_Config+0x40>)
 8002404:	2207      	movs	r2, #7
 8002406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	e000e010 	.word	0xe000e010

08002418 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7ff ff47 	bl	80022b4 <__NVIC_SetPriorityGrouping>
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800242e:	b580      	push	{r7, lr}
 8002430:	b086      	sub	sp, #24
 8002432:	af00      	add	r7, sp, #0
 8002434:	4603      	mov	r3, r0
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	607a      	str	r2, [r7, #4]
 800243a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002440:	f7ff ff5c 	bl	80022fc <__NVIC_GetPriorityGrouping>
 8002444:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	68b9      	ldr	r1, [r7, #8]
 800244a:	6978      	ldr	r0, [r7, #20]
 800244c:	f7ff ff8e 	bl	800236c <NVIC_EncodePriority>
 8002450:	4602      	mov	r2, r0
 8002452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff ff5d 	bl	8002318 <__NVIC_SetPriority>
}
 800245e:	bf00      	nop
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7ff ffb0 	bl	80023d4 <SysTick_Config>
 8002474:	4603      	mov	r3, r0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002480:	b480      	push	{r7}
 8002482:	b089      	sub	sp, #36	@ 0x24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800248e:	2300      	movs	r3, #0
 8002490:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002492:	2300      	movs	r3, #0
 8002494:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002496:	2300      	movs	r3, #0
 8002498:	61fb      	str	r3, [r7, #28]
 800249a:	e165      	b.n	8002768 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800249c:	2201      	movs	r2, #1
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	4013      	ands	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	f040 8154 	bne.w	8002762 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d005      	beq.n	80024d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d130      	bne.n	8002534 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	2203      	movs	r2, #3
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43db      	mvns	r3, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4013      	ands	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002508:	2201      	movs	r2, #1
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	091b      	lsrs	r3, r3, #4
 800251e:	f003 0201 	and.w	r2, r3, #1
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	2b03      	cmp	r3, #3
 800253e:	d017      	beq.n	8002570 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	2203      	movs	r2, #3
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4013      	ands	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 0303 	and.w	r3, r3, #3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d123      	bne.n	80025c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	08da      	lsrs	r2, r3, #3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3208      	adds	r2, #8
 8002584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002588:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	220f      	movs	r2, #15
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	691a      	ldr	r2, [r3, #16]
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	08da      	lsrs	r2, r3, #3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	3208      	adds	r2, #8
 80025be:	69b9      	ldr	r1, [r7, #24]
 80025c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	2203      	movs	r2, #3
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4013      	ands	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f003 0203 	and.w	r2, r3, #3
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 80ae 	beq.w	8002762 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	4b5d      	ldr	r3, [pc, #372]	@ (8002780 <HAL_GPIO_Init+0x300>)
 800260c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800260e:	4a5c      	ldr	r2, [pc, #368]	@ (8002780 <HAL_GPIO_Init+0x300>)
 8002610:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002614:	6453      	str	r3, [r2, #68]	@ 0x44
 8002616:	4b5a      	ldr	r3, [pc, #360]	@ (8002780 <HAL_GPIO_Init+0x300>)
 8002618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002622:	4a58      	ldr	r2, [pc, #352]	@ (8002784 <HAL_GPIO_Init+0x304>)
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	089b      	lsrs	r3, r3, #2
 8002628:	3302      	adds	r3, #2
 800262a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800262e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	220f      	movs	r2, #15
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43db      	mvns	r3, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4013      	ands	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a4f      	ldr	r2, [pc, #316]	@ (8002788 <HAL_GPIO_Init+0x308>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d025      	beq.n	800269a <HAL_GPIO_Init+0x21a>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a4e      	ldr	r2, [pc, #312]	@ (800278c <HAL_GPIO_Init+0x30c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d01f      	beq.n	8002696 <HAL_GPIO_Init+0x216>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a4d      	ldr	r2, [pc, #308]	@ (8002790 <HAL_GPIO_Init+0x310>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d019      	beq.n	8002692 <HAL_GPIO_Init+0x212>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a4c      	ldr	r2, [pc, #304]	@ (8002794 <HAL_GPIO_Init+0x314>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d013      	beq.n	800268e <HAL_GPIO_Init+0x20e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a4b      	ldr	r2, [pc, #300]	@ (8002798 <HAL_GPIO_Init+0x318>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d00d      	beq.n	800268a <HAL_GPIO_Init+0x20a>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a4a      	ldr	r2, [pc, #296]	@ (800279c <HAL_GPIO_Init+0x31c>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d007      	beq.n	8002686 <HAL_GPIO_Init+0x206>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a49      	ldr	r2, [pc, #292]	@ (80027a0 <HAL_GPIO_Init+0x320>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d101      	bne.n	8002682 <HAL_GPIO_Init+0x202>
 800267e:	2306      	movs	r3, #6
 8002680:	e00c      	b.n	800269c <HAL_GPIO_Init+0x21c>
 8002682:	2307      	movs	r3, #7
 8002684:	e00a      	b.n	800269c <HAL_GPIO_Init+0x21c>
 8002686:	2305      	movs	r3, #5
 8002688:	e008      	b.n	800269c <HAL_GPIO_Init+0x21c>
 800268a:	2304      	movs	r3, #4
 800268c:	e006      	b.n	800269c <HAL_GPIO_Init+0x21c>
 800268e:	2303      	movs	r3, #3
 8002690:	e004      	b.n	800269c <HAL_GPIO_Init+0x21c>
 8002692:	2302      	movs	r3, #2
 8002694:	e002      	b.n	800269c <HAL_GPIO_Init+0x21c>
 8002696:	2301      	movs	r3, #1
 8002698:	e000      	b.n	800269c <HAL_GPIO_Init+0x21c>
 800269a:	2300      	movs	r3, #0
 800269c:	69fa      	ldr	r2, [r7, #28]
 800269e:	f002 0203 	and.w	r2, r2, #3
 80026a2:	0092      	lsls	r2, r2, #2
 80026a4:	4093      	lsls	r3, r2
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026ac:	4935      	ldr	r1, [pc, #212]	@ (8002784 <HAL_GPIO_Init+0x304>)
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	089b      	lsrs	r3, r3, #2
 80026b2:	3302      	adds	r3, #2
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ba:	4b3a      	ldr	r3, [pc, #232]	@ (80027a4 <HAL_GPIO_Init+0x324>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	43db      	mvns	r3, r3
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	4013      	ands	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	4313      	orrs	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026de:	4a31      	ldr	r2, [pc, #196]	@ (80027a4 <HAL_GPIO_Init+0x324>)
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026e4:	4b2f      	ldr	r3, [pc, #188]	@ (80027a4 <HAL_GPIO_Init+0x324>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	43db      	mvns	r3, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4013      	ands	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d003      	beq.n	8002708 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	4313      	orrs	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002708:	4a26      	ldr	r2, [pc, #152]	@ (80027a4 <HAL_GPIO_Init+0x324>)
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800270e:	4b25      	ldr	r3, [pc, #148]	@ (80027a4 <HAL_GPIO_Init+0x324>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	43db      	mvns	r3, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4013      	ands	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	4313      	orrs	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002732:	4a1c      	ldr	r2, [pc, #112]	@ (80027a4 <HAL_GPIO_Init+0x324>)
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002738:	4b1a      	ldr	r3, [pc, #104]	@ (80027a4 <HAL_GPIO_Init+0x324>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	43db      	mvns	r3, r3
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4013      	ands	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d003      	beq.n	800275c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	4313      	orrs	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800275c:	4a11      	ldr	r2, [pc, #68]	@ (80027a4 <HAL_GPIO_Init+0x324>)
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	3301      	adds	r3, #1
 8002766:	61fb      	str	r3, [r7, #28]
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	2b0f      	cmp	r3, #15
 800276c:	f67f ae96 	bls.w	800249c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002770:	bf00      	nop
 8002772:	bf00      	nop
 8002774:	3724      	adds	r7, #36	@ 0x24
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	40023800 	.word	0x40023800
 8002784:	40013800 	.word	0x40013800
 8002788:	40020000 	.word	0x40020000
 800278c:	40020400 	.word	0x40020400
 8002790:	40020800 	.word	0x40020800
 8002794:	40020c00 	.word	0x40020c00
 8002798:	40021000 	.word	0x40021000
 800279c:	40021400 	.word	0x40021400
 80027a0:	40021800 	.word	0x40021800
 80027a4:	40013c00 	.word	0x40013c00

080027a8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b087      	sub	sp, #28
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	e0c7      	b.n	8002954 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027c4:	2201      	movs	r2, #1
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	4013      	ands	r3, r2
 80027d4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	429a      	cmp	r2, r3
 80027dc:	f040 80b7 	bne.w	800294e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80027e0:	4a62      	ldr	r2, [pc, #392]	@ (800296c <HAL_GPIO_DeInit+0x1c4>)
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	089b      	lsrs	r3, r3, #2
 80027e6:	3302      	adds	r3, #2
 80027e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ec:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f003 0303 	and.w	r3, r3, #3
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	220f      	movs	r2, #15
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	68ba      	ldr	r2, [r7, #8]
 80027fe:	4013      	ands	r3, r2
 8002800:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a5a      	ldr	r2, [pc, #360]	@ (8002970 <HAL_GPIO_DeInit+0x1c8>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d025      	beq.n	8002856 <HAL_GPIO_DeInit+0xae>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a59      	ldr	r2, [pc, #356]	@ (8002974 <HAL_GPIO_DeInit+0x1cc>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d01f      	beq.n	8002852 <HAL_GPIO_DeInit+0xaa>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a58      	ldr	r2, [pc, #352]	@ (8002978 <HAL_GPIO_DeInit+0x1d0>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d019      	beq.n	800284e <HAL_GPIO_DeInit+0xa6>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a57      	ldr	r2, [pc, #348]	@ (800297c <HAL_GPIO_DeInit+0x1d4>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d013      	beq.n	800284a <HAL_GPIO_DeInit+0xa2>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a56      	ldr	r2, [pc, #344]	@ (8002980 <HAL_GPIO_DeInit+0x1d8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d00d      	beq.n	8002846 <HAL_GPIO_DeInit+0x9e>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a55      	ldr	r2, [pc, #340]	@ (8002984 <HAL_GPIO_DeInit+0x1dc>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d007      	beq.n	8002842 <HAL_GPIO_DeInit+0x9a>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a54      	ldr	r2, [pc, #336]	@ (8002988 <HAL_GPIO_DeInit+0x1e0>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d101      	bne.n	800283e <HAL_GPIO_DeInit+0x96>
 800283a:	2306      	movs	r3, #6
 800283c:	e00c      	b.n	8002858 <HAL_GPIO_DeInit+0xb0>
 800283e:	2307      	movs	r3, #7
 8002840:	e00a      	b.n	8002858 <HAL_GPIO_DeInit+0xb0>
 8002842:	2305      	movs	r3, #5
 8002844:	e008      	b.n	8002858 <HAL_GPIO_DeInit+0xb0>
 8002846:	2304      	movs	r3, #4
 8002848:	e006      	b.n	8002858 <HAL_GPIO_DeInit+0xb0>
 800284a:	2303      	movs	r3, #3
 800284c:	e004      	b.n	8002858 <HAL_GPIO_DeInit+0xb0>
 800284e:	2302      	movs	r3, #2
 8002850:	e002      	b.n	8002858 <HAL_GPIO_DeInit+0xb0>
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <HAL_GPIO_DeInit+0xb0>
 8002856:	2300      	movs	r3, #0
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	f002 0203 	and.w	r2, r2, #3
 800285e:	0092      	lsls	r2, r2, #2
 8002860:	4093      	lsls	r3, r2
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	429a      	cmp	r2, r3
 8002866:	d132      	bne.n	80028ce <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002868:	4b48      	ldr	r3, [pc, #288]	@ (800298c <HAL_GPIO_DeInit+0x1e4>)
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	43db      	mvns	r3, r3
 8002870:	4946      	ldr	r1, [pc, #280]	@ (800298c <HAL_GPIO_DeInit+0x1e4>)
 8002872:	4013      	ands	r3, r2
 8002874:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002876:	4b45      	ldr	r3, [pc, #276]	@ (800298c <HAL_GPIO_DeInit+0x1e4>)
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	43db      	mvns	r3, r3
 800287e:	4943      	ldr	r1, [pc, #268]	@ (800298c <HAL_GPIO_DeInit+0x1e4>)
 8002880:	4013      	ands	r3, r2
 8002882:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002884:	4b41      	ldr	r3, [pc, #260]	@ (800298c <HAL_GPIO_DeInit+0x1e4>)
 8002886:	68da      	ldr	r2, [r3, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	43db      	mvns	r3, r3
 800288c:	493f      	ldr	r1, [pc, #252]	@ (800298c <HAL_GPIO_DeInit+0x1e4>)
 800288e:	4013      	ands	r3, r2
 8002890:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002892:	4b3e      	ldr	r3, [pc, #248]	@ (800298c <HAL_GPIO_DeInit+0x1e4>)
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	43db      	mvns	r3, r3
 800289a:	493c      	ldr	r1, [pc, #240]	@ (800298c <HAL_GPIO_DeInit+0x1e4>)
 800289c:	4013      	ands	r3, r2
 800289e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	f003 0303 	and.w	r3, r3, #3
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	220f      	movs	r2, #15
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80028b0:	4a2e      	ldr	r2, [pc, #184]	@ (800296c <HAL_GPIO_DeInit+0x1c4>)
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	089b      	lsrs	r3, r3, #2
 80028b6:	3302      	adds	r3, #2
 80028b8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	43da      	mvns	r2, r3
 80028c0:	482a      	ldr	r0, [pc, #168]	@ (800296c <HAL_GPIO_DeInit+0x1c4>)
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	089b      	lsrs	r3, r3, #2
 80028c6:	400a      	ands	r2, r1
 80028c8:	3302      	adds	r3, #2
 80028ca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	2103      	movs	r1, #3
 80028d8:	fa01 f303 	lsl.w	r3, r1, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	401a      	ands	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	08da      	lsrs	r2, r3, #3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3208      	adds	r2, #8
 80028ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	220f      	movs	r2, #15
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43db      	mvns	r3, r3
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	08d2      	lsrs	r2, r2, #3
 8002904:	4019      	ands	r1, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	3208      	adds	r2, #8
 800290a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	2103      	movs	r1, #3
 8002918:	fa01 f303 	lsl.w	r3, r1, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	401a      	ands	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	2101      	movs	r1, #1
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	fa01 f303 	lsl.w	r3, r1, r3
 8002930:	43db      	mvns	r3, r3
 8002932:	401a      	ands	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	2103      	movs	r1, #3
 8002942:	fa01 f303 	lsl.w	r3, r1, r3
 8002946:	43db      	mvns	r3, r3
 8002948:	401a      	ands	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	3301      	adds	r3, #1
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	2b0f      	cmp	r3, #15
 8002958:	f67f af34 	bls.w	80027c4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800295c:	bf00      	nop
 800295e:	bf00      	nop
 8002960:	371c      	adds	r7, #28
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	40013800 	.word	0x40013800
 8002970:	40020000 	.word	0x40020000
 8002974:	40020400 	.word	0x40020400
 8002978:	40020800 	.word	0x40020800
 800297c:	40020c00 	.word	0x40020c00
 8002980:	40021000 	.word	0x40021000
 8002984:	40021400 	.word	0x40021400
 8002988:	40021800 	.word	0x40021800
 800298c:	40013c00 	.word	0x40013c00

08002990 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e12b      	b.n	8002bfa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d106      	bne.n	80029bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7ff fa00 	bl	8001dbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2224      	movs	r2, #36	@ 0x24
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0201 	bic.w	r2, r2, #1
 80029d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029f4:	f001 fa40 	bl	8003e78 <HAL_RCC_GetPCLK1Freq>
 80029f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	4a81      	ldr	r2, [pc, #516]	@ (8002c04 <HAL_I2C_Init+0x274>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d807      	bhi.n	8002a14 <HAL_I2C_Init+0x84>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4a80      	ldr	r2, [pc, #512]	@ (8002c08 <HAL_I2C_Init+0x278>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	bf94      	ite	ls
 8002a0c:	2301      	movls	r3, #1
 8002a0e:	2300      	movhi	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	e006      	b.n	8002a22 <HAL_I2C_Init+0x92>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4a7d      	ldr	r2, [pc, #500]	@ (8002c0c <HAL_I2C_Init+0x27c>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	bf94      	ite	ls
 8002a1c:	2301      	movls	r3, #1
 8002a1e:	2300      	movhi	r3, #0
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e0e7      	b.n	8002bfa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	4a78      	ldr	r2, [pc, #480]	@ (8002c10 <HAL_I2C_Init+0x280>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	0c9b      	lsrs	r3, r3, #18
 8002a34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	4a6a      	ldr	r2, [pc, #424]	@ (8002c04 <HAL_I2C_Init+0x274>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d802      	bhi.n	8002a64 <HAL_I2C_Init+0xd4>
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	3301      	adds	r3, #1
 8002a62:	e009      	b.n	8002a78 <HAL_I2C_Init+0xe8>
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a6a:	fb02 f303 	mul.w	r3, r2, r3
 8002a6e:	4a69      	ldr	r2, [pc, #420]	@ (8002c14 <HAL_I2C_Init+0x284>)
 8002a70:	fba2 2303 	umull	r2, r3, r2, r3
 8002a74:	099b      	lsrs	r3, r3, #6
 8002a76:	3301      	adds	r3, #1
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6812      	ldr	r2, [r2, #0]
 8002a7c:	430b      	orrs	r3, r1
 8002a7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a8a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	495c      	ldr	r1, [pc, #368]	@ (8002c04 <HAL_I2C_Init+0x274>)
 8002a94:	428b      	cmp	r3, r1
 8002a96:	d819      	bhi.n	8002acc <HAL_I2C_Init+0x13c>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	1e59      	subs	r1, r3, #1
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002aa6:	1c59      	adds	r1, r3, #1
 8002aa8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002aac:	400b      	ands	r3, r1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00a      	beq.n	8002ac8 <HAL_I2C_Init+0x138>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	1e59      	subs	r1, r3, #1
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac6:	e051      	b.n	8002b6c <HAL_I2C_Init+0x1dc>
 8002ac8:	2304      	movs	r3, #4
 8002aca:	e04f      	b.n	8002b6c <HAL_I2C_Init+0x1dc>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d111      	bne.n	8002af8 <HAL_I2C_Init+0x168>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	1e58      	subs	r0, r3, #1
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6859      	ldr	r1, [r3, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	440b      	add	r3, r1
 8002ae2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	bf0c      	ite	eq
 8002af0:	2301      	moveq	r3, #1
 8002af2:	2300      	movne	r3, #0
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	e012      	b.n	8002b1e <HAL_I2C_Init+0x18e>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	1e58      	subs	r0, r3, #1
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6859      	ldr	r1, [r3, #4]
 8002b00:	460b      	mov	r3, r1
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	0099      	lsls	r1, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b0e:	3301      	adds	r3, #1
 8002b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	bf0c      	ite	eq
 8002b18:	2301      	moveq	r3, #1
 8002b1a:	2300      	movne	r3, #0
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <HAL_I2C_Init+0x196>
 8002b22:	2301      	movs	r3, #1
 8002b24:	e022      	b.n	8002b6c <HAL_I2C_Init+0x1dc>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10e      	bne.n	8002b4c <HAL_I2C_Init+0x1bc>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	1e58      	subs	r0, r3, #1
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6859      	ldr	r1, [r3, #4]
 8002b36:	460b      	mov	r3, r1
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	440b      	add	r3, r1
 8002b3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b40:	3301      	adds	r3, #1
 8002b42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b4a:	e00f      	b.n	8002b6c <HAL_I2C_Init+0x1dc>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	1e58      	subs	r0, r3, #1
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6859      	ldr	r1, [r3, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	0099      	lsls	r1, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b62:	3301      	adds	r3, #1
 8002b64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	6809      	ldr	r1, [r1, #0]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69da      	ldr	r2, [r3, #28]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002b9a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6911      	ldr	r1, [r2, #16]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	68d2      	ldr	r2, [r2, #12]
 8002ba6:	4311      	orrs	r1, r2
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6812      	ldr	r2, [r2, #0]
 8002bac:	430b      	orrs	r3, r1
 8002bae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695a      	ldr	r2, [r3, #20]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 0201 	orr.w	r2, r2, #1
 8002bda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2220      	movs	r2, #32
 8002be6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	000186a0 	.word	0x000186a0
 8002c08:	001e847f 	.word	0x001e847f
 8002c0c:	003d08ff 	.word	0x003d08ff
 8002c10:	431bde83 	.word	0x431bde83
 8002c14:	10624dd3 	.word	0x10624dd3

08002c18 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e021      	b.n	8002c6e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2224      	movs	r2, #36	@ 0x24
 8002c2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 0201 	bic.w	r2, r2, #1
 8002c40:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7ff f958 	bl	8001ef8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b088      	sub	sp, #32
 8002c7c:	af02      	add	r7, sp, #8
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	4608      	mov	r0, r1
 8002c82:	4611      	mov	r1, r2
 8002c84:	461a      	mov	r2, r3
 8002c86:	4603      	mov	r3, r0
 8002c88:	817b      	strh	r3, [r7, #10]
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	813b      	strh	r3, [r7, #8]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c92:	f7ff fad3 	bl	800223c <HAL_GetTick>
 8002c96:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b20      	cmp	r3, #32
 8002ca2:	f040 80d9 	bne.w	8002e58 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	2319      	movs	r3, #25
 8002cac:	2201      	movs	r2, #1
 8002cae:	496d      	ldr	r1, [pc, #436]	@ (8002e64 <HAL_I2C_Mem_Write+0x1ec>)
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f000 fdb9 	bl	8003828 <I2C_WaitOnFlagUntilTimeout>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e0cc      	b.n	8002e5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d101      	bne.n	8002cce <HAL_I2C_Mem_Write+0x56>
 8002cca:	2302      	movs	r3, #2
 8002ccc:	e0c5      	b.n	8002e5a <HAL_I2C_Mem_Write+0x1e2>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d007      	beq.n	8002cf4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 0201 	orr.w	r2, r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2221      	movs	r2, #33	@ 0x21
 8002d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2240      	movs	r2, #64	@ 0x40
 8002d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6a3a      	ldr	r2, [r7, #32]
 8002d1e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002d24:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4a4d      	ldr	r2, [pc, #308]	@ (8002e68 <HAL_I2C_Mem_Write+0x1f0>)
 8002d34:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d36:	88f8      	ldrh	r0, [r7, #6]
 8002d38:	893a      	ldrh	r2, [r7, #8]
 8002d3a:	8979      	ldrh	r1, [r7, #10]
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	9301      	str	r3, [sp, #4]
 8002d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	4603      	mov	r3, r0
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f000 fbf0 	bl	800352c <I2C_RequestMemoryWrite>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d052      	beq.n	8002df8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e081      	b.n	8002e5a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 fe7e 	bl	8003a5c <I2C_WaitOnTXEFlagUntilTimeout>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00d      	beq.n	8002d82 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d107      	bne.n	8002d7e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e06b      	b.n	8002e5a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d86:	781a      	ldrb	r2, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d92:	1c5a      	adds	r2, r3, #1
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	3b01      	subs	r3, #1
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	d11b      	bne.n	8002df8 <HAL_I2C_Mem_Write+0x180>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d017      	beq.n	8002df8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dcc:	781a      	ldrb	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd8:	1c5a      	adds	r2, r3, #1
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002de2:	3b01      	subs	r3, #1
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	3b01      	subs	r3, #1
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1aa      	bne.n	8002d56 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f000 fe71 	bl	8003aec <I2C_WaitOnBTFFlagUntilTimeout>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00d      	beq.n	8002e2c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d107      	bne.n	8002e28 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e26:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e016      	b.n	8002e5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e54:	2300      	movs	r3, #0
 8002e56:	e000      	b.n	8002e5a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002e58:	2302      	movs	r3, #2
  }
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3718      	adds	r7, #24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	00100002 	.word	0x00100002
 8002e68:	ffff0000 	.word	0xffff0000

08002e6c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08c      	sub	sp, #48	@ 0x30
 8002e70:	af02      	add	r7, sp, #8
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	4608      	mov	r0, r1
 8002e76:	4611      	mov	r1, r2
 8002e78:	461a      	mov	r2, r3
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	817b      	strh	r3, [r7, #10]
 8002e7e:	460b      	mov	r3, r1
 8002e80:	813b      	strh	r3, [r7, #8]
 8002e82:	4613      	mov	r3, r2
 8002e84:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e86:	f7ff f9d9 	bl	800223c <HAL_GetTick>
 8002e8a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b20      	cmp	r3, #32
 8002e96:	f040 8214 	bne.w	80032c2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	2319      	movs	r3, #25
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	497b      	ldr	r1, [pc, #492]	@ (8003090 <HAL_I2C_Mem_Read+0x224>)
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 fcbf 	bl	8003828 <I2C_WaitOnFlagUntilTimeout>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	e207      	b.n	80032c4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d101      	bne.n	8002ec2 <HAL_I2C_Mem_Read+0x56>
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	e200      	b.n	80032c4 <HAL_I2C_Mem_Read+0x458>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d007      	beq.n	8002ee8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0201 	orr.w	r2, r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ef6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2222      	movs	r2, #34	@ 0x22
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2240      	movs	r2, #64	@ 0x40
 8002f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f12:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002f18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4a5b      	ldr	r2, [pc, #364]	@ (8003094 <HAL_I2C_Mem_Read+0x228>)
 8002f28:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f2a:	88f8      	ldrh	r0, [r7, #6]
 8002f2c:	893a      	ldrh	r2, [r7, #8]
 8002f2e:	8979      	ldrh	r1, [r7, #10]
 8002f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f32:	9301      	str	r3, [sp, #4]
 8002f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	4603      	mov	r3, r0
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 fb8c 	bl	8003658 <I2C_RequestMemoryRead>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e1bc      	b.n	80032c4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d113      	bne.n	8002f7a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f52:	2300      	movs	r3, #0
 8002f54:	623b      	str	r3, [r7, #32]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	623b      	str	r3, [r7, #32]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	623b      	str	r3, [r7, #32]
 8002f66:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	e190      	b.n	800329c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d11b      	bne.n	8002fba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f92:	2300      	movs	r3, #0
 8002f94:	61fb      	str	r3, [r7, #28]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	61fb      	str	r3, [r7, #28]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	61fb      	str	r3, [r7, #28]
 8002fa6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	e170      	b.n	800329c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d11b      	bne.n	8002ffa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fd0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fe0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61bb      	str	r3, [r7, #24]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	61bb      	str	r3, [r7, #24]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	61bb      	str	r3, [r7, #24]
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	e150      	b.n	800329c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	617b      	str	r3, [r7, #20]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	617b      	str	r3, [r7, #20]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	617b      	str	r3, [r7, #20]
 800300e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003010:	e144      	b.n	800329c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003016:	2b03      	cmp	r3, #3
 8003018:	f200 80f1 	bhi.w	80031fe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003020:	2b01      	cmp	r3, #1
 8003022:	d123      	bne.n	800306c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003024:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003026:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 fda7 	bl	8003b7c <I2C_WaitOnRXNEFlagUntilTimeout>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e145      	b.n	80032c4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	691a      	ldr	r2, [r3, #16]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304a:	1c5a      	adds	r2, r3, #1
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003054:	3b01      	subs	r3, #1
 8003056:	b29a      	uxth	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003060:	b29b      	uxth	r3, r3
 8003062:	3b01      	subs	r3, #1
 8003064:	b29a      	uxth	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800306a:	e117      	b.n	800329c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003070:	2b02      	cmp	r3, #2
 8003072:	d14e      	bne.n	8003112 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800307a:	2200      	movs	r2, #0
 800307c:	4906      	ldr	r1, [pc, #24]	@ (8003098 <HAL_I2C_Mem_Read+0x22c>)
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 fbd2 	bl	8003828 <I2C_WaitOnFlagUntilTimeout>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d008      	beq.n	800309c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e11a      	b.n	80032c4 <HAL_I2C_Mem_Read+0x458>
 800308e:	bf00      	nop
 8003090:	00100002 	.word	0x00100002
 8003094:	ffff0000 	.word	0xffff0000
 8003098:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	691a      	ldr	r2, [r3, #16]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030be:	1c5a      	adds	r2, r3, #1
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030c8:	3b01      	subs	r3, #1
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	3b01      	subs	r3, #1
 80030d8:	b29a      	uxth	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	691a      	ldr	r2, [r3, #16]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f0:	1c5a      	adds	r2, r3, #1
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003106:	b29b      	uxth	r3, r3
 8003108:	3b01      	subs	r3, #1
 800310a:	b29a      	uxth	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003110:	e0c4      	b.n	800329c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003118:	2200      	movs	r2, #0
 800311a:	496c      	ldr	r1, [pc, #432]	@ (80032cc <HAL_I2C_Mem_Read+0x460>)
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 fb83 	bl	8003828 <I2C_WaitOnFlagUntilTimeout>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e0cb      	b.n	80032c4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800313a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	691a      	ldr	r2, [r3, #16]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003146:	b2d2      	uxtb	r2, r2
 8003148:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314e:	1c5a      	adds	r2, r3, #1
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003158:	3b01      	subs	r3, #1
 800315a:	b29a      	uxth	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003164:	b29b      	uxth	r3, r3
 8003166:	3b01      	subs	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800316e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003174:	2200      	movs	r2, #0
 8003176:	4955      	ldr	r1, [pc, #340]	@ (80032cc <HAL_I2C_Mem_Read+0x460>)
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 fb55 	bl	8003828 <I2C_WaitOnFlagUntilTimeout>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e09d      	b.n	80032c4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003196:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	691a      	ldr	r2, [r3, #16]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031aa:	1c5a      	adds	r2, r3, #1
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	691a      	ldr	r2, [r3, #16]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031dc:	1c5a      	adds	r2, r3, #1
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031e6:	3b01      	subs	r3, #1
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	3b01      	subs	r3, #1
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80031fc:	e04e      	b.n	800329c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003200:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 fcba 	bl	8003b7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e058      	b.n	80032c4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	691a      	ldr	r2, [r3, #16]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321c:	b2d2      	uxtb	r2, r2
 800321e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003224:	1c5a      	adds	r2, r3, #1
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800322e:	3b01      	subs	r3, #1
 8003230:	b29a      	uxth	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800323a:	b29b      	uxth	r3, r3
 800323c:	3b01      	subs	r3, #1
 800323e:	b29a      	uxth	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	f003 0304 	and.w	r3, r3, #4
 800324e:	2b04      	cmp	r3, #4
 8003250:	d124      	bne.n	800329c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003256:	2b03      	cmp	r3, #3
 8003258:	d107      	bne.n	800326a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003268:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	691a      	ldr	r2, [r3, #16]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003274:	b2d2      	uxtb	r2, r2
 8003276:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327c:	1c5a      	adds	r2, r3, #1
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003286:	3b01      	subs	r3, #1
 8003288:	b29a      	uxth	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003292:	b29b      	uxth	r3, r3
 8003294:	3b01      	subs	r3, #1
 8003296:	b29a      	uxth	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f47f aeb6 	bne.w	8003012 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2220      	movs	r2, #32
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80032be:	2300      	movs	r3, #0
 80032c0:	e000      	b.n	80032c4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80032c2:	2302      	movs	r3, #2
  }
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3728      	adds	r7, #40	@ 0x28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	00010004 	.word	0x00010004

080032d0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b08a      	sub	sp, #40	@ 0x28
 80032d4:	af02      	add	r7, sp, #8
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	607a      	str	r2, [r7, #4]
 80032da:	603b      	str	r3, [r7, #0]
 80032dc:	460b      	mov	r3, r1
 80032de:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80032e0:	f7fe ffac 	bl	800223c <HAL_GetTick>
 80032e4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b20      	cmp	r3, #32
 80032f4:	f040 8111 	bne.w	800351a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	2319      	movs	r3, #25
 80032fe:	2201      	movs	r2, #1
 8003300:	4988      	ldr	r1, [pc, #544]	@ (8003524 <HAL_I2C_IsDeviceReady+0x254>)
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 fa90 	bl	8003828 <I2C_WaitOnFlagUntilTimeout>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800330e:	2302      	movs	r3, #2
 8003310:	e104      	b.n	800351c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003318:	2b01      	cmp	r3, #1
 800331a:	d101      	bne.n	8003320 <HAL_I2C_IsDeviceReady+0x50>
 800331c:	2302      	movs	r3, #2
 800331e:	e0fd      	b.n	800351c <HAL_I2C_IsDeviceReady+0x24c>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b01      	cmp	r3, #1
 8003334:	d007      	beq.n	8003346 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f042 0201 	orr.w	r2, r2, #1
 8003344:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003354:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2224      	movs	r2, #36	@ 0x24
 800335a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	4a70      	ldr	r2, [pc, #448]	@ (8003528 <HAL_I2C_IsDeviceReady+0x258>)
 8003368:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003378:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	2200      	movs	r2, #0
 8003382:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 fa4e 	bl	8003828 <I2C_WaitOnFlagUntilTimeout>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00d      	beq.n	80033ae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800339c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033a0:	d103      	bne.n	80033aa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033a8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e0b6      	b.n	800351c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033ae:	897b      	ldrh	r3, [r7, #10]
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	461a      	mov	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80033bc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80033be:	f7fe ff3d 	bl	800223c <HAL_GetTick>
 80033c2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	bf0c      	ite	eq
 80033d2:	2301      	moveq	r3, #1
 80033d4:	2300      	movne	r3, #0
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033e8:	bf0c      	ite	eq
 80033ea:	2301      	moveq	r3, #1
 80033ec:	2300      	movne	r3, #0
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80033f2:	e025      	b.n	8003440 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033f4:	f7fe ff22 	bl	800223c <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	429a      	cmp	r2, r3
 8003402:	d302      	bcc.n	800340a <HAL_I2C_IsDeviceReady+0x13a>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d103      	bne.n	8003412 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	22a0      	movs	r2, #160	@ 0xa0
 800340e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b02      	cmp	r3, #2
 800341e:	bf0c      	ite	eq
 8003420:	2301      	moveq	r3, #1
 8003422:	2300      	movne	r3, #0
 8003424:	b2db      	uxtb	r3, r3
 8003426:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003432:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003436:	bf0c      	ite	eq
 8003438:	2301      	moveq	r3, #1
 800343a:	2300      	movne	r3, #0
 800343c:	b2db      	uxtb	r3, r3
 800343e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2ba0      	cmp	r3, #160	@ 0xa0
 800344a:	d005      	beq.n	8003458 <HAL_I2C_IsDeviceReady+0x188>
 800344c:	7dfb      	ldrb	r3, [r7, #23]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d102      	bne.n	8003458 <HAL_I2C_IsDeviceReady+0x188>
 8003452:	7dbb      	ldrb	r3, [r7, #22]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d0cd      	beq.n	80033f4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b02      	cmp	r3, #2
 800346c:	d129      	bne.n	80034c2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800347c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800347e:	2300      	movs	r3, #0
 8003480:	613b      	str	r3, [r7, #16]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	613b      	str	r3, [r7, #16]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	613b      	str	r3, [r7, #16]
 8003492:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	2319      	movs	r3, #25
 800349a:	2201      	movs	r2, #1
 800349c:	4921      	ldr	r1, [pc, #132]	@ (8003524 <HAL_I2C_IsDeviceReady+0x254>)
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 f9c2 	bl	8003828 <I2C_WaitOnFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e036      	b.n	800351c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2220      	movs	r2, #32
 80034b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80034be:	2300      	movs	r3, #0
 80034c0:	e02c      	b.n	800351c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034d0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034da:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	2319      	movs	r3, #25
 80034e2:	2201      	movs	r2, #1
 80034e4:	490f      	ldr	r1, [pc, #60]	@ (8003524 <HAL_I2C_IsDeviceReady+0x254>)
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 f99e 	bl	8003828 <I2C_WaitOnFlagUntilTimeout>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e012      	b.n	800351c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	3301      	adds	r3, #1
 80034fa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	429a      	cmp	r2, r3
 8003502:	f4ff af32 	bcc.w	800336a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2220      	movs	r2, #32
 800350a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e000      	b.n	800351c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800351a:	2302      	movs	r3, #2
  }
}
 800351c:	4618      	mov	r0, r3
 800351e:	3720      	adds	r7, #32
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	00100002 	.word	0x00100002
 8003528:	ffff0000 	.word	0xffff0000

0800352c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b088      	sub	sp, #32
 8003530:	af02      	add	r7, sp, #8
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	4608      	mov	r0, r1
 8003536:	4611      	mov	r1, r2
 8003538:	461a      	mov	r2, r3
 800353a:	4603      	mov	r3, r0
 800353c:	817b      	strh	r3, [r7, #10]
 800353e:	460b      	mov	r3, r1
 8003540:	813b      	strh	r3, [r7, #8]
 8003542:	4613      	mov	r3, r2
 8003544:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003554:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	2200      	movs	r2, #0
 800355e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 f960 	bl	8003828 <I2C_WaitOnFlagUntilTimeout>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00d      	beq.n	800358a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003578:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800357c:	d103      	bne.n	8003586 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003584:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e05f      	b.n	800364a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800358a:	897b      	ldrh	r3, [r7, #10]
 800358c:	b2db      	uxtb	r3, r3
 800358e:	461a      	mov	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003598:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800359a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359c:	6a3a      	ldr	r2, [r7, #32]
 800359e:	492d      	ldr	r1, [pc, #180]	@ (8003654 <I2C_RequestMemoryWrite+0x128>)
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 f9bb 	bl	800391c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e04c      	b.n	800364a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035b0:	2300      	movs	r3, #0
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	617b      	str	r3, [r7, #20]
 80035c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035c8:	6a39      	ldr	r1, [r7, #32]
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 fa46 	bl	8003a5c <I2C_WaitOnTXEFlagUntilTimeout>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00d      	beq.n	80035f2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035da:	2b04      	cmp	r3, #4
 80035dc:	d107      	bne.n	80035ee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e02b      	b.n	800364a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035f2:	88fb      	ldrh	r3, [r7, #6]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d105      	bne.n	8003604 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035f8:	893b      	ldrh	r3, [r7, #8]
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	611a      	str	r2, [r3, #16]
 8003602:	e021      	b.n	8003648 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003604:	893b      	ldrh	r3, [r7, #8]
 8003606:	0a1b      	lsrs	r3, r3, #8
 8003608:	b29b      	uxth	r3, r3
 800360a:	b2da      	uxtb	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003612:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003614:	6a39      	ldr	r1, [r7, #32]
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 fa20 	bl	8003a5c <I2C_WaitOnTXEFlagUntilTimeout>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00d      	beq.n	800363e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003626:	2b04      	cmp	r3, #4
 8003628:	d107      	bne.n	800363a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003638:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e005      	b.n	800364a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800363e:	893b      	ldrh	r3, [r7, #8]
 8003640:	b2da      	uxtb	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3718      	adds	r7, #24
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	00010002 	.word	0x00010002

08003658 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b088      	sub	sp, #32
 800365c:	af02      	add	r7, sp, #8
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	4608      	mov	r0, r1
 8003662:	4611      	mov	r1, r2
 8003664:	461a      	mov	r2, r3
 8003666:	4603      	mov	r3, r0
 8003668:	817b      	strh	r3, [r7, #10]
 800366a:	460b      	mov	r3, r1
 800366c:	813b      	strh	r3, [r7, #8]
 800366e:	4613      	mov	r3, r2
 8003670:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003680:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003690:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	2200      	movs	r2, #0
 800369a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 f8c2 	bl	8003828 <I2C_WaitOnFlagUntilTimeout>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00d      	beq.n	80036c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036b8:	d103      	bne.n	80036c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e0aa      	b.n	800381c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036c6:	897b      	ldrh	r3, [r7, #10]
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	461a      	mov	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80036d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d8:	6a3a      	ldr	r2, [r7, #32]
 80036da:	4952      	ldr	r1, [pc, #328]	@ (8003824 <I2C_RequestMemoryRead+0x1cc>)
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f000 f91d 	bl	800391c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e097      	b.n	800381c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ec:	2300      	movs	r3, #0
 80036ee:	617b      	str	r3, [r7, #20]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	617b      	str	r3, [r7, #20]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	617b      	str	r3, [r7, #20]
 8003700:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003704:	6a39      	ldr	r1, [r7, #32]
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f000 f9a8 	bl	8003a5c <I2C_WaitOnTXEFlagUntilTimeout>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00d      	beq.n	800372e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003716:	2b04      	cmp	r3, #4
 8003718:	d107      	bne.n	800372a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003728:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e076      	b.n	800381c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800372e:	88fb      	ldrh	r3, [r7, #6]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d105      	bne.n	8003740 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003734:	893b      	ldrh	r3, [r7, #8]
 8003736:	b2da      	uxtb	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	611a      	str	r2, [r3, #16]
 800373e:	e021      	b.n	8003784 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003740:	893b      	ldrh	r3, [r7, #8]
 8003742:	0a1b      	lsrs	r3, r3, #8
 8003744:	b29b      	uxth	r3, r3
 8003746:	b2da      	uxtb	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800374e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003750:	6a39      	ldr	r1, [r7, #32]
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 f982 	bl	8003a5c <I2C_WaitOnTXEFlagUntilTimeout>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00d      	beq.n	800377a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003762:	2b04      	cmp	r3, #4
 8003764:	d107      	bne.n	8003776 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003774:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e050      	b.n	800381c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800377a:	893b      	ldrh	r3, [r7, #8]
 800377c:	b2da      	uxtb	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003784:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003786:	6a39      	ldr	r1, [r7, #32]
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f000 f967 	bl	8003a5c <I2C_WaitOnTXEFlagUntilTimeout>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00d      	beq.n	80037b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003798:	2b04      	cmp	r3, #4
 800379a:	d107      	bne.n	80037ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e035      	b.n	800381c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	6a3b      	ldr	r3, [r7, #32]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f000 f82b 	bl	8003828 <I2C_WaitOnFlagUntilTimeout>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00d      	beq.n	80037f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037e6:	d103      	bne.n	80037f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e013      	b.n	800381c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80037f4:	897b      	ldrh	r3, [r7, #10]
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	f043 0301 	orr.w	r3, r3, #1
 80037fc:	b2da      	uxtb	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003806:	6a3a      	ldr	r2, [r7, #32]
 8003808:	4906      	ldr	r1, [pc, #24]	@ (8003824 <I2C_RequestMemoryRead+0x1cc>)
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 f886 	bl	800391c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e000      	b.n	800381c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3718      	adds	r7, #24
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	00010002 	.word	0x00010002

08003828 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	603b      	str	r3, [r7, #0]
 8003834:	4613      	mov	r3, r2
 8003836:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003838:	e048      	b.n	80038cc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003840:	d044      	beq.n	80038cc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003842:	f7fe fcfb 	bl	800223c <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	429a      	cmp	r2, r3
 8003850:	d302      	bcc.n	8003858 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d139      	bne.n	80038cc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	0c1b      	lsrs	r3, r3, #16
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b01      	cmp	r3, #1
 8003860:	d10d      	bne.n	800387e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	43da      	mvns	r2, r3
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	4013      	ands	r3, r2
 800386e:	b29b      	uxth	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	bf0c      	ite	eq
 8003874:	2301      	moveq	r3, #1
 8003876:	2300      	movne	r3, #0
 8003878:	b2db      	uxtb	r3, r3
 800387a:	461a      	mov	r2, r3
 800387c:	e00c      	b.n	8003898 <I2C_WaitOnFlagUntilTimeout+0x70>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	43da      	mvns	r2, r3
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	4013      	ands	r3, r2
 800388a:	b29b      	uxth	r3, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	bf0c      	ite	eq
 8003890:	2301      	moveq	r3, #1
 8003892:	2300      	movne	r3, #0
 8003894:	b2db      	uxtb	r3, r3
 8003896:	461a      	mov	r2, r3
 8003898:	79fb      	ldrb	r3, [r7, #7]
 800389a:	429a      	cmp	r2, r3
 800389c:	d116      	bne.n	80038cc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b8:	f043 0220 	orr.w	r2, r3, #32
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e023      	b.n	8003914 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	0c1b      	lsrs	r3, r3, #16
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d10d      	bne.n	80038f2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	43da      	mvns	r2, r3
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	4013      	ands	r3, r2
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	bf0c      	ite	eq
 80038e8:	2301      	moveq	r3, #1
 80038ea:	2300      	movne	r3, #0
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	461a      	mov	r2, r3
 80038f0:	e00c      	b.n	800390c <I2C_WaitOnFlagUntilTimeout+0xe4>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	43da      	mvns	r2, r3
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	4013      	ands	r3, r2
 80038fe:	b29b      	uxth	r3, r3
 8003900:	2b00      	cmp	r3, #0
 8003902:	bf0c      	ite	eq
 8003904:	2301      	moveq	r3, #1
 8003906:	2300      	movne	r3, #0
 8003908:	b2db      	uxtb	r3, r3
 800390a:	461a      	mov	r2, r3
 800390c:	79fb      	ldrb	r3, [r7, #7]
 800390e:	429a      	cmp	r2, r3
 8003910:	d093      	beq.n	800383a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
 8003928:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800392a:	e071      	b.n	8003a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003936:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800393a:	d123      	bne.n	8003984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800394a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003954:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003970:	f043 0204 	orr.w	r2, r3, #4
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e067      	b.n	8003a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398a:	d041      	beq.n	8003a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800398c:	f7fe fc56 	bl	800223c <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	429a      	cmp	r2, r3
 800399a:	d302      	bcc.n	80039a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d136      	bne.n	8003a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	0c1b      	lsrs	r3, r3, #16
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d10c      	bne.n	80039c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	43da      	mvns	r2, r3
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	4013      	ands	r3, r2
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	bf14      	ite	ne
 80039be:	2301      	movne	r3, #1
 80039c0:	2300      	moveq	r3, #0
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	e00b      	b.n	80039de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	43da      	mvns	r2, r3
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	4013      	ands	r3, r2
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	bf14      	ite	ne
 80039d8:	2301      	movne	r3, #1
 80039da:	2300      	moveq	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d016      	beq.n	8003a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2220      	movs	r2, #32
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fc:	f043 0220 	orr.w	r2, r3, #32
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e021      	b.n	8003a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	0c1b      	lsrs	r3, r3, #16
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d10c      	bne.n	8003a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	43da      	mvns	r2, r3
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	4013      	ands	r3, r2
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	bf14      	ite	ne
 8003a2c:	2301      	movne	r3, #1
 8003a2e:	2300      	moveq	r3, #0
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	e00b      	b.n	8003a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	43da      	mvns	r2, r3
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	bf14      	ite	ne
 8003a46:	2301      	movne	r3, #1
 8003a48:	2300      	moveq	r3, #0
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f47f af6d 	bne.w	800392c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a68:	e034      	b.n	8003ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f000 f8e3 	bl	8003c36 <I2C_IsAcknowledgeFailed>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e034      	b.n	8003ae4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a80:	d028      	beq.n	8003ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a82:	f7fe fbdb 	bl	800223c <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d302      	bcc.n	8003a98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d11d      	bne.n	8003ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aa2:	2b80      	cmp	r3, #128	@ 0x80
 8003aa4:	d016      	beq.n	8003ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac0:	f043 0220 	orr.w	r2, r3, #32
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e007      	b.n	8003ae4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ade:	2b80      	cmp	r3, #128	@ 0x80
 8003ae0:	d1c3      	bne.n	8003a6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003af8:	e034      	b.n	8003b64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 f89b 	bl	8003c36 <I2C_IsAcknowledgeFailed>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e034      	b.n	8003b74 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b10:	d028      	beq.n	8003b64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b12:	f7fe fb93 	bl	800223c <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d302      	bcc.n	8003b28 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d11d      	bne.n	8003b64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	f003 0304 	and.w	r3, r3, #4
 8003b32:	2b04      	cmp	r3, #4
 8003b34:	d016      	beq.n	8003b64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b50:	f043 0220 	orr.w	r2, r3, #32
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e007      	b.n	8003b74 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	f003 0304 	and.w	r3, r3, #4
 8003b6e:	2b04      	cmp	r3, #4
 8003b70:	d1c3      	bne.n	8003afa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b88:	e049      	b.n	8003c1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	f003 0310 	and.w	r3, r3, #16
 8003b94:	2b10      	cmp	r3, #16
 8003b96:	d119      	bne.n	8003bcc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f06f 0210 	mvn.w	r2, #16
 8003ba0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2220      	movs	r2, #32
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e030      	b.n	8003c2e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bcc:	f7fe fb36 	bl	800223c <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d302      	bcc.n	8003be2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d11d      	bne.n	8003c1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bec:	2b40      	cmp	r3, #64	@ 0x40
 8003bee:	d016      	beq.n	8003c1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0a:	f043 0220 	orr.w	r2, r3, #32
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e007      	b.n	8003c2e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c28:	2b40      	cmp	r3, #64	@ 0x40
 8003c2a:	d1ae      	bne.n	8003b8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c4c:	d11b      	bne.n	8003c86 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c56:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2220      	movs	r2, #32
 8003c62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c72:	f043 0204 	orr.w	r2, r3, #4
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e000      	b.n	8003c88 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e0cc      	b.n	8003e42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ca8:	4b68      	ldr	r3, [pc, #416]	@ (8003e4c <HAL_RCC_ClockConfig+0x1b8>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 030f 	and.w	r3, r3, #15
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d90c      	bls.n	8003cd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb6:	4b65      	ldr	r3, [pc, #404]	@ (8003e4c <HAL_RCC_ClockConfig+0x1b8>)
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	b2d2      	uxtb	r2, r2
 8003cbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cbe:	4b63      	ldr	r3, [pc, #396]	@ (8003e4c <HAL_RCC_ClockConfig+0x1b8>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 030f 	and.w	r3, r3, #15
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d001      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e0b8      	b.n	8003e42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d020      	beq.n	8003d1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d005      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ce8:	4b59      	ldr	r3, [pc, #356]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	4a58      	ldr	r2, [pc, #352]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003cee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003cf2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0308 	and.w	r3, r3, #8
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d005      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d00:	4b53      	ldr	r3, [pc, #332]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	4a52      	ldr	r2, [pc, #328]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d0c:	4b50      	ldr	r3, [pc, #320]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	494d      	ldr	r1, [pc, #308]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d044      	beq.n	8003db4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d107      	bne.n	8003d42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d32:	4b47      	ldr	r3, [pc, #284]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d119      	bne.n	8003d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e07f      	b.n	8003e42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d003      	beq.n	8003d52 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d4e:	2b03      	cmp	r3, #3
 8003d50:	d107      	bne.n	8003d62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d52:	4b3f      	ldr	r3, [pc, #252]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d109      	bne.n	8003d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e06f      	b.n	8003e42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d62:	4b3b      	ldr	r3, [pc, #236]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e067      	b.n	8003e42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d72:	4b37      	ldr	r3, [pc, #220]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f023 0203 	bic.w	r2, r3, #3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	4934      	ldr	r1, [pc, #208]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d84:	f7fe fa5a 	bl	800223c <HAL_GetTick>
 8003d88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8a:	e00a      	b.n	8003da2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d8c:	f7fe fa56 	bl	800223c <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e04f      	b.n	8003e42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003da2:	4b2b      	ldr	r3, [pc, #172]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f003 020c 	and.w	r2, r3, #12
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d1eb      	bne.n	8003d8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003db4:	4b25      	ldr	r3, [pc, #148]	@ (8003e4c <HAL_RCC_ClockConfig+0x1b8>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 030f 	and.w	r3, r3, #15
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d20c      	bcs.n	8003ddc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc2:	4b22      	ldr	r3, [pc, #136]	@ (8003e4c <HAL_RCC_ClockConfig+0x1b8>)
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	b2d2      	uxtb	r2, r2
 8003dc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dca:	4b20      	ldr	r3, [pc, #128]	@ (8003e4c <HAL_RCC_ClockConfig+0x1b8>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 030f 	and.w	r3, r3, #15
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d001      	beq.n	8003ddc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e032      	b.n	8003e42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d008      	beq.n	8003dfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003de8:	4b19      	ldr	r3, [pc, #100]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	4916      	ldr	r1, [pc, #88]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0308 	and.w	r3, r3, #8
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d009      	beq.n	8003e1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e06:	4b12      	ldr	r3, [pc, #72]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	490e      	ldr	r1, [pc, #56]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e1a:	f000 f841 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	4b0b      	ldr	r3, [pc, #44]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	091b      	lsrs	r3, r3, #4
 8003e26:	f003 030f 	and.w	r3, r3, #15
 8003e2a:	490a      	ldr	r1, [pc, #40]	@ (8003e54 <HAL_RCC_ClockConfig+0x1c0>)
 8003e2c:	5ccb      	ldrb	r3, [r1, r3]
 8003e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e32:	4a09      	ldr	r2, [pc, #36]	@ (8003e58 <HAL_RCC_ClockConfig+0x1c4>)
 8003e34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003e36:	4b09      	ldr	r3, [pc, #36]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c8>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fe f9ba 	bl	80021b4 <HAL_InitTick>

  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40023c00 	.word	0x40023c00
 8003e50:	40023800 	.word	0x40023800
 8003e54:	08005860 	.word	0x08005860
 8003e58:	20000028 	.word	0x20000028
 8003e5c:	2000002c 	.word	0x2000002c

08003e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e64:	4b03      	ldr	r3, [pc, #12]	@ (8003e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e66:	681b      	ldr	r3, [r3, #0]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	20000028 	.word	0x20000028

08003e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e7c:	f7ff fff0 	bl	8003e60 <HAL_RCC_GetHCLKFreq>
 8003e80:	4602      	mov	r2, r0
 8003e82:	4b05      	ldr	r3, [pc, #20]	@ (8003e98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	0a9b      	lsrs	r3, r3, #10
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	4903      	ldr	r1, [pc, #12]	@ (8003e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e8e:	5ccb      	ldrb	r3, [r1, r3]
 8003e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40023800 	.word	0x40023800
 8003e9c:	08005870 	.word	0x08005870

08003ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ea4:	b0ae      	sub	sp, #184	@ 0xb8
 8003ea6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ec6:	4bcb      	ldr	r3, [pc, #812]	@ (80041f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 030c 	and.w	r3, r3, #12
 8003ece:	2b0c      	cmp	r3, #12
 8003ed0:	f200 8206 	bhi.w	80042e0 <HAL_RCC_GetSysClockFreq+0x440>
 8003ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8003edc <HAL_RCC_GetSysClockFreq+0x3c>)
 8003ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eda:	bf00      	nop
 8003edc:	08003f11 	.word	0x08003f11
 8003ee0:	080042e1 	.word	0x080042e1
 8003ee4:	080042e1 	.word	0x080042e1
 8003ee8:	080042e1 	.word	0x080042e1
 8003eec:	08003f19 	.word	0x08003f19
 8003ef0:	080042e1 	.word	0x080042e1
 8003ef4:	080042e1 	.word	0x080042e1
 8003ef8:	080042e1 	.word	0x080042e1
 8003efc:	08003f21 	.word	0x08003f21
 8003f00:	080042e1 	.word	0x080042e1
 8003f04:	080042e1 	.word	0x080042e1
 8003f08:	080042e1 	.word	0x080042e1
 8003f0c:	08004111 	.word	0x08004111
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f10:	4bb9      	ldr	r3, [pc, #740]	@ (80041f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003f12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003f16:	e1e7      	b.n	80042e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f18:	4bb8      	ldr	r3, [pc, #736]	@ (80041fc <HAL_RCC_GetSysClockFreq+0x35c>)
 8003f1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003f1e:	e1e3      	b.n	80042e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f20:	4bb4      	ldr	r3, [pc, #720]	@ (80041f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f2c:	4bb1      	ldr	r3, [pc, #708]	@ (80041f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d071      	beq.n	800401c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f38:	4bae      	ldr	r3, [pc, #696]	@ (80041f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	099b      	lsrs	r3, r3, #6
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f44:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003f48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f50:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f54:	2300      	movs	r3, #0
 8003f56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003f5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003f5e:	4622      	mov	r2, r4
 8003f60:	462b      	mov	r3, r5
 8003f62:	f04f 0000 	mov.w	r0, #0
 8003f66:	f04f 0100 	mov.w	r1, #0
 8003f6a:	0159      	lsls	r1, r3, #5
 8003f6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f70:	0150      	lsls	r0, r2, #5
 8003f72:	4602      	mov	r2, r0
 8003f74:	460b      	mov	r3, r1
 8003f76:	4621      	mov	r1, r4
 8003f78:	1a51      	subs	r1, r2, r1
 8003f7a:	6439      	str	r1, [r7, #64]	@ 0x40
 8003f7c:	4629      	mov	r1, r5
 8003f7e:	eb63 0301 	sbc.w	r3, r3, r1
 8003f82:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f84:	f04f 0200 	mov.w	r2, #0
 8003f88:	f04f 0300 	mov.w	r3, #0
 8003f8c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003f90:	4649      	mov	r1, r9
 8003f92:	018b      	lsls	r3, r1, #6
 8003f94:	4641      	mov	r1, r8
 8003f96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f9a:	4641      	mov	r1, r8
 8003f9c:	018a      	lsls	r2, r1, #6
 8003f9e:	4641      	mov	r1, r8
 8003fa0:	1a51      	subs	r1, r2, r1
 8003fa2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003fa4:	4649      	mov	r1, r9
 8003fa6:	eb63 0301 	sbc.w	r3, r3, r1
 8003faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fac:	f04f 0200 	mov.w	r2, #0
 8003fb0:	f04f 0300 	mov.w	r3, #0
 8003fb4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003fb8:	4649      	mov	r1, r9
 8003fba:	00cb      	lsls	r3, r1, #3
 8003fbc:	4641      	mov	r1, r8
 8003fbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fc2:	4641      	mov	r1, r8
 8003fc4:	00ca      	lsls	r2, r1, #3
 8003fc6:	4610      	mov	r0, r2
 8003fc8:	4619      	mov	r1, r3
 8003fca:	4603      	mov	r3, r0
 8003fcc:	4622      	mov	r2, r4
 8003fce:	189b      	adds	r3, r3, r2
 8003fd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fd2:	462b      	mov	r3, r5
 8003fd4:	460a      	mov	r2, r1
 8003fd6:	eb42 0303 	adc.w	r3, r2, r3
 8003fda:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fdc:	f04f 0200 	mov.w	r2, #0
 8003fe0:	f04f 0300 	mov.w	r3, #0
 8003fe4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003fe8:	4629      	mov	r1, r5
 8003fea:	024b      	lsls	r3, r1, #9
 8003fec:	4621      	mov	r1, r4
 8003fee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ff2:	4621      	mov	r1, r4
 8003ff4:	024a      	lsls	r2, r1, #9
 8003ff6:	4610      	mov	r0, r2
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ffe:	2200      	movs	r2, #0
 8004000:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004004:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004008:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800400c:	f7fc fdd8 	bl	8000bc0 <__aeabi_uldivmod>
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	4613      	mov	r3, r2
 8004016:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800401a:	e067      	b.n	80040ec <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800401c:	4b75      	ldr	r3, [pc, #468]	@ (80041f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	099b      	lsrs	r3, r3, #6
 8004022:	2200      	movs	r2, #0
 8004024:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004028:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800402c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004034:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004036:	2300      	movs	r3, #0
 8004038:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800403a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800403e:	4622      	mov	r2, r4
 8004040:	462b      	mov	r3, r5
 8004042:	f04f 0000 	mov.w	r0, #0
 8004046:	f04f 0100 	mov.w	r1, #0
 800404a:	0159      	lsls	r1, r3, #5
 800404c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004050:	0150      	lsls	r0, r2, #5
 8004052:	4602      	mov	r2, r0
 8004054:	460b      	mov	r3, r1
 8004056:	4621      	mov	r1, r4
 8004058:	1a51      	subs	r1, r2, r1
 800405a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800405c:	4629      	mov	r1, r5
 800405e:	eb63 0301 	sbc.w	r3, r3, r1
 8004062:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004064:	f04f 0200 	mov.w	r2, #0
 8004068:	f04f 0300 	mov.w	r3, #0
 800406c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004070:	4649      	mov	r1, r9
 8004072:	018b      	lsls	r3, r1, #6
 8004074:	4641      	mov	r1, r8
 8004076:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800407a:	4641      	mov	r1, r8
 800407c:	018a      	lsls	r2, r1, #6
 800407e:	4641      	mov	r1, r8
 8004080:	ebb2 0a01 	subs.w	sl, r2, r1
 8004084:	4649      	mov	r1, r9
 8004086:	eb63 0b01 	sbc.w	fp, r3, r1
 800408a:	f04f 0200 	mov.w	r2, #0
 800408e:	f04f 0300 	mov.w	r3, #0
 8004092:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004096:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800409a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800409e:	4692      	mov	sl, r2
 80040a0:	469b      	mov	fp, r3
 80040a2:	4623      	mov	r3, r4
 80040a4:	eb1a 0303 	adds.w	r3, sl, r3
 80040a8:	623b      	str	r3, [r7, #32]
 80040aa:	462b      	mov	r3, r5
 80040ac:	eb4b 0303 	adc.w	r3, fp, r3
 80040b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80040b2:	f04f 0200 	mov.w	r2, #0
 80040b6:	f04f 0300 	mov.w	r3, #0
 80040ba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80040be:	4629      	mov	r1, r5
 80040c0:	028b      	lsls	r3, r1, #10
 80040c2:	4621      	mov	r1, r4
 80040c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040c8:	4621      	mov	r1, r4
 80040ca:	028a      	lsls	r2, r1, #10
 80040cc:	4610      	mov	r0, r2
 80040ce:	4619      	mov	r1, r3
 80040d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040d4:	2200      	movs	r2, #0
 80040d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80040d8:	677a      	str	r2, [r7, #116]	@ 0x74
 80040da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80040de:	f7fc fd6f 	bl	8000bc0 <__aeabi_uldivmod>
 80040e2:	4602      	mov	r2, r0
 80040e4:	460b      	mov	r3, r1
 80040e6:	4613      	mov	r3, r2
 80040e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80040ec:	4b41      	ldr	r3, [pc, #260]	@ (80041f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	0c1b      	lsrs	r3, r3, #16
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	3301      	adds	r3, #1
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80040fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004102:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004106:	fbb2 f3f3 	udiv	r3, r2, r3
 800410a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800410e:	e0eb      	b.n	80042e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004110:	4b38      	ldr	r3, [pc, #224]	@ (80041f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004118:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800411c:	4b35      	ldr	r3, [pc, #212]	@ (80041f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d06b      	beq.n	8004200 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004128:	4b32      	ldr	r3, [pc, #200]	@ (80041f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	099b      	lsrs	r3, r3, #6
 800412e:	2200      	movs	r2, #0
 8004130:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004132:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004134:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800413a:	663b      	str	r3, [r7, #96]	@ 0x60
 800413c:	2300      	movs	r3, #0
 800413e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004140:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004144:	4622      	mov	r2, r4
 8004146:	462b      	mov	r3, r5
 8004148:	f04f 0000 	mov.w	r0, #0
 800414c:	f04f 0100 	mov.w	r1, #0
 8004150:	0159      	lsls	r1, r3, #5
 8004152:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004156:	0150      	lsls	r0, r2, #5
 8004158:	4602      	mov	r2, r0
 800415a:	460b      	mov	r3, r1
 800415c:	4621      	mov	r1, r4
 800415e:	1a51      	subs	r1, r2, r1
 8004160:	61b9      	str	r1, [r7, #24]
 8004162:	4629      	mov	r1, r5
 8004164:	eb63 0301 	sbc.w	r3, r3, r1
 8004168:	61fb      	str	r3, [r7, #28]
 800416a:	f04f 0200 	mov.w	r2, #0
 800416e:	f04f 0300 	mov.w	r3, #0
 8004172:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004176:	4659      	mov	r1, fp
 8004178:	018b      	lsls	r3, r1, #6
 800417a:	4651      	mov	r1, sl
 800417c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004180:	4651      	mov	r1, sl
 8004182:	018a      	lsls	r2, r1, #6
 8004184:	4651      	mov	r1, sl
 8004186:	ebb2 0801 	subs.w	r8, r2, r1
 800418a:	4659      	mov	r1, fp
 800418c:	eb63 0901 	sbc.w	r9, r3, r1
 8004190:	f04f 0200 	mov.w	r2, #0
 8004194:	f04f 0300 	mov.w	r3, #0
 8004198:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800419c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041a4:	4690      	mov	r8, r2
 80041a6:	4699      	mov	r9, r3
 80041a8:	4623      	mov	r3, r4
 80041aa:	eb18 0303 	adds.w	r3, r8, r3
 80041ae:	613b      	str	r3, [r7, #16]
 80041b0:	462b      	mov	r3, r5
 80041b2:	eb49 0303 	adc.w	r3, r9, r3
 80041b6:	617b      	str	r3, [r7, #20]
 80041b8:	f04f 0200 	mov.w	r2, #0
 80041bc:	f04f 0300 	mov.w	r3, #0
 80041c0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80041c4:	4629      	mov	r1, r5
 80041c6:	024b      	lsls	r3, r1, #9
 80041c8:	4621      	mov	r1, r4
 80041ca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041ce:	4621      	mov	r1, r4
 80041d0:	024a      	lsls	r2, r1, #9
 80041d2:	4610      	mov	r0, r2
 80041d4:	4619      	mov	r1, r3
 80041d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80041da:	2200      	movs	r2, #0
 80041dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80041de:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80041e0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80041e4:	f7fc fcec 	bl	8000bc0 <__aeabi_uldivmod>
 80041e8:	4602      	mov	r2, r0
 80041ea:	460b      	mov	r3, r1
 80041ec:	4613      	mov	r3, r2
 80041ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041f2:	e065      	b.n	80042c0 <HAL_RCC_GetSysClockFreq+0x420>
 80041f4:	40023800 	.word	0x40023800
 80041f8:	00f42400 	.word	0x00f42400
 80041fc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004200:	4b3d      	ldr	r3, [pc, #244]	@ (80042f8 <HAL_RCC_GetSysClockFreq+0x458>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	099b      	lsrs	r3, r3, #6
 8004206:	2200      	movs	r2, #0
 8004208:	4618      	mov	r0, r3
 800420a:	4611      	mov	r1, r2
 800420c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004210:	653b      	str	r3, [r7, #80]	@ 0x50
 8004212:	2300      	movs	r3, #0
 8004214:	657b      	str	r3, [r7, #84]	@ 0x54
 8004216:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800421a:	4642      	mov	r2, r8
 800421c:	464b      	mov	r3, r9
 800421e:	f04f 0000 	mov.w	r0, #0
 8004222:	f04f 0100 	mov.w	r1, #0
 8004226:	0159      	lsls	r1, r3, #5
 8004228:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800422c:	0150      	lsls	r0, r2, #5
 800422e:	4602      	mov	r2, r0
 8004230:	460b      	mov	r3, r1
 8004232:	4641      	mov	r1, r8
 8004234:	1a51      	subs	r1, r2, r1
 8004236:	60b9      	str	r1, [r7, #8]
 8004238:	4649      	mov	r1, r9
 800423a:	eb63 0301 	sbc.w	r3, r3, r1
 800423e:	60fb      	str	r3, [r7, #12]
 8004240:	f04f 0200 	mov.w	r2, #0
 8004244:	f04f 0300 	mov.w	r3, #0
 8004248:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800424c:	4659      	mov	r1, fp
 800424e:	018b      	lsls	r3, r1, #6
 8004250:	4651      	mov	r1, sl
 8004252:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004256:	4651      	mov	r1, sl
 8004258:	018a      	lsls	r2, r1, #6
 800425a:	4651      	mov	r1, sl
 800425c:	1a54      	subs	r4, r2, r1
 800425e:	4659      	mov	r1, fp
 8004260:	eb63 0501 	sbc.w	r5, r3, r1
 8004264:	f04f 0200 	mov.w	r2, #0
 8004268:	f04f 0300 	mov.w	r3, #0
 800426c:	00eb      	lsls	r3, r5, #3
 800426e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004272:	00e2      	lsls	r2, r4, #3
 8004274:	4614      	mov	r4, r2
 8004276:	461d      	mov	r5, r3
 8004278:	4643      	mov	r3, r8
 800427a:	18e3      	adds	r3, r4, r3
 800427c:	603b      	str	r3, [r7, #0]
 800427e:	464b      	mov	r3, r9
 8004280:	eb45 0303 	adc.w	r3, r5, r3
 8004284:	607b      	str	r3, [r7, #4]
 8004286:	f04f 0200 	mov.w	r2, #0
 800428a:	f04f 0300 	mov.w	r3, #0
 800428e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004292:	4629      	mov	r1, r5
 8004294:	028b      	lsls	r3, r1, #10
 8004296:	4621      	mov	r1, r4
 8004298:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800429c:	4621      	mov	r1, r4
 800429e:	028a      	lsls	r2, r1, #10
 80042a0:	4610      	mov	r0, r2
 80042a2:	4619      	mov	r1, r3
 80042a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80042a8:	2200      	movs	r2, #0
 80042aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042ac:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80042ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80042b2:	f7fc fc85 	bl	8000bc0 <__aeabi_uldivmod>
 80042b6:	4602      	mov	r2, r0
 80042b8:	460b      	mov	r3, r1
 80042ba:	4613      	mov	r3, r2
 80042bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80042c0:	4b0d      	ldr	r3, [pc, #52]	@ (80042f8 <HAL_RCC_GetSysClockFreq+0x458>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	0f1b      	lsrs	r3, r3, #28
 80042c6:	f003 0307 	and.w	r3, r3, #7
 80042ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80042ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80042d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80042d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80042de:	e003      	b.n	80042e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042e0:	4b06      	ldr	r3, [pc, #24]	@ (80042fc <HAL_RCC_GetSysClockFreq+0x45c>)
 80042e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80042e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	37b8      	adds	r7, #184	@ 0xb8
 80042f0:	46bd      	mov	sp, r7
 80042f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042f6:	bf00      	nop
 80042f8:	40023800 	.word	0x40023800
 80042fc:	00f42400 	.word	0x00f42400

08004300 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e28d      	b.n	800482e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b00      	cmp	r3, #0
 800431c:	f000 8083 	beq.w	8004426 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004320:	4b94      	ldr	r3, [pc, #592]	@ (8004574 <HAL_RCC_OscConfig+0x274>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f003 030c 	and.w	r3, r3, #12
 8004328:	2b04      	cmp	r3, #4
 800432a:	d019      	beq.n	8004360 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800432c:	4b91      	ldr	r3, [pc, #580]	@ (8004574 <HAL_RCC_OscConfig+0x274>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f003 030c 	and.w	r3, r3, #12
        || \
 8004334:	2b08      	cmp	r3, #8
 8004336:	d106      	bne.n	8004346 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004338:	4b8e      	ldr	r3, [pc, #568]	@ (8004574 <HAL_RCC_OscConfig+0x274>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004340:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004344:	d00c      	beq.n	8004360 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004346:	4b8b      	ldr	r3, [pc, #556]	@ (8004574 <HAL_RCC_OscConfig+0x274>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800434e:	2b0c      	cmp	r3, #12
 8004350:	d112      	bne.n	8004378 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004352:	4b88      	ldr	r3, [pc, #544]	@ (8004574 <HAL_RCC_OscConfig+0x274>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800435a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800435e:	d10b      	bne.n	8004378 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004360:	4b84      	ldr	r3, [pc, #528]	@ (8004574 <HAL_RCC_OscConfig+0x274>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d05b      	beq.n	8004424 <HAL_RCC_OscConfig+0x124>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d157      	bne.n	8004424 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e25a      	b.n	800482e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004380:	d106      	bne.n	8004390 <HAL_RCC_OscConfig+0x90>
 8004382:	4b7c      	ldr	r3, [pc, #496]	@ (8004574 <HAL_RCC_OscConfig+0x274>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a7b      	ldr	r2, [pc, #492]	@ (8004574 <HAL_RCC_OscConfig+0x274>)
 8004388:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800438c:	6013      	str	r3, [r2, #0]
 800438e:	e01d      	b.n	80043cc <HAL_RCC_OscConfig+0xcc>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004398:	d10c      	bne.n	80043b4 <HAL_RCC_OscConfig+0xb4>
 800439a:	4b76      	ldr	r3, [pc, #472]	@ (8004574 <HAL_RCC_OscConfig+0x274>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a75      	ldr	r2, [pc, #468]	@ (8004574 <HAL_RCC_OscConfig+0x274>)
 80043a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043a4:	6013      	str	r3, [r2, #0]
 80043a6:	4b73      	ldr	r3, [pc, #460]	@ (8004574 <HAL_RCC_OscConfig+0x274>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a72      	ldr	r2, [pc, #456]	@ (8004574 <HAL_RCC_OscConfig+0x274>)
 80043ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043b0:	6013      	str	r3, [r2, #0]
 80043b2:	e00b      	b.n	80043cc <HAL_RCC_OscConfig+0xcc>
 80043b4:	4b6f      	ldr	r3, [pc, #444]	@ (8004574 <HAL_RCC_OscConfig+0x274>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a6e      	ldr	r2, [pc, #440]	@ (8004574 <HAL_RCC_OscConfig+0x274>)
 80043ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043be:	6013      	str	r3, [r2, #0]
 80043c0:	4b6c      	ldr	r3, [pc, #432]	@ (8004574 <HAL_RCC_OscConfig+0x274>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a6b      	ldr	r2, [pc, #428]	@ (8004574 <HAL_RCC_OscConfig+0x274>)
 80043c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d013      	beq.n	80043fc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d4:	f7fd ff32 	bl	800223c <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043da:	e008      	b.n	80043ee <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043dc:	f7fd ff2e 	bl	800223c <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b64      	cmp	r3, #100	@ 0x64
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e21f      	b.n	800482e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ee:	4b61      	ldr	r3, [pc, #388]	@ (8004574 <HAL_RCC_OscConfig+0x274>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0f0      	beq.n	80043dc <HAL_RCC_OscConfig+0xdc>
 80043fa:	e014      	b.n	8004426 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fc:	f7fd ff1e 	bl	800223c <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004404:	f7fd ff1a 	bl	800223c <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b64      	cmp	r3, #100	@ 0x64
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e20b      	b.n	800482e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004416:	4b57      	ldr	r3, [pc, #348]	@ (8004574 <HAL_RCC_OscConfig+0x274>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1f0      	bne.n	8004404 <HAL_RCC_OscConfig+0x104>
 8004422:	e000      	b.n	8004426 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d06f      	beq.n	8004512 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004432:	4b50      	ldr	r3, [pc, #320]	@ (8004574 <HAL_RCC_OscConfig+0x274>)
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f003 030c 	and.w	r3, r3, #12
 800443a:	2b00      	cmp	r3, #0
 800443c:	d017      	beq.n	800446e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800443e:	4b4d      	ldr	r3, [pc, #308]	@ (8004574 <HAL_RCC_OscConfig+0x274>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 030c 	and.w	r3, r3, #12
        || \
 8004446:	2b08      	cmp	r3, #8
 8004448:	d105      	bne.n	8004456 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800444a:	4b4a      	ldr	r3, [pc, #296]	@ (8004574 <HAL_RCC_OscConfig+0x274>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00b      	beq.n	800446e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004456:	4b47      	ldr	r3, [pc, #284]	@ (8004574 <HAL_RCC_OscConfig+0x274>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800445e:	2b0c      	cmp	r3, #12
 8004460:	d11c      	bne.n	800449c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004462:	4b44      	ldr	r3, [pc, #272]	@ (8004574 <HAL_RCC_OscConfig+0x274>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d116      	bne.n	800449c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800446e:	4b41      	ldr	r3, [pc, #260]	@ (8004574 <HAL_RCC_OscConfig+0x274>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d005      	beq.n	8004486 <HAL_RCC_OscConfig+0x186>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d001      	beq.n	8004486 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e1d3      	b.n	800482e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004486:	4b3b      	ldr	r3, [pc, #236]	@ (8004574 <HAL_RCC_OscConfig+0x274>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	4937      	ldr	r1, [pc, #220]	@ (8004574 <HAL_RCC_OscConfig+0x274>)
 8004496:	4313      	orrs	r3, r2
 8004498:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800449a:	e03a      	b.n	8004512 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d020      	beq.n	80044e6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044a4:	4b34      	ldr	r3, [pc, #208]	@ (8004578 <HAL_RCC_OscConfig+0x278>)
 80044a6:	2201      	movs	r2, #1
 80044a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044aa:	f7fd fec7 	bl	800223c <HAL_GetTick>
 80044ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b0:	e008      	b.n	80044c4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044b2:	f7fd fec3 	bl	800223c <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e1b4      	b.n	800482e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044c4:	4b2b      	ldr	r3, [pc, #172]	@ (8004574 <HAL_RCC_OscConfig+0x274>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0f0      	beq.n	80044b2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044d0:	4b28      	ldr	r3, [pc, #160]	@ (8004574 <HAL_RCC_OscConfig+0x274>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	4925      	ldr	r1, [pc, #148]	@ (8004574 <HAL_RCC_OscConfig+0x274>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	600b      	str	r3, [r1, #0]
 80044e4:	e015      	b.n	8004512 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044e6:	4b24      	ldr	r3, [pc, #144]	@ (8004578 <HAL_RCC_OscConfig+0x278>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ec:	f7fd fea6 	bl	800223c <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044f4:	f7fd fea2 	bl	800223c <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e193      	b.n	800482e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004506:	4b1b      	ldr	r3, [pc, #108]	@ (8004574 <HAL_RCC_OscConfig+0x274>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1f0      	bne.n	80044f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0308 	and.w	r3, r3, #8
 800451a:	2b00      	cmp	r3, #0
 800451c:	d036      	beq.n	800458c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d016      	beq.n	8004554 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004526:	4b15      	ldr	r3, [pc, #84]	@ (800457c <HAL_RCC_OscConfig+0x27c>)
 8004528:	2201      	movs	r2, #1
 800452a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800452c:	f7fd fe86 	bl	800223c <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004534:	f7fd fe82 	bl	800223c <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e173      	b.n	800482e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004546:	4b0b      	ldr	r3, [pc, #44]	@ (8004574 <HAL_RCC_OscConfig+0x274>)
 8004548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0f0      	beq.n	8004534 <HAL_RCC_OscConfig+0x234>
 8004552:	e01b      	b.n	800458c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004554:	4b09      	ldr	r3, [pc, #36]	@ (800457c <HAL_RCC_OscConfig+0x27c>)
 8004556:	2200      	movs	r2, #0
 8004558:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800455a:	f7fd fe6f 	bl	800223c <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004560:	e00e      	b.n	8004580 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004562:	f7fd fe6b 	bl	800223c <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d907      	bls.n	8004580 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e15c      	b.n	800482e <HAL_RCC_OscConfig+0x52e>
 8004574:	40023800 	.word	0x40023800
 8004578:	42470000 	.word	0x42470000
 800457c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004580:	4b8a      	ldr	r3, [pc, #552]	@ (80047ac <HAL_RCC_OscConfig+0x4ac>)
 8004582:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1ea      	bne.n	8004562 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 8097 	beq.w	80046c8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800459a:	2300      	movs	r3, #0
 800459c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800459e:	4b83      	ldr	r3, [pc, #524]	@ (80047ac <HAL_RCC_OscConfig+0x4ac>)
 80045a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10f      	bne.n	80045ca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045aa:	2300      	movs	r3, #0
 80045ac:	60bb      	str	r3, [r7, #8]
 80045ae:	4b7f      	ldr	r3, [pc, #508]	@ (80047ac <HAL_RCC_OscConfig+0x4ac>)
 80045b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b2:	4a7e      	ldr	r2, [pc, #504]	@ (80047ac <HAL_RCC_OscConfig+0x4ac>)
 80045b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80045ba:	4b7c      	ldr	r3, [pc, #496]	@ (80047ac <HAL_RCC_OscConfig+0x4ac>)
 80045bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045c2:	60bb      	str	r3, [r7, #8]
 80045c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045c6:	2301      	movs	r3, #1
 80045c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ca:	4b79      	ldr	r3, [pc, #484]	@ (80047b0 <HAL_RCC_OscConfig+0x4b0>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d118      	bne.n	8004608 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045d6:	4b76      	ldr	r3, [pc, #472]	@ (80047b0 <HAL_RCC_OscConfig+0x4b0>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a75      	ldr	r2, [pc, #468]	@ (80047b0 <HAL_RCC_OscConfig+0x4b0>)
 80045dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045e2:	f7fd fe2b 	bl	800223c <HAL_GetTick>
 80045e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e8:	e008      	b.n	80045fc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ea:	f7fd fe27 	bl	800223c <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e118      	b.n	800482e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045fc:	4b6c      	ldr	r3, [pc, #432]	@ (80047b0 <HAL_RCC_OscConfig+0x4b0>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004604:	2b00      	cmp	r3, #0
 8004606:	d0f0      	beq.n	80045ea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d106      	bne.n	800461e <HAL_RCC_OscConfig+0x31e>
 8004610:	4b66      	ldr	r3, [pc, #408]	@ (80047ac <HAL_RCC_OscConfig+0x4ac>)
 8004612:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004614:	4a65      	ldr	r2, [pc, #404]	@ (80047ac <HAL_RCC_OscConfig+0x4ac>)
 8004616:	f043 0301 	orr.w	r3, r3, #1
 800461a:	6713      	str	r3, [r2, #112]	@ 0x70
 800461c:	e01c      	b.n	8004658 <HAL_RCC_OscConfig+0x358>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	2b05      	cmp	r3, #5
 8004624:	d10c      	bne.n	8004640 <HAL_RCC_OscConfig+0x340>
 8004626:	4b61      	ldr	r3, [pc, #388]	@ (80047ac <HAL_RCC_OscConfig+0x4ac>)
 8004628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800462a:	4a60      	ldr	r2, [pc, #384]	@ (80047ac <HAL_RCC_OscConfig+0x4ac>)
 800462c:	f043 0304 	orr.w	r3, r3, #4
 8004630:	6713      	str	r3, [r2, #112]	@ 0x70
 8004632:	4b5e      	ldr	r3, [pc, #376]	@ (80047ac <HAL_RCC_OscConfig+0x4ac>)
 8004634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004636:	4a5d      	ldr	r2, [pc, #372]	@ (80047ac <HAL_RCC_OscConfig+0x4ac>)
 8004638:	f043 0301 	orr.w	r3, r3, #1
 800463c:	6713      	str	r3, [r2, #112]	@ 0x70
 800463e:	e00b      	b.n	8004658 <HAL_RCC_OscConfig+0x358>
 8004640:	4b5a      	ldr	r3, [pc, #360]	@ (80047ac <HAL_RCC_OscConfig+0x4ac>)
 8004642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004644:	4a59      	ldr	r2, [pc, #356]	@ (80047ac <HAL_RCC_OscConfig+0x4ac>)
 8004646:	f023 0301 	bic.w	r3, r3, #1
 800464a:	6713      	str	r3, [r2, #112]	@ 0x70
 800464c:	4b57      	ldr	r3, [pc, #348]	@ (80047ac <HAL_RCC_OscConfig+0x4ac>)
 800464e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004650:	4a56      	ldr	r2, [pc, #344]	@ (80047ac <HAL_RCC_OscConfig+0x4ac>)
 8004652:	f023 0304 	bic.w	r3, r3, #4
 8004656:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d015      	beq.n	800468c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004660:	f7fd fdec 	bl	800223c <HAL_GetTick>
 8004664:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004666:	e00a      	b.n	800467e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004668:	f7fd fde8 	bl	800223c <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004676:	4293      	cmp	r3, r2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e0d7      	b.n	800482e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800467e:	4b4b      	ldr	r3, [pc, #300]	@ (80047ac <HAL_RCC_OscConfig+0x4ac>)
 8004680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0ee      	beq.n	8004668 <HAL_RCC_OscConfig+0x368>
 800468a:	e014      	b.n	80046b6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800468c:	f7fd fdd6 	bl	800223c <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004692:	e00a      	b.n	80046aa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004694:	f7fd fdd2 	bl	800223c <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e0c1      	b.n	800482e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046aa:	4b40      	ldr	r3, [pc, #256]	@ (80047ac <HAL_RCC_OscConfig+0x4ac>)
 80046ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1ee      	bne.n	8004694 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046b6:	7dfb      	ldrb	r3, [r7, #23]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d105      	bne.n	80046c8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046bc:	4b3b      	ldr	r3, [pc, #236]	@ (80047ac <HAL_RCC_OscConfig+0x4ac>)
 80046be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c0:	4a3a      	ldr	r2, [pc, #232]	@ (80047ac <HAL_RCC_OscConfig+0x4ac>)
 80046c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 80ad 	beq.w	800482c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046d2:	4b36      	ldr	r3, [pc, #216]	@ (80047ac <HAL_RCC_OscConfig+0x4ac>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f003 030c 	and.w	r3, r3, #12
 80046da:	2b08      	cmp	r3, #8
 80046dc:	d060      	beq.n	80047a0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d145      	bne.n	8004772 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046e6:	4b33      	ldr	r3, [pc, #204]	@ (80047b4 <HAL_RCC_OscConfig+0x4b4>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ec:	f7fd fda6 	bl	800223c <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046f4:	f7fd fda2 	bl	800223c <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e093      	b.n	800482e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004706:	4b29      	ldr	r3, [pc, #164]	@ (80047ac <HAL_RCC_OscConfig+0x4ac>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1f0      	bne.n	80046f4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	69da      	ldr	r2, [r3, #28]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004720:	019b      	lsls	r3, r3, #6
 8004722:	431a      	orrs	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004728:	085b      	lsrs	r3, r3, #1
 800472a:	3b01      	subs	r3, #1
 800472c:	041b      	lsls	r3, r3, #16
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004734:	061b      	lsls	r3, r3, #24
 8004736:	431a      	orrs	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800473c:	071b      	lsls	r3, r3, #28
 800473e:	491b      	ldr	r1, [pc, #108]	@ (80047ac <HAL_RCC_OscConfig+0x4ac>)
 8004740:	4313      	orrs	r3, r2
 8004742:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004744:	4b1b      	ldr	r3, [pc, #108]	@ (80047b4 <HAL_RCC_OscConfig+0x4b4>)
 8004746:	2201      	movs	r2, #1
 8004748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474a:	f7fd fd77 	bl	800223c <HAL_GetTick>
 800474e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004750:	e008      	b.n	8004764 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004752:	f7fd fd73 	bl	800223c <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e064      	b.n	800482e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004764:	4b11      	ldr	r3, [pc, #68]	@ (80047ac <HAL_RCC_OscConfig+0x4ac>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0f0      	beq.n	8004752 <HAL_RCC_OscConfig+0x452>
 8004770:	e05c      	b.n	800482c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004772:	4b10      	ldr	r3, [pc, #64]	@ (80047b4 <HAL_RCC_OscConfig+0x4b4>)
 8004774:	2200      	movs	r2, #0
 8004776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004778:	f7fd fd60 	bl	800223c <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004780:	f7fd fd5c 	bl	800223c <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e04d      	b.n	800482e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004792:	4b06      	ldr	r3, [pc, #24]	@ (80047ac <HAL_RCC_OscConfig+0x4ac>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1f0      	bne.n	8004780 <HAL_RCC_OscConfig+0x480>
 800479e:	e045      	b.n	800482c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d107      	bne.n	80047b8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e040      	b.n	800482e <HAL_RCC_OscConfig+0x52e>
 80047ac:	40023800 	.word	0x40023800
 80047b0:	40007000 	.word	0x40007000
 80047b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047b8:	4b1f      	ldr	r3, [pc, #124]	@ (8004838 <HAL_RCC_OscConfig+0x538>)
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d030      	beq.n	8004828 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d129      	bne.n	8004828 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047de:	429a      	cmp	r2, r3
 80047e0:	d122      	bne.n	8004828 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80047e8:	4013      	ands	r3, r2
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80047ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d119      	bne.n	8004828 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047fe:	085b      	lsrs	r3, r3, #1
 8004800:	3b01      	subs	r3, #1
 8004802:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004804:	429a      	cmp	r2, r3
 8004806:	d10f      	bne.n	8004828 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004812:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004814:	429a      	cmp	r2, r3
 8004816:	d107      	bne.n	8004828 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004822:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004824:	429a      	cmp	r2, r3
 8004826:	d001      	beq.n	800482c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e000      	b.n	800482e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3718      	adds	r7, #24
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	40023800 	.word	0x40023800

0800483c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e041      	b.n	80048d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d106      	bne.n	8004868 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7fd fb84 	bl	8001f70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2202      	movs	r2, #2
 800486c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	3304      	adds	r3, #4
 8004878:	4619      	mov	r1, r3
 800487a:	4610      	mov	r0, r2
 800487c:	f000 f9b8 	bl	8004bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3708      	adds	r7, #8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
	...

080048dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d109      	bne.n	8004900 <HAL_TIM_PWM_Start+0x24>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	bf14      	ite	ne
 80048f8:	2301      	movne	r3, #1
 80048fa:	2300      	moveq	r3, #0
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	e022      	b.n	8004946 <HAL_TIM_PWM_Start+0x6a>
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	2b04      	cmp	r3, #4
 8004904:	d109      	bne.n	800491a <HAL_TIM_PWM_Start+0x3e>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b01      	cmp	r3, #1
 8004910:	bf14      	ite	ne
 8004912:	2301      	movne	r3, #1
 8004914:	2300      	moveq	r3, #0
 8004916:	b2db      	uxtb	r3, r3
 8004918:	e015      	b.n	8004946 <HAL_TIM_PWM_Start+0x6a>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b08      	cmp	r3, #8
 800491e:	d109      	bne.n	8004934 <HAL_TIM_PWM_Start+0x58>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b01      	cmp	r3, #1
 800492a:	bf14      	ite	ne
 800492c:	2301      	movne	r3, #1
 800492e:	2300      	moveq	r3, #0
 8004930:	b2db      	uxtb	r3, r3
 8004932:	e008      	b.n	8004946 <HAL_TIM_PWM_Start+0x6a>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b01      	cmp	r3, #1
 800493e:	bf14      	ite	ne
 8004940:	2301      	movne	r3, #1
 8004942:	2300      	moveq	r3, #0
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e07c      	b.n	8004a48 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d104      	bne.n	800495e <HAL_TIM_PWM_Start+0x82>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2202      	movs	r2, #2
 8004958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800495c:	e013      	b.n	8004986 <HAL_TIM_PWM_Start+0xaa>
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b04      	cmp	r3, #4
 8004962:	d104      	bne.n	800496e <HAL_TIM_PWM_Start+0x92>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2202      	movs	r2, #2
 8004968:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800496c:	e00b      	b.n	8004986 <HAL_TIM_PWM_Start+0xaa>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b08      	cmp	r3, #8
 8004972:	d104      	bne.n	800497e <HAL_TIM_PWM_Start+0xa2>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2202      	movs	r2, #2
 8004978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800497c:	e003      	b.n	8004986 <HAL_TIM_PWM_Start+0xaa>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2202      	movs	r2, #2
 8004982:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2201      	movs	r2, #1
 800498c:	6839      	ldr	r1, [r7, #0]
 800498e:	4618      	mov	r0, r3
 8004990:	f000 fb8a 	bl	80050a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a2d      	ldr	r2, [pc, #180]	@ (8004a50 <HAL_TIM_PWM_Start+0x174>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d004      	beq.n	80049a8 <HAL_TIM_PWM_Start+0xcc>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a2c      	ldr	r2, [pc, #176]	@ (8004a54 <HAL_TIM_PWM_Start+0x178>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d101      	bne.n	80049ac <HAL_TIM_PWM_Start+0xd0>
 80049a8:	2301      	movs	r3, #1
 80049aa:	e000      	b.n	80049ae <HAL_TIM_PWM_Start+0xd2>
 80049ac:	2300      	movs	r3, #0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d007      	beq.n	80049c2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a22      	ldr	r2, [pc, #136]	@ (8004a50 <HAL_TIM_PWM_Start+0x174>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d022      	beq.n	8004a12 <HAL_TIM_PWM_Start+0x136>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049d4:	d01d      	beq.n	8004a12 <HAL_TIM_PWM_Start+0x136>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a1f      	ldr	r2, [pc, #124]	@ (8004a58 <HAL_TIM_PWM_Start+0x17c>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d018      	beq.n	8004a12 <HAL_TIM_PWM_Start+0x136>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a1d      	ldr	r2, [pc, #116]	@ (8004a5c <HAL_TIM_PWM_Start+0x180>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d013      	beq.n	8004a12 <HAL_TIM_PWM_Start+0x136>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a1c      	ldr	r2, [pc, #112]	@ (8004a60 <HAL_TIM_PWM_Start+0x184>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d00e      	beq.n	8004a12 <HAL_TIM_PWM_Start+0x136>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a16      	ldr	r2, [pc, #88]	@ (8004a54 <HAL_TIM_PWM_Start+0x178>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d009      	beq.n	8004a12 <HAL_TIM_PWM_Start+0x136>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a18      	ldr	r2, [pc, #96]	@ (8004a64 <HAL_TIM_PWM_Start+0x188>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d004      	beq.n	8004a12 <HAL_TIM_PWM_Start+0x136>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a16      	ldr	r2, [pc, #88]	@ (8004a68 <HAL_TIM_PWM_Start+0x18c>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d111      	bne.n	8004a36 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f003 0307 	and.w	r3, r3, #7
 8004a1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2b06      	cmp	r3, #6
 8004a22:	d010      	beq.n	8004a46 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f042 0201 	orr.w	r2, r2, #1
 8004a32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a34:	e007      	b.n	8004a46 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f042 0201 	orr.w	r2, r2, #1
 8004a44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	40010000 	.word	0x40010000
 8004a54:	40010400 	.word	0x40010400
 8004a58:	40000400 	.word	0x40000400
 8004a5c:	40000800 	.word	0x40000800
 8004a60:	40000c00 	.word	0x40000c00
 8004a64:	40014000 	.word	0x40014000
 8004a68:	40001800 	.word	0x40001800

08004a6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d101      	bne.n	8004a8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a86:	2302      	movs	r3, #2
 8004a88:	e0ae      	b.n	8004be8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b0c      	cmp	r3, #12
 8004a96:	f200 809f 	bhi.w	8004bd8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8004aa0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa0:	08004ad5 	.word	0x08004ad5
 8004aa4:	08004bd9 	.word	0x08004bd9
 8004aa8:	08004bd9 	.word	0x08004bd9
 8004aac:	08004bd9 	.word	0x08004bd9
 8004ab0:	08004b15 	.word	0x08004b15
 8004ab4:	08004bd9 	.word	0x08004bd9
 8004ab8:	08004bd9 	.word	0x08004bd9
 8004abc:	08004bd9 	.word	0x08004bd9
 8004ac0:	08004b57 	.word	0x08004b57
 8004ac4:	08004bd9 	.word	0x08004bd9
 8004ac8:	08004bd9 	.word	0x08004bd9
 8004acc:	08004bd9 	.word	0x08004bd9
 8004ad0:	08004b97 	.word	0x08004b97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68b9      	ldr	r1, [r7, #8]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 f934 	bl	8004d48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	699a      	ldr	r2, [r3, #24]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f042 0208 	orr.w	r2, r2, #8
 8004aee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	699a      	ldr	r2, [r3, #24]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f022 0204 	bic.w	r2, r2, #4
 8004afe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6999      	ldr	r1, [r3, #24]
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	691a      	ldr	r2, [r3, #16]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	619a      	str	r2, [r3, #24]
      break;
 8004b12:	e064      	b.n	8004bde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68b9      	ldr	r1, [r7, #8]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 f984 	bl	8004e28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	699a      	ldr	r2, [r3, #24]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	699a      	ldr	r2, [r3, #24]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6999      	ldr	r1, [r3, #24]
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	021a      	lsls	r2, r3, #8
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	430a      	orrs	r2, r1
 8004b52:	619a      	str	r2, [r3, #24]
      break;
 8004b54:	e043      	b.n	8004bde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68b9      	ldr	r1, [r7, #8]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f000 f9d9 	bl	8004f14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	69da      	ldr	r2, [r3, #28]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f042 0208 	orr.w	r2, r2, #8
 8004b70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	69da      	ldr	r2, [r3, #28]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f022 0204 	bic.w	r2, r2, #4
 8004b80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	69d9      	ldr	r1, [r3, #28]
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	691a      	ldr	r2, [r3, #16]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	61da      	str	r2, [r3, #28]
      break;
 8004b94:	e023      	b.n	8004bde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68b9      	ldr	r1, [r7, #8]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 fa2d 	bl	8004ffc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	69da      	ldr	r2, [r3, #28]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	69da      	ldr	r2, [r3, #28]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	69d9      	ldr	r1, [r3, #28]
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	021a      	lsls	r2, r3, #8
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	61da      	str	r2, [r3, #28]
      break;
 8004bd6:	e002      	b.n	8004bde <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	75fb      	strb	r3, [r7, #23]
      break;
 8004bdc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3718      	adds	r7, #24
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a46      	ldr	r2, [pc, #280]	@ (8004d1c <TIM_Base_SetConfig+0x12c>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d013      	beq.n	8004c30 <TIM_Base_SetConfig+0x40>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c0e:	d00f      	beq.n	8004c30 <TIM_Base_SetConfig+0x40>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a43      	ldr	r2, [pc, #268]	@ (8004d20 <TIM_Base_SetConfig+0x130>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d00b      	beq.n	8004c30 <TIM_Base_SetConfig+0x40>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a42      	ldr	r2, [pc, #264]	@ (8004d24 <TIM_Base_SetConfig+0x134>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d007      	beq.n	8004c30 <TIM_Base_SetConfig+0x40>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a41      	ldr	r2, [pc, #260]	@ (8004d28 <TIM_Base_SetConfig+0x138>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d003      	beq.n	8004c30 <TIM_Base_SetConfig+0x40>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a40      	ldr	r2, [pc, #256]	@ (8004d2c <TIM_Base_SetConfig+0x13c>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d108      	bne.n	8004c42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a35      	ldr	r2, [pc, #212]	@ (8004d1c <TIM_Base_SetConfig+0x12c>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d02b      	beq.n	8004ca2 <TIM_Base_SetConfig+0xb2>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c50:	d027      	beq.n	8004ca2 <TIM_Base_SetConfig+0xb2>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a32      	ldr	r2, [pc, #200]	@ (8004d20 <TIM_Base_SetConfig+0x130>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d023      	beq.n	8004ca2 <TIM_Base_SetConfig+0xb2>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a31      	ldr	r2, [pc, #196]	@ (8004d24 <TIM_Base_SetConfig+0x134>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d01f      	beq.n	8004ca2 <TIM_Base_SetConfig+0xb2>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a30      	ldr	r2, [pc, #192]	@ (8004d28 <TIM_Base_SetConfig+0x138>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d01b      	beq.n	8004ca2 <TIM_Base_SetConfig+0xb2>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a2f      	ldr	r2, [pc, #188]	@ (8004d2c <TIM_Base_SetConfig+0x13c>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d017      	beq.n	8004ca2 <TIM_Base_SetConfig+0xb2>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a2e      	ldr	r2, [pc, #184]	@ (8004d30 <TIM_Base_SetConfig+0x140>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d013      	beq.n	8004ca2 <TIM_Base_SetConfig+0xb2>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a2d      	ldr	r2, [pc, #180]	@ (8004d34 <TIM_Base_SetConfig+0x144>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d00f      	beq.n	8004ca2 <TIM_Base_SetConfig+0xb2>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a2c      	ldr	r2, [pc, #176]	@ (8004d38 <TIM_Base_SetConfig+0x148>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d00b      	beq.n	8004ca2 <TIM_Base_SetConfig+0xb2>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a2b      	ldr	r2, [pc, #172]	@ (8004d3c <TIM_Base_SetConfig+0x14c>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d007      	beq.n	8004ca2 <TIM_Base_SetConfig+0xb2>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a2a      	ldr	r2, [pc, #168]	@ (8004d40 <TIM_Base_SetConfig+0x150>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d003      	beq.n	8004ca2 <TIM_Base_SetConfig+0xb2>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a29      	ldr	r2, [pc, #164]	@ (8004d44 <TIM_Base_SetConfig+0x154>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d108      	bne.n	8004cb4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ca8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a10      	ldr	r2, [pc, #64]	@ (8004d1c <TIM_Base_SetConfig+0x12c>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d003      	beq.n	8004ce8 <TIM_Base_SetConfig+0xf8>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a12      	ldr	r2, [pc, #72]	@ (8004d2c <TIM_Base_SetConfig+0x13c>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d103      	bne.n	8004cf0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	691a      	ldr	r2, [r3, #16]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d105      	bne.n	8004d0e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	f023 0201 	bic.w	r2, r3, #1
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	611a      	str	r2, [r3, #16]
  }
}
 8004d0e:	bf00      	nop
 8004d10:	3714      	adds	r7, #20
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	40010000 	.word	0x40010000
 8004d20:	40000400 	.word	0x40000400
 8004d24:	40000800 	.word	0x40000800
 8004d28:	40000c00 	.word	0x40000c00
 8004d2c:	40010400 	.word	0x40010400
 8004d30:	40014000 	.word	0x40014000
 8004d34:	40014400 	.word	0x40014400
 8004d38:	40014800 	.word	0x40014800
 8004d3c:	40001800 	.word	0x40001800
 8004d40:	40001c00 	.word	0x40001c00
 8004d44:	40002000 	.word	0x40002000

08004d48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b087      	sub	sp, #28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	f023 0201 	bic.w	r2, r3, #1
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 0303 	bic.w	r3, r3, #3
 8004d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f023 0302 	bic.w	r3, r3, #2
 8004d90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a20      	ldr	r2, [pc, #128]	@ (8004e20 <TIM_OC1_SetConfig+0xd8>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d003      	beq.n	8004dac <TIM_OC1_SetConfig+0x64>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a1f      	ldr	r2, [pc, #124]	@ (8004e24 <TIM_OC1_SetConfig+0xdc>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d10c      	bne.n	8004dc6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f023 0308 	bic.w	r3, r3, #8
 8004db2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f023 0304 	bic.w	r3, r3, #4
 8004dc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a15      	ldr	r2, [pc, #84]	@ (8004e20 <TIM_OC1_SetConfig+0xd8>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d003      	beq.n	8004dd6 <TIM_OC1_SetConfig+0x8e>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a14      	ldr	r2, [pc, #80]	@ (8004e24 <TIM_OC1_SetConfig+0xdc>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d111      	bne.n	8004dfa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ddc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004de4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	685a      	ldr	r2, [r3, #4]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	621a      	str	r2, [r3, #32]
}
 8004e14:	bf00      	nop
 8004e16:	371c      	adds	r7, #28
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr
 8004e20:	40010000 	.word	0x40010000
 8004e24:	40010400 	.word	0x40010400

08004e28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	f023 0210 	bic.w	r2, r3, #16
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	021b      	lsls	r3, r3, #8
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	f023 0320 	bic.w	r3, r3, #32
 8004e72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	011b      	lsls	r3, r3, #4
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a22      	ldr	r2, [pc, #136]	@ (8004f0c <TIM_OC2_SetConfig+0xe4>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d003      	beq.n	8004e90 <TIM_OC2_SetConfig+0x68>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a21      	ldr	r2, [pc, #132]	@ (8004f10 <TIM_OC2_SetConfig+0xe8>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d10d      	bne.n	8004eac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	011b      	lsls	r3, r3, #4
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004eaa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a17      	ldr	r2, [pc, #92]	@ (8004f0c <TIM_OC2_SetConfig+0xe4>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d003      	beq.n	8004ebc <TIM_OC2_SetConfig+0x94>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a16      	ldr	r2, [pc, #88]	@ (8004f10 <TIM_OC2_SetConfig+0xe8>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d113      	bne.n	8004ee4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ec2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004eca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685a      	ldr	r2, [r3, #4]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	621a      	str	r2, [r3, #32]
}
 8004efe:	bf00      	nop
 8004f00:	371c      	adds	r7, #28
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	40010000 	.word	0x40010000
 8004f10:	40010400 	.word	0x40010400

08004f14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b087      	sub	sp, #28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f023 0303 	bic.w	r3, r3, #3
 8004f4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	021b      	lsls	r3, r3, #8
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a21      	ldr	r2, [pc, #132]	@ (8004ff4 <TIM_OC3_SetConfig+0xe0>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d003      	beq.n	8004f7a <TIM_OC3_SetConfig+0x66>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a20      	ldr	r2, [pc, #128]	@ (8004ff8 <TIM_OC3_SetConfig+0xe4>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d10d      	bne.n	8004f96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	021b      	lsls	r3, r3, #8
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a16      	ldr	r2, [pc, #88]	@ (8004ff4 <TIM_OC3_SetConfig+0xe0>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d003      	beq.n	8004fa6 <TIM_OC3_SetConfig+0x92>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a15      	ldr	r2, [pc, #84]	@ (8004ff8 <TIM_OC3_SetConfig+0xe4>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d113      	bne.n	8004fce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004fac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	011b      	lsls	r3, r3, #4
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	011b      	lsls	r3, r3, #4
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	621a      	str	r2, [r3, #32]
}
 8004fe8:	bf00      	nop
 8004fea:	371c      	adds	r7, #28
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	40010000 	.word	0x40010000
 8004ff8:	40010400 	.word	0x40010400

08004ffc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	69db      	ldr	r3, [r3, #28]
 8005022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800502a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005032:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	021b      	lsls	r3, r3, #8
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	4313      	orrs	r3, r2
 800503e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005046:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	031b      	lsls	r3, r3, #12
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	4313      	orrs	r3, r2
 8005052:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a12      	ldr	r2, [pc, #72]	@ (80050a0 <TIM_OC4_SetConfig+0xa4>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d003      	beq.n	8005064 <TIM_OC4_SetConfig+0x68>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a11      	ldr	r2, [pc, #68]	@ (80050a4 <TIM_OC4_SetConfig+0xa8>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d109      	bne.n	8005078 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800506a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	019b      	lsls	r3, r3, #6
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	4313      	orrs	r3, r2
 8005076:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	621a      	str	r2, [r3, #32]
}
 8005092:	bf00      	nop
 8005094:	371c      	adds	r7, #28
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	40010000 	.word	0x40010000
 80050a4:	40010400 	.word	0x40010400

080050a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b087      	sub	sp, #28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	f003 031f 	and.w	r3, r3, #31
 80050ba:	2201      	movs	r2, #1
 80050bc:	fa02 f303 	lsl.w	r3, r2, r3
 80050c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6a1a      	ldr	r2, [r3, #32]
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	43db      	mvns	r3, r3
 80050ca:	401a      	ands	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6a1a      	ldr	r2, [r3, #32]
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	f003 031f 	and.w	r3, r3, #31
 80050da:	6879      	ldr	r1, [r7, #4]
 80050dc:	fa01 f303 	lsl.w	r3, r1, r3
 80050e0:	431a      	orrs	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	621a      	str	r2, [r3, #32]
}
 80050e6:	bf00      	nop
 80050e8:	371c      	adds	r7, #28
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
	...

080050f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005104:	2b01      	cmp	r3, #1
 8005106:	d101      	bne.n	800510c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005108:	2302      	movs	r3, #2
 800510a:	e05a      	b.n	80051c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005132:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	4313      	orrs	r3, r2
 800513c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a21      	ldr	r2, [pc, #132]	@ (80051d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d022      	beq.n	8005196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005158:	d01d      	beq.n	8005196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a1d      	ldr	r2, [pc, #116]	@ (80051d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d018      	beq.n	8005196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a1b      	ldr	r2, [pc, #108]	@ (80051d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d013      	beq.n	8005196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a1a      	ldr	r2, [pc, #104]	@ (80051dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d00e      	beq.n	8005196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a18      	ldr	r2, [pc, #96]	@ (80051e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d009      	beq.n	8005196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a17      	ldr	r2, [pc, #92]	@ (80051e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d004      	beq.n	8005196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a15      	ldr	r2, [pc, #84]	@ (80051e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d10c      	bne.n	80051b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800519c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	68ba      	ldr	r2, [r7, #8]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3714      	adds	r7, #20
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	40010000 	.word	0x40010000
 80051d4:	40000400 	.word	0x40000400
 80051d8:	40000800 	.word	0x40000800
 80051dc:	40000c00 	.word	0x40000c00
 80051e0:	40010400 	.word	0x40010400
 80051e4:	40014000 	.word	0x40014000
 80051e8:	40001800 	.word	0x40001800

080051ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005200:	2b01      	cmp	r3, #1
 8005202:	d101      	bne.n	8005208 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005204:	2302      	movs	r3, #2
 8005206:	e03d      	b.n	8005284 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	4313      	orrs	r3, r2
 800521c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	4313      	orrs	r3, r2
 800522a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	4313      	orrs	r3, r2
 8005238:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4313      	orrs	r3, r2
 8005246:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	4313      	orrs	r3, r2
 8005254:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	4313      	orrs	r3, r2
 8005262:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	4313      	orrs	r3, r2
 8005270:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <memset>:
 8005290:	4402      	add	r2, r0
 8005292:	4603      	mov	r3, r0
 8005294:	4293      	cmp	r3, r2
 8005296:	d100      	bne.n	800529a <memset+0xa>
 8005298:	4770      	bx	lr
 800529a:	f803 1b01 	strb.w	r1, [r3], #1
 800529e:	e7f9      	b.n	8005294 <memset+0x4>

080052a0 <__errno>:
 80052a0:	4b01      	ldr	r3, [pc, #4]	@ (80052a8 <__errno+0x8>)
 80052a2:	6818      	ldr	r0, [r3, #0]
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	20000034 	.word	0x20000034

080052ac <__libc_init_array>:
 80052ac:	b570      	push	{r4, r5, r6, lr}
 80052ae:	4d0d      	ldr	r5, [pc, #52]	@ (80052e4 <__libc_init_array+0x38>)
 80052b0:	4c0d      	ldr	r4, [pc, #52]	@ (80052e8 <__libc_init_array+0x3c>)
 80052b2:	1b64      	subs	r4, r4, r5
 80052b4:	10a4      	asrs	r4, r4, #2
 80052b6:	2600      	movs	r6, #0
 80052b8:	42a6      	cmp	r6, r4
 80052ba:	d109      	bne.n	80052d0 <__libc_init_array+0x24>
 80052bc:	4d0b      	ldr	r5, [pc, #44]	@ (80052ec <__libc_init_array+0x40>)
 80052be:	4c0c      	ldr	r4, [pc, #48]	@ (80052f0 <__libc_init_array+0x44>)
 80052c0:	f000 fac0 	bl	8005844 <_init>
 80052c4:	1b64      	subs	r4, r4, r5
 80052c6:	10a4      	asrs	r4, r4, #2
 80052c8:	2600      	movs	r6, #0
 80052ca:	42a6      	cmp	r6, r4
 80052cc:	d105      	bne.n	80052da <__libc_init_array+0x2e>
 80052ce:	bd70      	pop	{r4, r5, r6, pc}
 80052d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80052d4:	4798      	blx	r3
 80052d6:	3601      	adds	r6, #1
 80052d8:	e7ee      	b.n	80052b8 <__libc_init_array+0xc>
 80052da:	f855 3b04 	ldr.w	r3, [r5], #4
 80052de:	4798      	blx	r3
 80052e0:	3601      	adds	r6, #1
 80052e2:	e7f2      	b.n	80052ca <__libc_init_array+0x1e>
 80052e4:	080058c0 	.word	0x080058c0
 80052e8:	080058c0 	.word	0x080058c0
 80052ec:	080058c0 	.word	0x080058c0
 80052f0:	080058c4 	.word	0x080058c4

080052f4 <sqrt>:
 80052f4:	b538      	push	{r3, r4, r5, lr}
 80052f6:	ed2d 8b02 	vpush	{d8}
 80052fa:	ec55 4b10 	vmov	r4, r5, d0
 80052fe:	f000 f9c7 	bl	8005690 <__ieee754_sqrt>
 8005302:	4622      	mov	r2, r4
 8005304:	462b      	mov	r3, r5
 8005306:	4620      	mov	r0, r4
 8005308:	4629      	mov	r1, r5
 800530a:	eeb0 8a40 	vmov.f32	s16, s0
 800530e:	eef0 8a60 	vmov.f32	s17, s1
 8005312:	f7fb fbcf 	bl	8000ab4 <__aeabi_dcmpun>
 8005316:	b990      	cbnz	r0, 800533e <sqrt+0x4a>
 8005318:	2200      	movs	r2, #0
 800531a:	2300      	movs	r3, #0
 800531c:	4620      	mov	r0, r4
 800531e:	4629      	mov	r1, r5
 8005320:	f7fb fba0 	bl	8000a64 <__aeabi_dcmplt>
 8005324:	b158      	cbz	r0, 800533e <sqrt+0x4a>
 8005326:	f7ff ffbb 	bl	80052a0 <__errno>
 800532a:	2321      	movs	r3, #33	@ 0x21
 800532c:	6003      	str	r3, [r0, #0]
 800532e:	2200      	movs	r2, #0
 8005330:	2300      	movs	r3, #0
 8005332:	4610      	mov	r0, r2
 8005334:	4619      	mov	r1, r3
 8005336:	f7fb fa4d 	bl	80007d4 <__aeabi_ddiv>
 800533a:	ec41 0b18 	vmov	d8, r0, r1
 800533e:	eeb0 0a48 	vmov.f32	s0, s16
 8005342:	eef0 0a68 	vmov.f32	s1, s17
 8005346:	ecbd 8b02 	vpop	{d8}
 800534a:	bd38      	pop	{r3, r4, r5, pc}
 800534c:	0000      	movs	r0, r0
	...

08005350 <atan>:
 8005350:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005354:	ec55 4b10 	vmov	r4, r5, d0
 8005358:	4bbf      	ldr	r3, [pc, #764]	@ (8005658 <atan+0x308>)
 800535a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800535e:	429e      	cmp	r6, r3
 8005360:	46ab      	mov	fp, r5
 8005362:	d918      	bls.n	8005396 <atan+0x46>
 8005364:	4bbd      	ldr	r3, [pc, #756]	@ (800565c <atan+0x30c>)
 8005366:	429e      	cmp	r6, r3
 8005368:	d801      	bhi.n	800536e <atan+0x1e>
 800536a:	d109      	bne.n	8005380 <atan+0x30>
 800536c:	b144      	cbz	r4, 8005380 <atan+0x30>
 800536e:	4622      	mov	r2, r4
 8005370:	462b      	mov	r3, r5
 8005372:	4620      	mov	r0, r4
 8005374:	4629      	mov	r1, r5
 8005376:	f7fa ff4d 	bl	8000214 <__adddf3>
 800537a:	4604      	mov	r4, r0
 800537c:	460d      	mov	r5, r1
 800537e:	e006      	b.n	800538e <atan+0x3e>
 8005380:	f1bb 0f00 	cmp.w	fp, #0
 8005384:	f340 812b 	ble.w	80055de <atan+0x28e>
 8005388:	a597      	add	r5, pc, #604	@ (adr r5, 80055e8 <atan+0x298>)
 800538a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800538e:	ec45 4b10 	vmov	d0, r4, r5
 8005392:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005396:	4bb2      	ldr	r3, [pc, #712]	@ (8005660 <atan+0x310>)
 8005398:	429e      	cmp	r6, r3
 800539a:	d813      	bhi.n	80053c4 <atan+0x74>
 800539c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80053a0:	429e      	cmp	r6, r3
 80053a2:	d80c      	bhi.n	80053be <atan+0x6e>
 80053a4:	a392      	add	r3, pc, #584	@ (adr r3, 80055f0 <atan+0x2a0>)
 80053a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053aa:	4620      	mov	r0, r4
 80053ac:	4629      	mov	r1, r5
 80053ae:	f7fa ff31 	bl	8000214 <__adddf3>
 80053b2:	4bac      	ldr	r3, [pc, #688]	@ (8005664 <atan+0x314>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	f7fb fb73 	bl	8000aa0 <__aeabi_dcmpgt>
 80053ba:	2800      	cmp	r0, #0
 80053bc:	d1e7      	bne.n	800538e <atan+0x3e>
 80053be:	f04f 3aff 	mov.w	sl, #4294967295
 80053c2:	e029      	b.n	8005418 <atan+0xc8>
 80053c4:	f000 f95c 	bl	8005680 <fabs>
 80053c8:	4ba7      	ldr	r3, [pc, #668]	@ (8005668 <atan+0x318>)
 80053ca:	429e      	cmp	r6, r3
 80053cc:	ec55 4b10 	vmov	r4, r5, d0
 80053d0:	f200 80bc 	bhi.w	800554c <atan+0x1fc>
 80053d4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80053d8:	429e      	cmp	r6, r3
 80053da:	f200 809e 	bhi.w	800551a <atan+0x1ca>
 80053de:	4622      	mov	r2, r4
 80053e0:	462b      	mov	r3, r5
 80053e2:	4620      	mov	r0, r4
 80053e4:	4629      	mov	r1, r5
 80053e6:	f7fa ff15 	bl	8000214 <__adddf3>
 80053ea:	4b9e      	ldr	r3, [pc, #632]	@ (8005664 <atan+0x314>)
 80053ec:	2200      	movs	r2, #0
 80053ee:	f7fa ff0f 	bl	8000210 <__aeabi_dsub>
 80053f2:	2200      	movs	r2, #0
 80053f4:	4606      	mov	r6, r0
 80053f6:	460f      	mov	r7, r1
 80053f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80053fc:	4620      	mov	r0, r4
 80053fe:	4629      	mov	r1, r5
 8005400:	f7fa ff08 	bl	8000214 <__adddf3>
 8005404:	4602      	mov	r2, r0
 8005406:	460b      	mov	r3, r1
 8005408:	4630      	mov	r0, r6
 800540a:	4639      	mov	r1, r7
 800540c:	f7fb f9e2 	bl	80007d4 <__aeabi_ddiv>
 8005410:	f04f 0a00 	mov.w	sl, #0
 8005414:	4604      	mov	r4, r0
 8005416:	460d      	mov	r5, r1
 8005418:	4622      	mov	r2, r4
 800541a:	462b      	mov	r3, r5
 800541c:	4620      	mov	r0, r4
 800541e:	4629      	mov	r1, r5
 8005420:	f7fb f8ae 	bl	8000580 <__aeabi_dmul>
 8005424:	4602      	mov	r2, r0
 8005426:	460b      	mov	r3, r1
 8005428:	4680      	mov	r8, r0
 800542a:	4689      	mov	r9, r1
 800542c:	f7fb f8a8 	bl	8000580 <__aeabi_dmul>
 8005430:	a371      	add	r3, pc, #452	@ (adr r3, 80055f8 <atan+0x2a8>)
 8005432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005436:	4606      	mov	r6, r0
 8005438:	460f      	mov	r7, r1
 800543a:	f7fb f8a1 	bl	8000580 <__aeabi_dmul>
 800543e:	a370      	add	r3, pc, #448	@ (adr r3, 8005600 <atan+0x2b0>)
 8005440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005444:	f7fa fee6 	bl	8000214 <__adddf3>
 8005448:	4632      	mov	r2, r6
 800544a:	463b      	mov	r3, r7
 800544c:	f7fb f898 	bl	8000580 <__aeabi_dmul>
 8005450:	a36d      	add	r3, pc, #436	@ (adr r3, 8005608 <atan+0x2b8>)
 8005452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005456:	f7fa fedd 	bl	8000214 <__adddf3>
 800545a:	4632      	mov	r2, r6
 800545c:	463b      	mov	r3, r7
 800545e:	f7fb f88f 	bl	8000580 <__aeabi_dmul>
 8005462:	a36b      	add	r3, pc, #428	@ (adr r3, 8005610 <atan+0x2c0>)
 8005464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005468:	f7fa fed4 	bl	8000214 <__adddf3>
 800546c:	4632      	mov	r2, r6
 800546e:	463b      	mov	r3, r7
 8005470:	f7fb f886 	bl	8000580 <__aeabi_dmul>
 8005474:	a368      	add	r3, pc, #416	@ (adr r3, 8005618 <atan+0x2c8>)
 8005476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547a:	f7fa fecb 	bl	8000214 <__adddf3>
 800547e:	4632      	mov	r2, r6
 8005480:	463b      	mov	r3, r7
 8005482:	f7fb f87d 	bl	8000580 <__aeabi_dmul>
 8005486:	a366      	add	r3, pc, #408	@ (adr r3, 8005620 <atan+0x2d0>)
 8005488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548c:	f7fa fec2 	bl	8000214 <__adddf3>
 8005490:	4642      	mov	r2, r8
 8005492:	464b      	mov	r3, r9
 8005494:	f7fb f874 	bl	8000580 <__aeabi_dmul>
 8005498:	a363      	add	r3, pc, #396	@ (adr r3, 8005628 <atan+0x2d8>)
 800549a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549e:	4680      	mov	r8, r0
 80054a0:	4689      	mov	r9, r1
 80054a2:	4630      	mov	r0, r6
 80054a4:	4639      	mov	r1, r7
 80054a6:	f7fb f86b 	bl	8000580 <__aeabi_dmul>
 80054aa:	a361      	add	r3, pc, #388	@ (adr r3, 8005630 <atan+0x2e0>)
 80054ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b0:	f7fa feae 	bl	8000210 <__aeabi_dsub>
 80054b4:	4632      	mov	r2, r6
 80054b6:	463b      	mov	r3, r7
 80054b8:	f7fb f862 	bl	8000580 <__aeabi_dmul>
 80054bc:	a35e      	add	r3, pc, #376	@ (adr r3, 8005638 <atan+0x2e8>)
 80054be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c2:	f7fa fea5 	bl	8000210 <__aeabi_dsub>
 80054c6:	4632      	mov	r2, r6
 80054c8:	463b      	mov	r3, r7
 80054ca:	f7fb f859 	bl	8000580 <__aeabi_dmul>
 80054ce:	a35c      	add	r3, pc, #368	@ (adr r3, 8005640 <atan+0x2f0>)
 80054d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d4:	f7fa fe9c 	bl	8000210 <__aeabi_dsub>
 80054d8:	4632      	mov	r2, r6
 80054da:	463b      	mov	r3, r7
 80054dc:	f7fb f850 	bl	8000580 <__aeabi_dmul>
 80054e0:	a359      	add	r3, pc, #356	@ (adr r3, 8005648 <atan+0x2f8>)
 80054e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e6:	f7fa fe93 	bl	8000210 <__aeabi_dsub>
 80054ea:	4632      	mov	r2, r6
 80054ec:	463b      	mov	r3, r7
 80054ee:	f7fb f847 	bl	8000580 <__aeabi_dmul>
 80054f2:	4602      	mov	r2, r0
 80054f4:	460b      	mov	r3, r1
 80054f6:	4640      	mov	r0, r8
 80054f8:	4649      	mov	r1, r9
 80054fa:	f7fa fe8b 	bl	8000214 <__adddf3>
 80054fe:	4622      	mov	r2, r4
 8005500:	462b      	mov	r3, r5
 8005502:	f7fb f83d 	bl	8000580 <__aeabi_dmul>
 8005506:	f1ba 3fff 	cmp.w	sl, #4294967295
 800550a:	4602      	mov	r2, r0
 800550c:	460b      	mov	r3, r1
 800550e:	d148      	bne.n	80055a2 <atan+0x252>
 8005510:	4620      	mov	r0, r4
 8005512:	4629      	mov	r1, r5
 8005514:	f7fa fe7c 	bl	8000210 <__aeabi_dsub>
 8005518:	e72f      	b.n	800537a <atan+0x2a>
 800551a:	4b52      	ldr	r3, [pc, #328]	@ (8005664 <atan+0x314>)
 800551c:	2200      	movs	r2, #0
 800551e:	4620      	mov	r0, r4
 8005520:	4629      	mov	r1, r5
 8005522:	f7fa fe75 	bl	8000210 <__aeabi_dsub>
 8005526:	4b4f      	ldr	r3, [pc, #316]	@ (8005664 <atan+0x314>)
 8005528:	4606      	mov	r6, r0
 800552a:	460f      	mov	r7, r1
 800552c:	2200      	movs	r2, #0
 800552e:	4620      	mov	r0, r4
 8005530:	4629      	mov	r1, r5
 8005532:	f7fa fe6f 	bl	8000214 <__adddf3>
 8005536:	4602      	mov	r2, r0
 8005538:	460b      	mov	r3, r1
 800553a:	4630      	mov	r0, r6
 800553c:	4639      	mov	r1, r7
 800553e:	f7fb f949 	bl	80007d4 <__aeabi_ddiv>
 8005542:	f04f 0a01 	mov.w	sl, #1
 8005546:	4604      	mov	r4, r0
 8005548:	460d      	mov	r5, r1
 800554a:	e765      	b.n	8005418 <atan+0xc8>
 800554c:	4b47      	ldr	r3, [pc, #284]	@ (800566c <atan+0x31c>)
 800554e:	429e      	cmp	r6, r3
 8005550:	d21c      	bcs.n	800558c <atan+0x23c>
 8005552:	4b47      	ldr	r3, [pc, #284]	@ (8005670 <atan+0x320>)
 8005554:	2200      	movs	r2, #0
 8005556:	4620      	mov	r0, r4
 8005558:	4629      	mov	r1, r5
 800555a:	f7fa fe59 	bl	8000210 <__aeabi_dsub>
 800555e:	4b44      	ldr	r3, [pc, #272]	@ (8005670 <atan+0x320>)
 8005560:	4606      	mov	r6, r0
 8005562:	460f      	mov	r7, r1
 8005564:	2200      	movs	r2, #0
 8005566:	4620      	mov	r0, r4
 8005568:	4629      	mov	r1, r5
 800556a:	f7fb f809 	bl	8000580 <__aeabi_dmul>
 800556e:	4b3d      	ldr	r3, [pc, #244]	@ (8005664 <atan+0x314>)
 8005570:	2200      	movs	r2, #0
 8005572:	f7fa fe4f 	bl	8000214 <__adddf3>
 8005576:	4602      	mov	r2, r0
 8005578:	460b      	mov	r3, r1
 800557a:	4630      	mov	r0, r6
 800557c:	4639      	mov	r1, r7
 800557e:	f7fb f929 	bl	80007d4 <__aeabi_ddiv>
 8005582:	f04f 0a02 	mov.w	sl, #2
 8005586:	4604      	mov	r4, r0
 8005588:	460d      	mov	r5, r1
 800558a:	e745      	b.n	8005418 <atan+0xc8>
 800558c:	4622      	mov	r2, r4
 800558e:	462b      	mov	r3, r5
 8005590:	4938      	ldr	r1, [pc, #224]	@ (8005674 <atan+0x324>)
 8005592:	2000      	movs	r0, #0
 8005594:	f7fb f91e 	bl	80007d4 <__aeabi_ddiv>
 8005598:	f04f 0a03 	mov.w	sl, #3
 800559c:	4604      	mov	r4, r0
 800559e:	460d      	mov	r5, r1
 80055a0:	e73a      	b.n	8005418 <atan+0xc8>
 80055a2:	4b35      	ldr	r3, [pc, #212]	@ (8005678 <atan+0x328>)
 80055a4:	4e35      	ldr	r6, [pc, #212]	@ (800567c <atan+0x32c>)
 80055a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80055aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ae:	f7fa fe2f 	bl	8000210 <__aeabi_dsub>
 80055b2:	4622      	mov	r2, r4
 80055b4:	462b      	mov	r3, r5
 80055b6:	f7fa fe2b 	bl	8000210 <__aeabi_dsub>
 80055ba:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80055be:	4602      	mov	r2, r0
 80055c0:	460b      	mov	r3, r1
 80055c2:	e9d6 0100 	ldrd	r0, r1, [r6]
 80055c6:	f7fa fe23 	bl	8000210 <__aeabi_dsub>
 80055ca:	f1bb 0f00 	cmp.w	fp, #0
 80055ce:	4604      	mov	r4, r0
 80055d0:	460d      	mov	r5, r1
 80055d2:	f6bf aedc 	bge.w	800538e <atan+0x3e>
 80055d6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80055da:	461d      	mov	r5, r3
 80055dc:	e6d7      	b.n	800538e <atan+0x3e>
 80055de:	a51c      	add	r5, pc, #112	@ (adr r5, 8005650 <atan+0x300>)
 80055e0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80055e4:	e6d3      	b.n	800538e <atan+0x3e>
 80055e6:	bf00      	nop
 80055e8:	54442d18 	.word	0x54442d18
 80055ec:	3ff921fb 	.word	0x3ff921fb
 80055f0:	8800759c 	.word	0x8800759c
 80055f4:	7e37e43c 	.word	0x7e37e43c
 80055f8:	e322da11 	.word	0xe322da11
 80055fc:	3f90ad3a 	.word	0x3f90ad3a
 8005600:	24760deb 	.word	0x24760deb
 8005604:	3fa97b4b 	.word	0x3fa97b4b
 8005608:	a0d03d51 	.word	0xa0d03d51
 800560c:	3fb10d66 	.word	0x3fb10d66
 8005610:	c54c206e 	.word	0xc54c206e
 8005614:	3fb745cd 	.word	0x3fb745cd
 8005618:	920083ff 	.word	0x920083ff
 800561c:	3fc24924 	.word	0x3fc24924
 8005620:	5555550d 	.word	0x5555550d
 8005624:	3fd55555 	.word	0x3fd55555
 8005628:	2c6a6c2f 	.word	0x2c6a6c2f
 800562c:	bfa2b444 	.word	0xbfa2b444
 8005630:	52defd9a 	.word	0x52defd9a
 8005634:	3fadde2d 	.word	0x3fadde2d
 8005638:	af749a6d 	.word	0xaf749a6d
 800563c:	3fb3b0f2 	.word	0x3fb3b0f2
 8005640:	fe231671 	.word	0xfe231671
 8005644:	3fbc71c6 	.word	0x3fbc71c6
 8005648:	9998ebc4 	.word	0x9998ebc4
 800564c:	3fc99999 	.word	0x3fc99999
 8005650:	54442d18 	.word	0x54442d18
 8005654:	bff921fb 	.word	0xbff921fb
 8005658:	440fffff 	.word	0x440fffff
 800565c:	7ff00000 	.word	0x7ff00000
 8005660:	3fdbffff 	.word	0x3fdbffff
 8005664:	3ff00000 	.word	0x3ff00000
 8005668:	3ff2ffff 	.word	0x3ff2ffff
 800566c:	40038000 	.word	0x40038000
 8005670:	3ff80000 	.word	0x3ff80000
 8005674:	bff00000 	.word	0xbff00000
 8005678:	08005878 	.word	0x08005878
 800567c:	08005898 	.word	0x08005898

08005680 <fabs>:
 8005680:	ec51 0b10 	vmov	r0, r1, d0
 8005684:	4602      	mov	r2, r0
 8005686:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800568a:	ec43 2b10 	vmov	d0, r2, r3
 800568e:	4770      	bx	lr

08005690 <__ieee754_sqrt>:
 8005690:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005694:	4a68      	ldr	r2, [pc, #416]	@ (8005838 <__ieee754_sqrt+0x1a8>)
 8005696:	ec55 4b10 	vmov	r4, r5, d0
 800569a:	43aa      	bics	r2, r5
 800569c:	462b      	mov	r3, r5
 800569e:	4621      	mov	r1, r4
 80056a0:	d110      	bne.n	80056c4 <__ieee754_sqrt+0x34>
 80056a2:	4622      	mov	r2, r4
 80056a4:	4620      	mov	r0, r4
 80056a6:	4629      	mov	r1, r5
 80056a8:	f7fa ff6a 	bl	8000580 <__aeabi_dmul>
 80056ac:	4602      	mov	r2, r0
 80056ae:	460b      	mov	r3, r1
 80056b0:	4620      	mov	r0, r4
 80056b2:	4629      	mov	r1, r5
 80056b4:	f7fa fdae 	bl	8000214 <__adddf3>
 80056b8:	4604      	mov	r4, r0
 80056ba:	460d      	mov	r5, r1
 80056bc:	ec45 4b10 	vmov	d0, r4, r5
 80056c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056c4:	2d00      	cmp	r5, #0
 80056c6:	dc0e      	bgt.n	80056e6 <__ieee754_sqrt+0x56>
 80056c8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80056cc:	4322      	orrs	r2, r4
 80056ce:	d0f5      	beq.n	80056bc <__ieee754_sqrt+0x2c>
 80056d0:	b19d      	cbz	r5, 80056fa <__ieee754_sqrt+0x6a>
 80056d2:	4622      	mov	r2, r4
 80056d4:	4620      	mov	r0, r4
 80056d6:	4629      	mov	r1, r5
 80056d8:	f7fa fd9a 	bl	8000210 <__aeabi_dsub>
 80056dc:	4602      	mov	r2, r0
 80056de:	460b      	mov	r3, r1
 80056e0:	f7fb f878 	bl	80007d4 <__aeabi_ddiv>
 80056e4:	e7e8      	b.n	80056b8 <__ieee754_sqrt+0x28>
 80056e6:	152a      	asrs	r2, r5, #20
 80056e8:	d115      	bne.n	8005716 <__ieee754_sqrt+0x86>
 80056ea:	2000      	movs	r0, #0
 80056ec:	e009      	b.n	8005702 <__ieee754_sqrt+0x72>
 80056ee:	0acb      	lsrs	r3, r1, #11
 80056f0:	3a15      	subs	r2, #21
 80056f2:	0549      	lsls	r1, r1, #21
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d0fa      	beq.n	80056ee <__ieee754_sqrt+0x5e>
 80056f8:	e7f7      	b.n	80056ea <__ieee754_sqrt+0x5a>
 80056fa:	462a      	mov	r2, r5
 80056fc:	e7fa      	b.n	80056f4 <__ieee754_sqrt+0x64>
 80056fe:	005b      	lsls	r3, r3, #1
 8005700:	3001      	adds	r0, #1
 8005702:	02dc      	lsls	r4, r3, #11
 8005704:	d5fb      	bpl.n	80056fe <__ieee754_sqrt+0x6e>
 8005706:	1e44      	subs	r4, r0, #1
 8005708:	1b12      	subs	r2, r2, r4
 800570a:	f1c0 0420 	rsb	r4, r0, #32
 800570e:	fa21 f404 	lsr.w	r4, r1, r4
 8005712:	4323      	orrs	r3, r4
 8005714:	4081      	lsls	r1, r0
 8005716:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800571a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800571e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005722:	07d2      	lsls	r2, r2, #31
 8005724:	bf5c      	itt	pl
 8005726:	005b      	lslpl	r3, r3, #1
 8005728:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800572c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005730:	bf58      	it	pl
 8005732:	0049      	lslpl	r1, r1, #1
 8005734:	2600      	movs	r6, #0
 8005736:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800573a:	106d      	asrs	r5, r5, #1
 800573c:	0049      	lsls	r1, r1, #1
 800573e:	2016      	movs	r0, #22
 8005740:	4632      	mov	r2, r6
 8005742:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8005746:	1917      	adds	r7, r2, r4
 8005748:	429f      	cmp	r7, r3
 800574a:	bfde      	ittt	le
 800574c:	193a      	addle	r2, r7, r4
 800574e:	1bdb      	suble	r3, r3, r7
 8005750:	1936      	addle	r6, r6, r4
 8005752:	0fcf      	lsrs	r7, r1, #31
 8005754:	3801      	subs	r0, #1
 8005756:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800575a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800575e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8005762:	d1f0      	bne.n	8005746 <__ieee754_sqrt+0xb6>
 8005764:	4604      	mov	r4, r0
 8005766:	2720      	movs	r7, #32
 8005768:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800576c:	429a      	cmp	r2, r3
 800576e:	eb00 0e0c 	add.w	lr, r0, ip
 8005772:	db02      	blt.n	800577a <__ieee754_sqrt+0xea>
 8005774:	d113      	bne.n	800579e <__ieee754_sqrt+0x10e>
 8005776:	458e      	cmp	lr, r1
 8005778:	d811      	bhi.n	800579e <__ieee754_sqrt+0x10e>
 800577a:	f1be 0f00 	cmp.w	lr, #0
 800577e:	eb0e 000c 	add.w	r0, lr, ip
 8005782:	da42      	bge.n	800580a <__ieee754_sqrt+0x17a>
 8005784:	2800      	cmp	r0, #0
 8005786:	db40      	blt.n	800580a <__ieee754_sqrt+0x17a>
 8005788:	f102 0801 	add.w	r8, r2, #1
 800578c:	1a9b      	subs	r3, r3, r2
 800578e:	458e      	cmp	lr, r1
 8005790:	bf88      	it	hi
 8005792:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005796:	eba1 010e 	sub.w	r1, r1, lr
 800579a:	4464      	add	r4, ip
 800579c:	4642      	mov	r2, r8
 800579e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80057a2:	3f01      	subs	r7, #1
 80057a4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80057a8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80057ac:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80057b0:	d1dc      	bne.n	800576c <__ieee754_sqrt+0xdc>
 80057b2:	4319      	orrs	r1, r3
 80057b4:	d01b      	beq.n	80057ee <__ieee754_sqrt+0x15e>
 80057b6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800583c <__ieee754_sqrt+0x1ac>
 80057ba:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8005840 <__ieee754_sqrt+0x1b0>
 80057be:	e9da 0100 	ldrd	r0, r1, [sl]
 80057c2:	e9db 2300 	ldrd	r2, r3, [fp]
 80057c6:	f7fa fd23 	bl	8000210 <__aeabi_dsub>
 80057ca:	e9da 8900 	ldrd	r8, r9, [sl]
 80057ce:	4602      	mov	r2, r0
 80057d0:	460b      	mov	r3, r1
 80057d2:	4640      	mov	r0, r8
 80057d4:	4649      	mov	r1, r9
 80057d6:	f7fb f94f 	bl	8000a78 <__aeabi_dcmple>
 80057da:	b140      	cbz	r0, 80057ee <__ieee754_sqrt+0x15e>
 80057dc:	f1b4 3fff 	cmp.w	r4, #4294967295
 80057e0:	e9da 0100 	ldrd	r0, r1, [sl]
 80057e4:	e9db 2300 	ldrd	r2, r3, [fp]
 80057e8:	d111      	bne.n	800580e <__ieee754_sqrt+0x17e>
 80057ea:	3601      	adds	r6, #1
 80057ec:	463c      	mov	r4, r7
 80057ee:	1072      	asrs	r2, r6, #1
 80057f0:	0863      	lsrs	r3, r4, #1
 80057f2:	07f1      	lsls	r1, r6, #31
 80057f4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80057f8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80057fc:	bf48      	it	mi
 80057fe:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8005802:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8005806:	4618      	mov	r0, r3
 8005808:	e756      	b.n	80056b8 <__ieee754_sqrt+0x28>
 800580a:	4690      	mov	r8, r2
 800580c:	e7be      	b.n	800578c <__ieee754_sqrt+0xfc>
 800580e:	f7fa fd01 	bl	8000214 <__adddf3>
 8005812:	e9da 8900 	ldrd	r8, r9, [sl]
 8005816:	4602      	mov	r2, r0
 8005818:	460b      	mov	r3, r1
 800581a:	4640      	mov	r0, r8
 800581c:	4649      	mov	r1, r9
 800581e:	f7fb f921 	bl	8000a64 <__aeabi_dcmplt>
 8005822:	b120      	cbz	r0, 800582e <__ieee754_sqrt+0x19e>
 8005824:	1ca0      	adds	r0, r4, #2
 8005826:	bf08      	it	eq
 8005828:	3601      	addeq	r6, #1
 800582a:	3402      	adds	r4, #2
 800582c:	e7df      	b.n	80057ee <__ieee754_sqrt+0x15e>
 800582e:	1c63      	adds	r3, r4, #1
 8005830:	f023 0401 	bic.w	r4, r3, #1
 8005834:	e7db      	b.n	80057ee <__ieee754_sqrt+0x15e>
 8005836:	bf00      	nop
 8005838:	7ff00000 	.word	0x7ff00000
 800583c:	20000090 	.word	0x20000090
 8005840:	20000088 	.word	0x20000088

08005844 <_init>:
 8005844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005846:	bf00      	nop
 8005848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800584a:	bc08      	pop	{r3}
 800584c:	469e      	mov	lr, r3
 800584e:	4770      	bx	lr

08005850 <_fini>:
 8005850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005852:	bf00      	nop
 8005854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005856:	bc08      	pop	{r3}
 8005858:	469e      	mov	lr, r3
 800585a:	4770      	bx	lr
